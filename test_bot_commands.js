// –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–∞
const https = require('https');

// ID —á–∞—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π)
const CHAT_ID = 7129776749;
const userId = CHAT_ID;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –±–æ—Ç–∞
function sendTestMessage(text) {
  const testData = {
    update_id: Math.floor(Math.random() * 1000000),
    message: {
      message_id: Math.floor(Math.random() * 10000),
      from: {
        id: userId,
        first_name: "–¢–µ—Å—Ç–µ—Ä",
        username: "Tester"
      },
      chat: {
        id: CHAT_ID,
        first_name: "–¢–µ—Å—Ç–µ—Ä",
        username: "Tester",
        type: "private"
      },
      date: Math.floor(Date.now() / 1000),
      text: text
    }
  };

  const data = JSON.stringify(testData);
  
  const options = {
    hostname: 'localhost',
    port: 3000,
    path: '/webhook',
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Content-Length': data.length
    }
  };

  return new Promise((resolve, reject) => {
    const req = https.request(options, (res) => {
      let responseData = '';
      
      res.on('data', (chunk) => {
        responseData += chunk;
      });
      
      res.on('end', () => {
        resolve(responseData);
      });
    });
    
    req.on('error', (error) => {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      reject(error);
    });
    
    req.write(data);
    req.end();
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
async function testAllCommands() {
  const commands = [
    '/start',
    'üìã –ü—Ä–æ—Ñ–∏–ª—å',
    'üì¶ –ó–∞–∫–∞–∑—ã',
    'üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å',
    'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
    'üí∞ –î–æ—Ö–æ–¥',
    '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏',
    'üîÑ –ü–æ–¥–ø–∏—Å–∫–∞',
    'üí≥ –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂',
    '‚ùì –ü–æ–º–æ—â—å'
  ];
  
  console.log('–ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞...\n');
  
  for (const command of commands) {
    console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã: "${command}"`);
    try {
      await sendTestMessage(command);
      console.log(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ "${command}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–∞–Ω–¥—ã "${command}":`, error);
    }
    
    // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏ –¥–ª—è –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await new Promise(resolve => setTimeout(resolve, 2000));
  }
  
  console.log('\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
testAllCommands().catch(console.error); 