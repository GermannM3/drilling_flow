"""
DrillFlow Telegram Bot
"""
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, WebAppInfo
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.client.default import DefaultBotProperties
from aiogram.enums.parse_mode import ParseMode
import logging
import asyncio
from datetime import datetime
from app.core.config import get_settings
from app.db.models import User, Order, Contractor
from app.schemas.order import OrderCreate, OrderStatus
from app.schemas.user import UserCreate, UserRoleEnum
from app.core.database import get_async_session
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
import json

settings = get_settings()
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(
    token=settings.TELEGRAM_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
storage = RedisStorage.from_url(settings.REDIS_URL)
dp = Dispatcher(storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class OrderStates(StatesGroup):
    choosing_service = State()
    entering_address = State()
    entering_description = State()
    confirming = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="üî® –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑"),
            KeyboardButton(text="üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
        ],
        [
            KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"),
            KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")
        ]
    ],
    resize_keyboard=True
)

service_keyboard = InlineKeyboardBuilder()
service_keyboard.button(text="üö∞ –ë—É—Ä–µ–Ω–∏–µ —Å–∫–≤–∞–∂–∏–Ω—ã", callback_data="service_drilling")
service_keyboard.button(text="üîß –†–µ–º–æ–Ω—Ç —Å–∫–≤–∞–∂–∏–Ω—ã", callback_data="service_repair")
service_keyboard.button(text="üöΩ –ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è", callback_data="service_sewage")
service_keyboard.adjust(1)

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        async with get_async_session() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = await session.execute(
                select(User).where(User.telegram_id == str(message.from_user.id))
            )
            user = result.scalar_one_or_none()
            
            if not user:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                new_user = UserCreate(
                    telegram_id=str(message.from_user.id),
                    username=message.from_user.username or "",
                    first_name=message.from_user.first_name,
                    role=UserRoleEnum.CLIENT
                )
                user = User(**new_user.dict())
                session.add(user)
                await session.commit()
                
                await message.answer(
                    f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DrillFlow, {message.from_user.first_name}!\n"
                    "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∑–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥–∏ –ø–æ –±—É—Ä–µ–Ω–∏—é —Å–∫–≤–∞–∂–∏–Ω –∏ –º–æ–Ω—Ç–∞–∂—É –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏–∏.",
                    reply_markup=main_keyboard
                )
            else:
                await message.answer(
                    f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.first_name}!",
                    reply_markup=main_keyboard
                )
    except Exception as e:
        logger.error(f"Error in start command: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(lambda message: message.text == "üî® –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑")
async def create_order(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    await state.set_state(OrderStates.choosing_service)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å–ª—É–≥–∏:",
        reply_markup=service_keyboard.as_markup()
    )

@dp.callback_query(lambda c: c.data.startswith("service_"))
async def process_service_choice(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏"""
    service_type = callback.data.split("_")[1]
    await state.update_data(service_type=service_type)
    await state.set_state(OrderStates.entering_address)
    
    await callback.message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π.",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[[types.KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)]],
            resize_keyboard=True
        )
    )
    await callback.answer()

@dp.message(OrderStates.entering_address)
async def process_address(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞"""
    if message.location:
        # TODO: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –∞–¥—Ä–µ—Å —á–µ—Ä–µ–∑ API
        address = f"lat: {message.location.latitude}, lon: {message.location.longitude}"
    else:
        address = message.text
        
    await state.update_data(address=address)
    await state.set_state(OrderStates.entering_description)
    
    await message.answer(
        "–û–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ä–æ–±–Ω–µ–µ (–≥–ª—É–±–∏–Ω–∞ —Å–∫–≤–∞–∂–∏–Ω—ã, —Ç–∏–ø —Ä–∞–±–æ—Ç –∏ —Ç.–¥.):",
        reply_markup=types.ReplyKeyboardRemove()
    )

@dp.message(OrderStates.entering_description)
async def process_description(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    data = await state.get_data()
    await state.update_data(description=message.text)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    try:
        async with get_async_session() as session:
            order = Order(
                client_id=message.from_user.id,
                service_type=data['service_type'],
                address=data['address'],
                description=message.text,
                status=OrderStatus.NEW
            )
            session.add(order)
            await session.commit()
            
            # –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤
            result = await session.execute(
                select(Contractor)
                .where(Contractor.specialization == data['service_type'])
                .order_by(Contractor.rating.desc())
                .limit(5)
            )
            contractors = result.scalars().all()
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–¥—Ä—è–¥—á–∏–∫–∞–º
            for contractor in contractors:
                try:
                    await bot.send_message(
                        contractor.telegram_id,
                        f"üîî –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n"
                        f"–¢–∏–ø: {data['service_type']}\n"
                        f"–ê–¥—Ä–µ—Å: {data['address']}\n"
                        f"–û–ø–∏—Å–∞–Ω–∏–µ: {message.text}\n\n"
                        f"–£ –≤–∞—Å –µ—Å—Ç—å 5 –º–∏–Ω—É—Ç –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–∫–∞–∑–∞.",
                        reply_markup=InlineKeyboardBuilder()
                        .button(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{order.id}")
                        .button(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"decline_{order.id}")
                        .as_markup()
                    )
                except Exception as e:
                    logger.error(f"Error sending notification to contractor {contractor.id}: {e}")
            
            await message.answer(
                "‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –ø–æ–¥—Ä—è–¥—á–∏–∫–∞.",
                reply_markup=main_keyboard
            )
            
    except Exception as e:
        logger.error(f"Error creating order: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_keyboard
        )
    
    await state.clear()

@dp.callback_query(lambda c: c.data.startswith(("accept_", "decline_")))
async def process_contractor_response(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞"""
    action, order_id = callback.data.split("_")
    
    try:
        async with get_async_session() as session:
            result = await session.execute(
                select(Order).where(Order.id == int(order_id))
            )
            order = result.scalar_one_or_none()
            
            if not order:
                await callback.answer("–ó–∞–∫–∞–∑ —É–∂–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
                return
                
            if action == "accept":
                if order.contractor_id:
                    await callback.answer("–ó–∞–∫–∞–∑ —É–∂–µ –ø—Ä–∏–Ω—è—Ç –¥—Ä—É–≥–∏–º –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–º")
                    return
                    
                order.contractor_id = callback.from_user.id
                order.status = OrderStatus.ASSIGNED
                await session.commit()
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
                await bot.send_message(
                    order.client_id,
                    f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ #{order.id} –ø—Ä–∏–Ω—è—Ç –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–º!"
                )
                
                await callback.answer("–í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–∫–∞–∑!")
                
            else:  # decline
                await callback.answer("–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –∑–∞–∫–∞–∑–∞")
                
    except Exception as e:
        logger.error(f"Error processing contractor response: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def start_polling():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"Error starting bot: {e}")

if __name__ == "__main__":
    asyncio.run(start_polling()) 