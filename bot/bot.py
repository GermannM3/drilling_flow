import os
import sys
import logging
import traceback
from datetime import datetime
import asyncio
import sqlite3
import json
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
BOT_WEBHOOK_DOMAIN = os.getenv('BOT_WEBHOOK_DOMAIN')
USE_POLLING = os.getenv('USE_POLLING', 'False').lower() in ('true', '1', 't')
DISABLE_BOT = os.getenv('DISABLE_BOT', 'False').lower() in ('true', '1', 't')
DATABASE_URL = os.getenv('DATABASE_URL')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
if not TELEGRAM_TOKEN:
    logger.error("TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    sys.exit(1)

logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: USE_POLLING={USE_POLLING}, DISABLE_BOT={DISABLE_BOT}")
logger.info(f"–¢–æ–∫–µ–Ω: {TELEGRAM_TOKEN[:5]}...{TELEGRAM_TOKEN[-5:]}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def init_db():
    try:
        # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ –ë–î
        if 'VERCEL' in os.environ:
            # –ù–∞ Vercel –∏—Å–ø–æ–ª—å–∑—É–µ–º SQLite –≤ –ø–∞–º—è—Ç–∏ –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –≤–Ω–µ—à–Ω–µ–π –ë–î
            if DATABASE_URL and DATABASE_URL.startswith('postgres'):
                # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
                logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è PostgreSQL –Ω–∞ Vercel")
                return None  # –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º SQLite –≤ –ø–∞–º—è—Ç–∏
                conn = sqlite3.connect(':memory:')
                logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SQLite –≤ –ø–∞–º—è—Ç–∏ –Ω–∞ Vercel")
        else:
            # –õ–æ–∫–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª SQLite
            conn = sqlite3.connect('drillflow.db')
            logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–∞—è SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        cursor = conn.cursor()
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS drilling_operations (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            operation_type TEXT NOT NULL,
            depth REAL,
            status TEXT NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        ''')
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS reports (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            report_type TEXT NOT NULL,
            data TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        ''')
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            is_admin BOOLEAN DEFAULT 0,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        ''')
        conn.commit()
        return conn
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        logger.error(traceback.format_exc())
        return None

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def register_user(conn, user_id, username, first_name, last_name):
    try:
        cursor = conn.cursor()
        cursor.execute(
            "INSERT OR IGNORE INTO users (user_id, username, first_name, last_name) VALUES (?, ?, ?, ?)",
            (user_id, username, first_name, last_name)
        )
        conn.commit()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        conn.rollback()

def create_drilling_operation(conn, user_id, operation_type, depth=None):
    try:
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO drilling_operations (user_id, operation_type, depth, status) VALUES (?, ?, ?, ?)",
            (user_id, operation_type, depth, "–Ω–∞—á–∞—Ç–æ")
        )
        conn.commit()
        return cursor.lastrowid
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –±—É—Ä–µ–Ω–∏—è: {e}")
        conn.rollback()
        return None

def update_drilling_operation(conn, operation_id, status, depth=None):
    try:
        cursor = conn.cursor()
        if depth is not None:
            cursor.execute(
                "UPDATE drilling_operations SET status = ?, depth = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?",
                (status, depth, operation_id)
            )
        else:
            cursor.execute(
                "UPDATE drilling_operations SET status = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?",
                (status, operation_id)
            )
        conn.commit()
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –±—É—Ä–µ–Ω–∏—è: {e}")
        conn.rollback()
        return False

def get_user_operations(conn, user_id, limit=5):
    try:
        cursor = conn.cursor()
        cursor.execute(
            "SELECT id, operation_type, depth, status, created_at FROM drilling_operations WHERE user_id = ? ORDER BY created_at DESC LIMIT ?",
            (user_id, limit)
        )
        return cursor.fetchall()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return []

def create_report(conn, user_id, report_type, data_dict):
    try:
        cursor = conn.cursor()
        data_json = json.dumps(data_dict)
        cursor.execute(
            "INSERT INTO reports (user_id, report_type, data) VALUES (?, ?, ?)",
            (user_id, report_type, data_json)
        )
        conn.commit()
        return cursor.lastrowid
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        conn.rollback()
        return None

def get_user_reports(conn, user_id, limit=5):
    try:
        cursor = conn.cursor()
        cursor.execute(
            "SELECT id, report_type, data, created_at FROM reports WHERE user_id = ? ORDER BY created_at DESC LIMIT ?",
            (user_id, limit)
        )
        reports = []
        for row in cursor.fetchall():
            report_id, report_type, data_json, created_at = row
            try:
                data = json.loads(data_json)
            except:
                data = {}
            reports.append({
                'id': report_id,
                'type': report_type,
                'data': data,
                'created_at': created_at
            })
        return reports
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return []

try:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_conn = init_db()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    bot = Bot(token=TELEGRAM_TOKEN)
    dp = Dispatcher(bot)
    dp.middleware.setup(LoggingMiddleware())
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    main_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    main_keyboard.add(KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
    main_keyboard.add(KeyboardButton("üìù –û—Ç—á–µ—Ç—ã"), KeyboardButton("üîç –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑"))
    main_keyboard.add(KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"), KeyboardButton("‚ùì –ü–æ–º–æ—â—å"))
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    reports_keyboard = InlineKeyboardMarkup(row_width=2)
    reports_keyboard.add(
        InlineKeyboardButton("–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π", callback_data="report_daily"),
        InlineKeyboardButton("–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π", callback_data="report_weekly"),
        InlineKeyboardButton("–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π", callback_data="report_monthly"),
        InlineKeyboardButton("–ì–æ–¥–æ–≤–æ–π", callback_data="report_yearly")
    )
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
    order_keyboard = InlineKeyboardMarkup(row_width=2)
    order_keyboard.add(
        InlineKeyboardButton("–ë—É—Ä–µ–Ω–∏–µ —Å–∫–≤–∞–∂–∏–Ω—ã", callback_data="order_drilling"),
        InlineKeyboardButton("–†–µ–º–æ–Ω—Ç —Å–∫–≤–∞–∂–∏–Ω—ã", callback_data="order_repair"),
        InlineKeyboardButton("–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è", callback_data="order_sewer"),
        InlineKeyboardButton("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data="order_consult")
    )
    
    @dp.message_handler(commands=['start'])
    async def cmd_start(message: types.Message):
        try:
            user_id = message.from_user.id
            username = message.from_user.username
            first_name = message.from_user.first_name
            last_name = message.from_user.last_name
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
            if db_conn:
                register_user(db_conn, user_id, username, first_name, last_name)
            
            await message.answer(
                f"üëã –ü—Ä–∏–≤–µ—Ç, {first_name}!\n\n"
                f"–Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—É—Ä–æ–≤—ã–º–∏ —Ä–∞–±–æ—Ç–∞–º–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
                reply_markup=main_keyboard
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /start: {e}")
            logger.error(traceback.format_exc())
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    @dp.message_handler(commands=['help'])
    async def cmd_help(message: types.Message):
        try:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} (ID: {message.from_user.id}) –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å")
            
            help_text = (
                "üìö *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:*\n\n"
                "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
                "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
                "/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
                "/reports - –í—ã–±—Ä–∞—Ç—å —Ç–∏–ø –æ—Ç—á–µ—Ç–∞\n"
                "/order - –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑\n"
                "/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n"
                "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
            )
            
            await message.answer(help_text, parse_mode="Markdown")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /help: {e}")
            logger.error(traceback.format_exc())
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    @dp.message_handler(commands=['stats'])
    async def cmd_stats(message: types.Message):
        try:
            user_id = message.from_user.id
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} (ID: {user_id}) –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
            operations = []
            if db_conn:
                operations = get_user_operations(db_conn, user_id)
            
            current_date = datetime.now().strftime("%d.%m.%Y")
            
            if operations:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                completed = sum(1 for op in operations if op[3] == "–∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                in_progress = sum(1 for op in operations if op[3] == "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ")
                total_depth = sum(op[2] for op in operations if op[2] is not None)
                
                stats_text = (
                    f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ {current_date}*\n\n"
                    f"üîÑ –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {len(operations)}\n"
                    f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed}\n"
                    f"‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ: {in_progress}\n"
                    f"üìè –û–±—â–∞—è –≥–ª—É–±–∏–Ω–∞ –±—É—Ä–µ–Ω–∏—è: {total_depth}–º\n\n"
                    f"_–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%H:%M:%S')}_"
                )
            else:
                # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
                stats_text = (
                    f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ {current_date}*\n\n"
                    f"–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –±—É—Ä–µ–Ω–∏—è.\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üîç –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑' –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.\n\n"
                    f"_–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%H:%M:%S')}_"
                )
            
            await message.answer(stats_text, parse_mode="Markdown")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /stats: {e}")
            logger.error(traceback.format_exc())
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    @dp.message_handler(commands=['reports'])
    async def cmd_reports(message: types.Message):
        try:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} (ID: {message.from_user.id}) –∑–∞–ø—Ä–æ—Å–∏–ª –æ—Ç—á–µ—Ç—ã")
            
            await message.answer(
                "üìù –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:",
                reply_markup=reports_keyboard
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /reports: {e}")
            logger.error(traceback.format_exc())
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    @dp.message_handler(commands=['order'])
    async def cmd_order(message: types.Message):
        try:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} (ID: {message.from_user.id}) –∑–∞–ø—Ä–æ—Å–∏–ª —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞")
            
            await message.answer(
                "üîç –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–∫–∞–∑–∞:",
                reply_markup=order_keyboard
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /order: {e}")
            logger.error(traceback.format_exc())
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    @dp.callback_query_handler(lambda c: c.data.startswith('report_'))
    async def process_report_callback(callback_query: types.CallbackQuery):
        try:
            report_type = callback_query.data.split('_')[1]
            user_id = callback_query.from_user.id
            username = callback_query.from_user.username
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –∑–∞–ø—Ä–æ—Å–∏–ª –æ—Ç—á–µ—Ç —Ç–∏–ø–∞: {report_type}")
            
            report_titles = {
                'daily': '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π',
                'weekly': '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π',
                'monthly': '–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π',
                'yearly': '–ì–æ–¥–æ–≤–æ–π'
            }
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            report_id = None
            if db_conn:
                # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
                operations = get_user_operations(db_conn, user_id, limit=10)
                report_data = {
                    'type': report_type,
                    'operations_count': len(operations),
                    'generated_at': datetime.now().isoformat()
                }
                report_id = create_report(db_conn, user_id, report_type, report_data)
            
            await bot.answer_callback_query(callback_query.id)
            
            if report_id:
                await bot.send_message(
                    callback_query.from_user.id,
                    f"üìä *{report_titles[report_type]} –æ—Ç—á–µ—Ç*\n\n"
                    f"–û—Ç—á–µ—Ç #{report_id} –∑–∞ –ø–µ—Ä–∏–æ–¥: {datetime.now().strftime('%d.%m.%Y')}\n"
                    f"–°—Ç–∞—Ç—É—Å: –ì–æ—Ç–æ–≤\n\n"
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {len(operations)}\n"
                    f"–î–µ—Ç–∞–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ.",
                    parse_mode="Markdown"
                )
            else:
                await bot.send_message(
                    callback_query.from_user.id,
                    f"üìä *{report_titles[report_type]} –æ—Ç—á–µ—Ç*\n\n"
                    f"–û—Ç—á–µ—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥: {datetime.now().strftime('%d.%m.%Y')}\n"
                    f"–°—Ç–∞—Ç—É—Å: –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏\n\n"
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    parse_mode="Markdown"
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback_query (report): {e}")
            logger.error(traceback.format_exc())
            await bot.send_message(
                callback_query.from_user.id,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    @dp.callback_query_handler(lambda c: c.data.startswith('order_'))
    async def process_order_callback(callback_query: types.CallbackQuery):
        try:
            order_type = callback_query.data.split('_')[1]
            user_id = callback_query.from_user.id
            username = callback_query.from_user.username
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) —Å–æ–∑–¥–∞–µ—Ç –∑–∞–∫–∞–∑ —Ç–∏–ø–∞: {order_type}")
            
            order_titles = {
                'drilling': '–ë—É—Ä–µ–Ω–∏–µ —Å–∫–≤–∞–∂–∏–Ω—ã',
                'repair': '–†–µ–º–æ–Ω—Ç —Å–∫–≤–∞–∂–∏–Ω—ã',
                'sewer': '–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è',
                'consult': '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è'
            }
            
            # –°–æ–∑–¥–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            operation_id = None
            if db_conn:
                depth = 10.0 if order_type == 'drilling' else None
                operation_id = create_drilling_operation(db_conn, user_id, order_titles[order_type], depth)
            
            await bot.answer_callback_query(callback_query.id)
            
            if operation_id:
                await bot.send_message(
                    callback_query.from_user.id,
                    f"‚úÖ *–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω*\n\n"
                    f"–¢–∏–ø: {order_titles[order_type]}\n"
                    f"ID –∑–∞–∫–∞–∑–∞: #{operation_id}\n"
                    f"–°—Ç–∞—Ç—É—Å: –ü—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É\n\n"
                    f"–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.",
                    parse_mode="Markdown"
                )
            else:
                await bot.send_message(
                    callback_query.from_user.id,
                    f"‚ùå *–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞*\n\n"
                    f"–¢–∏–ø: {order_titles[order_type]}\n"
                    f"–°—Ç–∞—Ç—É—Å: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å\n\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                    parse_mode="Markdown"
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback_query (order): {e}")
            logger.error(traceback.format_exc())
            await bot.send_message(
                callback_query.from_user.id,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    @dp.message_handler(lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    async def text_stats(message: types.Message):
        try:
            await cmd_stats(message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞': {e}")
            logger.error(traceback.format_exc())
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    @dp.message_handler(lambda message: message.text == "üìù –û—Ç—á–µ—Ç—ã")
    async def text_reports(message: types.Message):
        try:
            await cmd_reports(message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã '–û—Ç—á–µ—Ç—ã': {e}")
            logger.error(traceback.format_exc())
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    @dp.message_handler(lambda message: message.text == "üîç –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑")
    async def text_order(message: types.Message):
        try:
            await cmd_order(message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã '–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑': {e}")
            logger.error(traceback.format_exc())
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    @dp.message_handler(lambda message: message.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    async def text_settings(message: types.Message):
        try:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} (ID: {message.from_user.id}) –∑–∞–ø—Ä–æ—Å–∏–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
            has_settings = False
            if db_conn:
                # –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –≤—ã–±–æ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                has_settings = True
            
            if has_settings:
                await message.answer(
                    "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*\n\n"
                    "üîî –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: –í–∫–ª—é—á–µ–Ω—ã\n"
                    "üîï –û–±—ã—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í—ã–∫–ª—é—á–µ–Ω—ã\n"
                    "‚è∞ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç: –í–∫–ª—é—á–µ–Ω (08:00)\n"
                    "üìÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç: –í–∫–ª—é—á–µ–Ω (–ü–Ω, 09:00)\n\n"
                    "_–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å._",
                    parse_mode="Markdown"
                )
            else:
                await message.answer(
                    "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*\n\n"
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n"
                    "–î–ª—è –∏—Ö —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–∏—Å—Ç–µ–º—ã.",
                    parse_mode="Markdown"
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã '–ù–∞—Å—Ç—Ä–æ–π–∫–∏': {e}")
            logger.error(traceback.format_exc())
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    @dp.message_handler(lambda message: message.text == "‚ùì –ü–æ–º–æ—â—å")
    async def text_help(message: types.Message):
        try:
            await cmd_help(message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã '–ü–æ–º–æ—â—å': {e}")
            logger.error(traceback.format_exc())
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    @dp.message_handler()
    async def echo(message: types.Message):
        try:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.username} (ID: {message.from_user.id}): {message.text}")
            
            await message.answer(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
                reply_markup=main_keyboard
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ echo: {e}")
            logger.error(traceback.format_exc())
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–∞
    async def on_startup(dp):
        if not DISABLE_BOT and not USE_POLLING:
            webhook_url = f"{BOT_WEBHOOK_DOMAIN}/webhook/{TELEGRAM_TOKEN}"
            logger.info(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –Ω–∞ URL: {webhook_url}")
            await bot.set_webhook(webhook_url)
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞
    async def on_shutdown(dp):
        if not USE_POLLING:
            logger.info("–û—Ç–∫–ª—é—á–∞–µ–º –≤–µ–±—Ö—É–∫")
            await bot.delete_webhook()
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
    def register_handlers(dp):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞.
        –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling,
        —Ç–∞–∫ –∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–æ–≤.
        """
        # –ö–æ–º–∞–Ω–¥—ã
        dp.register_message_handler(cmd_start, commands=['start'])
        dp.register_message_handler(cmd_help, commands=['help'])
        dp.register_message_handler(cmd_stats, commands=['stats'])
        dp.register_message_handler(cmd_reports, commands=['reports'])
        dp.register_message_handler(cmd_order, commands=['order'])
        
        # Callback –∑–∞–ø—Ä–æ—Å—ã
        dp.register_callback_query_handler(process_report_callback, lambda c: c.data.startswith('report_'))
        dp.register_callback_query_handler(process_order_callback, lambda c: c.data.startswith('order_'))
        
        # –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
        dp.register_message_handler(text_stats, lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        dp.register_message_handler(text_reports, lambda message: message.text == "üìù –û—Ç—á–µ—Ç—ã")
        dp.register_message_handler(text_order, lambda message: message.text == "üîç –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑")
        dp.register_message_handler(text_settings, lambda message: message.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        dp.register_message_handler(text_help, lambda message: message.text == "‚ùì –ü–æ–º–æ—â—å")
        
        # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        dp.register_message_handler(echo)
        
        return dp
    
    # –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
    if __name__ == '__main__':
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        if DISABLE_BOT:
            logger.warning("–ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
            sys.exit(0)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        register_handlers(dp)
        
        if USE_POLLING:
            logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling")
            executor.start_polling(dp, skip_updates=True)
        else:
            logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ webhook")
            # –í —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ –±–æ—Ç –±—É–¥–µ—Ç –∂–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –≤–µ–±—Ö—É–∫–∞
            # –î–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞ Vercel —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–µ
            # –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ —ç—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ api/python/index.js
            sys.exit(0)

except Exception as e:
    logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
    logger.critical(traceback.format_exc())
    sys.exit(1) 