import logging
import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
def get_token():
    token = os.getenv('TELEGRAM_TOKEN') or os.getenv('TELEGRAM_BOT_TOKEN')
    
    # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
    if not token:
        token = "7554540052:AAEvde_xL9d85kbJBdxPu8B6Mo4UEMF-qBs"
        logger.warning("Using hardcoded token! This is not secure for production.")
    
    if not token:
        logger.error("No Telegram token found. Please set TELEGRAM_TOKEN environment variable.")
        return None
        
    logger.info(f"Using token: {token[:5]}...{token[-5:]}")
    return token

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
try:
    token = get_token()
    if not token:
        raise ValueError("No valid token found")
    
    bot = Bot(token=token)
    dp = Dispatcher()
    logger.info("Bot and dispatcher initialized successfully")
except Exception as e:
    logger.error(f"Failed to initialize bot: {e}", exc_info=True)
    raise

# –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîç –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑"), KeyboardButton(text="üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã")],
            [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="‚≠ê –†–µ–π—Ç–∏–Ω–≥")],
            [KeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞"), KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    )
    return keyboard

# –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–∫–∞–∑–∞
def get_order_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ë—É—Ä–µ–Ω–∏–µ —Å–∫–≤–∞–∂–∏–Ω—ã", callback_data="order_drilling")],
            [InlineKeyboardButton(text="–†–µ–º–æ–Ω—Ç —Å–∫–≤–∞–∂–∏–Ω—ã", callback_data="order_repair")],
            [InlineKeyboardButton(text="–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ", callback_data="order_maintenance")],
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel")]
        ]
    )
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: Message):
    logger.info(f"Start command from user {message.from_user.id}")
    try:
        await message.answer(
            '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç DrillFlow. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ:',
            reply_markup=get_main_keyboard()
        )
        logger.info("Successfully sent start message")
    except Exception as e:
        logger.error(f"Error in start command: {e}", exc_info=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message(Command("help"))
async def cmd_help(message: Message):
    help_text = """
    –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
    /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
    /help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
    /profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å
    /order - –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑
    /status - –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–æ–≤
    """
    await message.answer(help_text, reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /order
@dp.message(Command("order"))
async def cmd_order(message: Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å–ª—É–≥–∏:",
        reply_markup=get_order_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
@dp.callback_query()
async def process_callback(callback_query: types.CallbackQuery):
    callback_data = callback_query.data
    
    if callback_data == "order_drilling":
        await callback_query.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –±—É—Ä–µ–Ω–∏–µ —Å–∫–≤–∞–∂–∏–Ω—ã. –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å:")
    elif callback_data == "order_repair":
        await callback_query.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–º–æ–Ω—Ç —Å–∫–≤–∞–∂–∏–Ω—ã. –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å:")
    elif callback_data == "order_maintenance":
        await callback_query.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å–∫–≤–∞–∂–∏–Ω—ã. –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å:")
    elif callback_data == "cancel":
        await callback_query.message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())
    
    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback_query
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∫–Ω–æ–ø–æ–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã)
@dp.message()
async def handle_text(message: types.Message):
    text = message.text
    
    if text == "üîç –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å–ª—É–≥–∏:", reply_markup=get_order_keyboard())
    elif text == "üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã":
        await message.answer("–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
    elif text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å":
        user_info = f"""
        –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
        ID: {message.from_user.id}
        –ò–º—è: {message.from_user.first_name} {message.from_user.last_name or ''}
        Username: @{message.from_user.username or '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
        """
        await message.answer(user_info)
    elif text == "‚≠ê –†–µ–π—Ç–∏–Ω–≥":
        await message.answer("–¢–æ–ø –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É:\n\n1. –û–û–û '–ë—É—Ä–°–µ—Ä–≤–∏—Å' - 4.9‚≠ê\n2. –ò–ü –ò–≤–∞–Ω–æ–≤ - 4.8‚≠ê\n3. –û–û–û '–ê–∫–≤–∞–î—Ä–∏–ª–ª' - 4.7‚≠ê")
    elif text == "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
        await message.answer("–î–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞ email: support@drillflow.ru –∏–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: +7 (800) 123-45-67")
    elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        await cmd_help(message)
    else:
        await message.answer(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}", reply_markup=get_main_keyboard())

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    try:
        logger.info("Starting bot...")
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"Failed to start bot: {e}", exc_info=True)
    finally:
        logger.info("Bot stopped, closing session")
        await bot.session.close()

if __name__ == '__main__':
    try:
        logger.info("Bot script started")
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Bot stopped by user (KeyboardInterrupt)")
    except Exception as e:
        logger.critical(f"Unhandled exception: {e}", exc_info=True) 