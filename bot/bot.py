import os
import sys
import logging
import traceback
from datetime import datetime
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
# TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
TELEGRAM_TOKEN = "7554540052:AAEvde_xL9d85kbJBdxPu8B6Mo4UEMF-qBs"  # –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
# USE_POLLING = os.getenv('USE_POLLING', 'False').lower() in ('true', '1', 't')
# DISABLE_BOT = os.getenv('DISABLE_BOT', 'False').lower() in ('true', '1', 't')
USE_POLLING = True  # –í—Ä–µ–º–µ–Ω–Ω–æ –≤–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –ø–æ–ª–ª–∏–Ω–≥–∞
DISABLE_BOT = False  # –í—Ä–µ–º–µ–Ω–Ω–æ –≤–∫–ª—é—á–∞–µ–º –±–æ—Ç–∞

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
if not TELEGRAM_TOKEN:
    logger.error("TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    sys.exit(1)

logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: USE_POLLING={USE_POLLING}, DISABLE_BOT={DISABLE_BOT}")
logger.info(f"–¢–æ–∫–µ–Ω: {TELEGRAM_TOKEN[:5]}...{TELEGRAM_TOKEN[-5:]}")

try:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    bot = Bot(token=TELEGRAM_TOKEN)
    dp = Dispatcher(bot)
    dp.middleware.setup(LoggingMiddleware())
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    main_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    main_keyboard.add(KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
    main_keyboard.add(KeyboardButton("üìù –û—Ç—á–µ—Ç—ã"), KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"))
    main_keyboard.add(KeyboardButton("‚ùì –ü–æ–º–æ—â—å"))
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    reports_keyboard = InlineKeyboardMarkup(row_width=2)
    reports_keyboard.add(
        InlineKeyboardButton("–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π", callback_data="report_daily"),
        InlineKeyboardButton("–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π", callback_data="report_weekly"),
        InlineKeyboardButton("–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π", callback_data="report_monthly"),
        InlineKeyboardButton("–ì–æ–¥–æ–≤–æ–π", callback_data="report_yearly")
    )
    
    @dp.message_handler(commands=['start'])
    async def cmd_start(message: types.Message):
        try:
            user_id = message.from_user.id
            username = message.from_user.username
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
            
            await message.answer(
                f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
                f"–Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±—É—Ä–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
                reply_markup=main_keyboard
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /start: {e}")
            logger.error(traceback.format_exc())
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    @dp.message_handler(commands=['help'])
    async def cmd_help(message: types.Message):
        try:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} (ID: {message.from_user.id}) –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å")
            
            help_text = (
                "üìö *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:*\n\n"
                "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
                "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
                "/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
                "/reports - –í—ã–±—Ä–∞—Ç—å —Ç–∏–ø –æ—Ç—á–µ—Ç–∞\n"
                "/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n"
                "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
            )
            
            await message.answer(help_text, parse_mode="Markdown")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /help: {e}")
            logger.error(traceback.format_exc())
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    @dp.message_handler(commands=['stats'])
    async def cmd_stats(message: types.Message):
        try:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} (ID: {message.from_user.id}) –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
            
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            current_date = datetime.now().strftime("%d.%m.%Y")
            
            stats_text = (
                f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ {current_date}*\n\n"
                f"üïë –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 12—á 30–º\n"
                f"üîÑ –¶–∏–∫–ª–æ–≤ –±—É—Ä–µ–Ω–∏—è: 24\n"
                f"üìè –ì–ª—É–±–∏–Ω–∞: 1250–º\n"
                f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: 2\n"
                f"‚ùå –û—à–∏–±–æ–∫: 0\n\n"
                f"_–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%H:%M:%S')}_"
            )
            
            await message.answer(stats_text, parse_mode="Markdown")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /stats: {e}")
            logger.error(traceback.format_exc())
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    @dp.message_handler(commands=['reports'])
    async def cmd_reports(message: types.Message):
        try:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} (ID: {message.from_user.id}) –∑–∞–ø—Ä–æ—Å–∏–ª –æ—Ç—á–µ—Ç—ã")
            
            await message.answer(
                "üìù –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:",
                reply_markup=reports_keyboard
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /reports: {e}")
            logger.error(traceback.format_exc())
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    @dp.callback_query_handler(lambda c: c.data.startswith('report_'))
    async def process_report_callback(callback_query: types.CallbackQuery):
        try:
            report_type = callback_query.data.split('_')[1]
            user_id = callback_query.from_user.id
            username = callback_query.from_user.username
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –∑–∞–ø—Ä–æ—Å–∏–ª –æ—Ç—á–µ—Ç —Ç–∏–ø–∞: {report_type}")
            
            report_titles = {
                'daily': '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π',
                'weekly': '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π',
                'monthly': '–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π',
                'yearly': '–ì–æ–¥–æ–≤–æ–π'
            }
            
            await bot.answer_callback_query(callback_query.id)
            await bot.send_message(
                callback_query.from_user.id,
                f"üìä *{report_titles[report_type]} –æ—Ç—á–µ—Ç*\n\n"
                f"–û—Ç—á–µ—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥: {datetime.now().strftime('%d.%m.%Y')}\n"
                f"–°—Ç–∞—Ç—É—Å: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è...\n\n"
                f"–û—Ç—á–µ—Ç –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç.",
                parse_mode="Markdown"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback_query: {e}")
            logger.error(traceback.format_exc())
            await bot.send_message(
                callback_query.from_user.id,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    @dp.message_handler(lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    async def text_stats(message: types.Message):
        try:
            await cmd_stats(message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞': {e}")
            logger.error(traceback.format_exc())
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    @dp.message_handler(lambda message: message.text == "üìù –û—Ç—á–µ—Ç—ã")
    async def text_reports(message: types.Message):
        try:
            await cmd_reports(message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã '–û—Ç—á–µ—Ç—ã': {e}")
            logger.error(traceback.format_exc())
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    @dp.message_handler(lambda message: message.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    async def text_settings(message: types.Message):
        try:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} (ID: {message.from_user.id}) –∑–∞–ø—Ä–æ—Å–∏–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            
            await message.answer(
                "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*\n\n"
                "üîî –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: –í–∫–ª—é—á–µ–Ω—ã\n"
                "üîï –û–±—ã—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í—ã–∫–ª—é—á–µ–Ω—ã\n"
                "‚è∞ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç: –í–∫–ª—é—á–µ–Ω (08:00)\n"
                "üìÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç: –í–∫–ª—é—á–µ–Ω (–ü–Ω, 09:00)\n\n"
                "_–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É._",
                parse_mode="Markdown"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã '–ù–∞—Å—Ç—Ä–æ–π–∫–∏': {e}")
            logger.error(traceback.format_exc())
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    @dp.message_handler(lambda message: message.text == "‚ùì –ü–æ–º–æ—â—å")
    async def text_help(message: types.Message):
        try:
            await cmd_help(message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã '–ü–æ–º–æ—â—å': {e}")
            logger.error(traceback.format_exc())
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    @dp.message_handler()
    async def echo(message: types.Message):
        try:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.username} (ID: {message.from_user.id}): {message.text}")
            
            await message.answer(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
                reply_markup=main_keyboard
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ echo: {e}")
            logger.error(traceback.format_exc())
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    def start_polling():
        try:
            logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling")
            executor.start_polling(dp, skip_updates=True)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            logger.error(traceback.format_exc())
            sys.exit(1)
    
    # –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
    if __name__ == '__main__':
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        if DISABLE_BOT:
            logger.warning("–ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
            sys.exit(0)
        
        if USE_POLLING:
            start_polling()
        else:
            logger.info("–†–µ–∂–∏–º polling –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, –±–æ—Ç –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω")
            sys.exit(0)

except Exception as e:
    logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
    logger.critical(traceback.format_exc())
    sys.exit(1) 