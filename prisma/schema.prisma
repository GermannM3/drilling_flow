// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  CLIENT
  CONTRACTOR
}

enum UserStatus {
  ACTIVE
  PENDING
  BLOCKED
}

enum OrderStatus {
  NEW
  ACCEPTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model User {
  id            Int            @id @default(autoincrement())
  telegramId    BigInt        @unique
  firstName     String
  lastName      String?
  username      String?
  email         String?       @unique
  phoneNumber   String?
  photoUrl      String?
  isActive      Boolean       @default(true)
  role          Role          @default(CLIENT)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  // Relationships
  location        Location?
  clientOrders    Order[]       @relation("ClientOrders")
  contractorOrders Order[]      @relation("ContractorOrders")
  documents       Document[]
  payments        Payment[]
  subscription    Subscription?
  settings        Settings?
  ratedBy         Rating[]      @relation("RatedBy")
  receivedRatings Rating[]      @relation("RatedUser")
}

model Location {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  user        User     @relation(fields: [userId], references: [id])
  latitude    Float
  longitude   Float
  workRadius  Float    @default(10)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Document {
  id        Int      @id @default(autoincrement())
  type      String
  url       String
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model Order {
  id            Int      @id @default(autoincrement())
  serviceType   String
  description   String
  address       String
  status        Status   @default(PENDING)
  price         Float?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relationships
  clientId      Int
  client        User     @relation("ClientOrders", fields: [clientId], references: [id])
  contractorId  Int?
  contractor    User?    @relation("ContractorOrders", fields: [contractorId], references: [id])
  rating        Rating?
}

model Rating {
  id            Int      @id @default(autoincrement())
  orderId       Int      @unique
  order         Order    @relation(fields: [orderId], references: [id])
  ratedById     Int
  ratedBy       User     @relation("RatedBy", fields: [ratedById], references: [id])
  ratedUserId   Int
  ratedUser     User     @relation("RatedUser", fields: [ratedUserId], references: [id])
  score         Int
  comment       String?
  createdAt     DateTime @default(now())
}

model Payment {
  id            Int      @id @default(autoincrement())
  amount        Float
  status        String
  paymentMethod String
  description   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relationships
  userId        Int
  user          User     @relation(fields: [userId], references: [id])
}

model Subscription {
  id            Int      @id @default(autoincrement())
  type          SubType
  startDate     DateTime @default(now())
  endDate       DateTime
  autoRenew     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relationships
  userId        Int      @unique
  user          User     @relation(fields: [userId], references: [id])
}

model Settings {
  id                  Int      @id @default(autoincrement())
  notificationsEnabled Boolean  @default(true)
  soundEnabled        Boolean  @default(true)
  language           String   @default("ru")
  orderRadius        Int      @default(50)
  theme              String   @default("LIGHT")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  // Relationships
  userId             Int      @unique
  user               User     @relation(fields: [userId], references: [id])
}

enum Role {
  CLIENT
  CONTRACTOR
  ADMIN
}

enum Status {
  PENDING
  ACCEPTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum SubType {
  BASIC
  PREMIUM
  PROFESSIONAL
} 