// –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ long polling
// –ì–µ–Ω–∏–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ URL

const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

// –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∏–º–∏—Ç–∞—Ü–∏—è)
const usersDB = {
  users: {},
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
  init() {
    // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    try {
      if (fs.existsSync('./users_data.json')) {
        const data = fs.readFileSync('./users_data.json', 'utf8');
        const loadedData = JSON.parse(data);
        this.users = loadedData;
        console.log('üìÇ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    }
  },
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  save() {
    try {
      fs.writeFileSync('./users_data.json', JSON.stringify(this.users, null, 2), 'utf8');
      console.log('üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    }
  },
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getUser(userId) {
    if (!this.users[userId]) {
      // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      const now = new Date();
      const registrationDate = `${now.getDate().toString().padStart(2, '0')}.${(now.getMonth() + 1).toString().padStart(2, '0')}.${now.getFullYear()}`;
      
      this.users[userId] = {
        id: userId,
        name: '–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        status: '–ê–∫—Ç–∏–≤–µ–Ω',
        role: '–ü–æ–¥—Ä—è–¥—á–∏–∫',
        rating: 5.0,
        completedOrders: 0,
        registrationDate: registrationDate,
        phone: '',
        email: '',
        address: '',
        notifications: {
          newOrders: true,
          messages: true,
          statusUpdates: true,
          financialOperations: true,
          emailNotifications: false
        },
        workZone: {
          radius: 50,
          center: '–ú–æ—Å–∫–≤–∞'
        },
        security: {
          twoFactorAuth: false,
          lastLogin: registrationDate
        },
        subscription: {
          status: '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞',
          plan: '–ë–∞–∑–æ–≤—ã–π',
          activationDate: '',
          expirationDate: '',
          features: []
        },
        stats: {
          inProgress: 0,
          completed: 0,
          cancelled: 0,
          positiveReviews: 0,
          negativeReviews: 0,
          averageCompletionTime: 0,
          timelyCompletionRate: 0,
          workQuality: '–ù–æ–≤–∏—á–æ–∫'
        },
        finance: {
          totalIncome: 0,
          averageCheck: 0,
          bonuses: 0,
          currentBalance: 0,
          pendingBalance: 0
        },
        orders: []
      };
      
      this.save();
    }
    
    return this.users[userId];
  },
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  updateUser(userId, userData) {
    this.users[userId] = { ...this.getUser(userId), ...userData };
    this.save();
    return this.users[userId];
  },
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  updateUserStatus(userId, status) {
    const user = this.getUser(userId);
    user.status = status;
    this.save();
    return user;
  },
  
  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  addOrder(userId, orderData) {
    const user = this.getUser(userId);
    if (!user.orders) user.orders = [];
    user.orders.push(orderData);
    this.save();
    return user;
  }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
usersDB.init();

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
const createCommandHandler = () => {
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
  function getMainMenuKeyboard() {
    return {
      keyboard: [
        [{ text: "üìã –ü—Ä–æ—Ñ–∏–ª—å" }, { text: "üì¶ –ó–∞–∫–∞–∑—ã" }],
        [{ text: "üîç –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤" }, { text: "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å" }],
        [{ text: "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" }, { text: "üí∞ –î–æ—Ö–æ–¥" }],
        [{ text: "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏" }, { text: "üîÑ –ü–æ–¥–ø–∏—Å–∫–∞" }],
        [{ text: "üí≥ –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂" }, { text: "‚ùì –ü–æ–º–æ—â—å" }]
      ],
      resize_keyboard: true
    };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  function getUserProfileText(userId) {
    const user = usersDB.getUser(userId);
    
    return `<b>üìã –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>

<b>ID:</b> ${user.id}
<b>–ò–º—è:</b> ${user.name}
<b>–°—Ç–∞—Ç—É—Å:</b> ${user.status}
<b>–†–æ–ª—å:</b> ${user.role}
<b>–†–µ–π—Ç–∏–Ω–≥:</b> ${'‚≠ê'.repeat(Math.round(user.rating))} (${user.rating.toFixed(1)})
<b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤:</b> ${user.completedOrders}
<b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> ${user.registrationDate}

<i>–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫</i>`;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–ø—Ä–∞–≤–∫–∏
  function getHelpText() {
    return `<b>‚ùì –ü–æ–º–æ—â—å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>

<b>DrillFlow Bot</b> - —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—É—Ä–æ–≤—ã–º–∏ —Ä–∞–±–æ—Ç–∞–º–∏.

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /start - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
‚Ä¢ üìã –ü—Ä–æ—Ñ–∏–ª—å - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å
‚Ä¢ üì¶ –ó–∞–∫–∞–∑—ã - –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏ —Ç–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã
‚Ä¢ üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å - –ò–∑–º–µ–Ω–∏—Ç—å –≤–∞—à —Å—Ç–∞—Ç—É—Å
‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ üí∞ –î–æ—Ö–æ–¥ - –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
‚Ä¢ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
‚Ä¢ üîÑ –ü–æ–¥–ø–∏—Å–∫–∞ - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π
‚Ä¢ üí≥ –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
‚Ä¢ ‚ùì –ü–æ–º–æ—â—å - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏: @DrillFlow_Support`;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–∫–∞–∑–æ–≤
  function getOrdersText(userId) {
    const user = usersDB.getUser(userId);
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    const activeOrders = user.orders ? user.orders.filter(order => order.status === 'active') : [];
    const completedOrders = user.orders ? user.orders.filter(order => order.status === 'completed') : [];
    
    let ordersText = `<b>üì¶ –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤</b>\n\n`;
    
    if (activeOrders.length > 0) {
      ordersText += `<b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:</b>\n`;
      activeOrders.forEach(order => {
        ordersText += `‚Ä¢ –ó–∞–∫–∞–∑ #${order.id} - ${order.title}, ${order.depth}–º\n`;
        ordersText += `  üìç ${order.location}\n`;
        ordersText += `  üí∞ ${order.price.toLocaleString('ru-RU')} ‚ÇΩ\n`;
        ordersText += `  üïí –î–æ: ${order.deadline}\n\n`;
      });
    } else {
      ordersText += `<b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:</b> –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤\n\n`;
    }
    
    if (completedOrders.length > 0) {
      ordersText += `<b>–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:</b>\n`;
      completedOrders.slice(0, 3).forEach(order => {
        ordersText += `‚Ä¢ –ó–∞–∫–∞–∑ #${order.id} - ${order.title}, ${order.depth}–º\n`;
        ordersText += `  ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω ${order.completionDate}\n`;
        const stars = '‚≠ê'.repeat(Math.round(order.rating));
        ordersText += `  ${stars} –û—Ü–µ–Ω–∫–∞: ${order.rating.toFixed(1)}\n\n`;
      });
    } else {
      ordersText += `<b>–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:</b> –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤\n\n`;
    }
    
    // –ï—Å–ª–∏ –∑–∞–∫–∞–∑–æ–≤ –≤–æ–æ–±—â–µ –Ω–µ—Ç
    if (user.orders.length === 0) {
      ordersText += `–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤", —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.\n`;
    }
    
    ordersText += `<i>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞</i>`;
    
    return ordersText;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  function getStatisticsText(userId) {
    const user = usersDB.getUser(userId);
    const stats = user.stats;
    
    // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
    const totalOrders = stats.inProgress + stats.completed + stats.cancelled;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
    const totalReviews = stats.positiveReviews + stats.negativeReviews;
    const positivePercentage = totalReviews > 0 
      ? Math.round((stats.positiveReviews / totalReviews) * 100) 
      : 0;
    const negativePercentage = totalReviews > 0 
      ? Math.round((stats.negativeReviews / totalReviews) * 100) 
      : 0;
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    const now = new Date();
    const updateTime = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;
    
    return `<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>

<b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${totalOrders}
‚Ä¢ –í —Ä–∞–±–æ—Ç–µ: ${stats.inProgress}
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${stats.completed}
‚Ä¢ –û—Ç–º–µ–Ω–µ–Ω–æ: ${stats.cancelled}

<b>–†–µ–π—Ç–∏–Ω–≥:</b> ${'‚≠ê'.repeat(Math.round(user.rating))} (${user.rating.toFixed(1)})
<b>–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤:</b> ${stats.positiveReviews} (${positivePercentage}%)
<b>–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤:</b> ${stats.negativeReviews} (${negativePercentage}%)

<b>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${stats.averageCompletionTime} –¥–Ω—è
‚Ä¢ –°–æ–±–ª—é–¥–µ–Ω–∏–µ —Å—Ä–æ–∫–æ–≤: ${stats.timelyCompletionRate}%
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—ã: ${stats.workQuality}

<b>–§–∏–Ω–∞–Ω—Å—ã:</b>
‚Ä¢ –û–±—â–∏–π –¥–æ—Ö–æ–¥: ${user.finance.totalIncome.toLocaleString('ru-RU')} ‚ÇΩ
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: ${user.finance.averageCheck.toLocaleString('ru-RU')} ‚ÇΩ
‚Ä¢ –ë–æ–Ω—É—Å—ã: ${user.finance.bonuses.toLocaleString('ru-RU')} ‚ÇΩ

<i>–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: —Å–µ–≥–æ–¥–Ω—è –≤ ${updateTime}</i>`;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ
  function getSubscriptionText(userId) {
    const user = usersDB.getUser(userId);
    const subscription = user.subscription;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞
    let isActive = subscription.status === '–ê–∫—Ç–∏–≤–Ω–∞';
    let expiration = subscription.expirationDate || '';
    let daysLeft = '';
    
    // –†–∞—Å—á–µ—Ç –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–Ω–µ–π, –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
    if (isActive && subscription.expirationDate) {
      const now = new Date();
      const expDate = new Date(subscription.expirationDate.split('.').reverse().join('-'));
      const diffTime = Math.abs(expDate - now);
      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
      daysLeft = ` (–æ—Å—Ç–∞–ª–æ—Å—å ${diffDays} –¥–Ω–µ–π)`;
    }
    
    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    let subsText = `<b>üîÑ –ü–æ–¥–ø–∏—Å–∫–∞</b>\n\n`;
    
    if (isActive) {
      subsText += `<b>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:</b> ${subscription.status} ‚úÖ\n`;
      subsText += `<b>–¢–∞—Ä–∏—Ñ:</b> ${subscription.plan}\n`;
      subsText += `<b>–î–∞—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:</b> ${subscription.activationDate}\n`;
      subsText += `<b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> ${expiration}${daysLeft}\n\n`;
      
      subsText += `<b>–í–∫–ª—é—á–µ–Ω–æ –≤ —Ç–∞—Ä–∏—Ñ:</b>\n`;
      subscription.features.forEach(feature => {
        subsText += `‚Ä¢ ${feature}\n`;
      });
      
      subsText += `\n<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–ª–µ–Ω–∏—è:</b> 2,990 ‚ÇΩ/–º–µ—Å—è—Ü\n\n`;
      subsText += `<i>–î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–ª–∏—Ç—å"</i>`;
    } else {
      subsText += `<b>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:</b> ${subscription.status} ‚ùå\n\n`;
      subsText += `<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:</b>\n`;
      subsText += `‚Ä¢ –ë–∞–∑–æ–≤—ã–π - 990 ‚ÇΩ/–º–µ—Å—è—Ü\n`;
      subsText += `‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π - 1,990 ‚ÇΩ/–º–µ—Å—è—Ü\n`;
      subsText += `‚Ä¢ –ü—Ä–µ–º–∏—É–º - 2,990 ‚ÇΩ/–º–µ—Å—è—Ü\n\n`;
      subsText += `<i>–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ</i>`;
    }
    
    return subsText;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
  function getSubscriptionKeyboard(userId) {
    const user = usersDB.getUser(userId);
    
    if (user.subscription.status === '–ê–∫—Ç–∏–≤–Ω–∞') {
      return {
        inline_keyboard: [
          [{ text: "üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data: "subscription_extend" }],
          [{ text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data: "subscription_cancel" }],
          [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "back_to_main" }]
        ]
      };
    } else {
      return {
        inline_keyboard: [
          [{ text: "üí∞ –ë–∞–∑–æ–≤—ã–π (990 ‚ÇΩ)", callback_data: "subscription_basic" }],
          [{ text: "üí∞ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π (1,990 ‚ÇΩ)", callback_data: "subscription_standard" }],
          [{ text: "üí∞ –ü—Ä–µ–º–∏—É–º (2,990 ‚ÇΩ)", callback_data: "subscription_premium" }],
          [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "back_to_main" }]
        ]
      };
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ—Å—Ç–æ–≤–æ–º –ø–ª–∞—Ç–µ–∂–µ
  function getTestPaymentText() {
    return `<b>üí≥ –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂</b>

–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –ø–ª–∞—Ç–µ–∂–µ–π –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞.

<b>–°—É–º–º–∞:</b> 100 ‚ÇΩ
<b>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:</b> –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ–ø–ª–∞—Ç—ã
<b>–ú–µ—Ç–æ–¥:</b> –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞

<i>–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂, —Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏ –Ω–µ –±—É–¥—É—Ç —Å–ø–∏—Å–∞–Ω—ã</i>`;
  }

  // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
  function getTestPaymentKeyboard() {
    return {
      inline_keyboard: [
        [{ text: "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 100 ‚ÇΩ", callback_data: "pay_test_100" }],
        [{ text: "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 500 ‚ÇΩ", callback_data: "pay_test_500" }],
        [{ text: "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 1000 ‚ÇΩ", callback_data: "pay_test_1000" }],
        [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "back_to_main" }]
      ]
    };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Ö–æ–¥–µ
  function getIncomeText(userId) {
    const user = usersDB.getUser(userId);
    const finance = user.finance;
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥–æ—Ö–æ–¥–∞—Ö –ø–æ –º–µ—Å—è—Ü–∞–º
    const now = new Date();
    const currentMonth = now.getMonth();
    const currentYear = now.getFullYear();
    
    // –°–æ–∑–¥–∞–µ–º –º–µ—Å—è—á–Ω—ã–µ –¥–æ—Ö–æ–¥—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if (!finance.monthlyIncome) {
      finance.monthlyIncome = {};
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –º–µ—Å—è—Ü–µ–≤
    const months = [
      '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
      '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'
    ];
    
    // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 –º–µ—Å—è—Ü–∞
    let monthlyStats = '';
    let ordersCount = 0;
    
    for (let i = 0; i < 4; i++) {
      let monthIndex = currentMonth - i;
      let year = currentYear;
      
      if (monthIndex < 0) {
        monthIndex += 12;
        year -= 1;
      }
      
      const monthName = months[monthIndex];
      const monthKey = `${year}-${(monthIndex + 1).toString().padStart(2, '0')}`;
      const monthIncome = finance.monthlyIncome[monthKey] || 0;
      const monthOrders = finance.monthlyOrders ? (finance.monthlyOrders[monthKey] || 0) : 0;
      ordersCount += monthOrders;
      
      monthlyStats += `‚Ä¢ ${monthName} ${year}: ${monthIncome.toLocaleString('ru-RU')} ‚ÇΩ (${monthOrders} –∑–∞–∫–∞–∑${getOrdersEnding(monthOrders)})\n`;
    }
    
    return `<b>üí∞ –î–æ—Ö–æ–¥</b>

<b>–û–±—â–∏–π –¥–æ—Ö–æ–¥:</b> ${finance.totalIncome.toLocaleString('ru-RU')} ‚ÇΩ

<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º:</b>
${monthlyStats}
<b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> ${finance.currentBalance.toLocaleString('ru-RU')} ‚ÇΩ
<b>–î–æ—Å—Ç—É–ø–Ω–æ –∫ –≤—ã–≤–æ–¥—É:</b> ${finance.currentBalance.toLocaleString('ru-RU')} ‚ÇΩ
<b>–í –æ–±—Ä–∞–±–æ—Ç–∫–µ:</b> ${finance.pendingBalance.toLocaleString('ru-RU')} ‚ÇΩ

<b>–°–ø–æ—Å–æ–±—ã –≤—ã–≤–æ–¥–∞:</b>
‚Ä¢ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞
‚Ä¢ –°–ë–ü
‚Ä¢ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏

<i>–î–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–í—ã–≤–µ—Å—Ç–∏"</i>`;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –¥–æ—Ö–æ–¥–∞
  function getIncomeKeyboard() {
    return {
      inline_keyboard: [
        [{ text: "üí∏ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞", callback_data: "withdraw_funds" }],
        [{ text: "üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data: "income_stats" }],
        [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "back_to_main" }]
      ]
    };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
  function getOrderSearchText() {
    return `<b>üîç –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤</b>

–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤:

‚Ä¢ –ü–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é
‚Ä¢ –ü–æ —Ç–∏–ø—É —Ä–∞–±–æ—Ç
‚Ä¢ –ü–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
‚Ä¢ –ü–æ —Å—Ä–æ–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞</i>`;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
  function getOrderSearchKeyboard() {
    return {
      inline_keyboard: [
        [
          { text: "üìç –ü–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é", callback_data: "search_location" },
          { text: "üîß –ü–æ —Ç–∏–ø—É —Ä–∞–±–æ—Ç", callback_data: "search_type" }
        ],
        [
          { text: "üí∞ –ü–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏", callback_data: "search_price" },
          { text: "üïí –ü–æ —Å—Ä–æ–∫—É", callback_data: "search_deadline" }
        ],
        [
          { text: "üîÑ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã", callback_data: "search_all" }
        ],
        [
          { text: "üîô –ù–∞–∑–∞–¥", callback_data: "back_to_main" }
        ]
      ]
    };
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ–∫–æ–Ω—á–∞–Ω–∏–π —Å–ª–æ–≤–∞ "–∑–∞–∫–∞–∑"
  function getOrdersEnding(count) {
    if (count % 10 === 1 && count % 100 !== 11) {
      return '';
    } else if ([2, 3, 4].includes(count % 10) && ![12, 13, 14].includes(count % 100)) {
      return '–∞';
    } else {
      return '–æ–≤';
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  function getSettingsText(userId) {
    const user = usersDB.getUser(userId);
    
    return `<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>

<b>–ü—Ä–æ—Ñ–∏–ª—å:</b>
‚Ä¢ –ò–º—è: ${user.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚Ä¢ Email: ${user.email || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚Ä¢ –ê–¥—Ä–µ—Å: ${user.address || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

<b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>
‚Ä¢ –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã: ${user.notifications.newOrders ? '‚úÖ' : '‚ùå'}
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è: ${user.notifications.messages ? '‚úÖ' : '‚ùå'}
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: ${user.notifications.statusUpdates ? '‚úÖ' : '‚ùå'}
‚Ä¢ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: ${user.notifications.financialOperations ? '‚úÖ' : '‚ùå'}
‚Ä¢ Email-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${user.notifications.emailNotifications ? '‚úÖ' : '‚ùå'}

<b>–†–∞–±–æ—á–∞—è –∑–æ–Ω–∞:</b>
‚Ä¢ –†–∞–¥–∏—É—Å: ${user.workZone.radius} –∫–º
‚Ä¢ –¶–µ–Ω—Ç—Ä: ${user.workZone.center}

<b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: ${user.security.twoFactorAuth ? '‚úÖ' : '‚ùå'}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: ${user.security.lastLogin}

<i>–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª</i>`;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
  function getSettingsKeyboard() {
    return {
      inline_keyboard: [
        [{ text: "üë§ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data: "settings_profile" }],
        [{ text: "üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data: "settings_notifications" }],
        [{ text: "üìç –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–±–æ—á–µ–π –∑–æ–Ω—ã", callback_data: "settings_workzone" }],
        [{ text: "üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", callback_data: "settings_security" }],
        [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "back_to_main" }]
      ]
    };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
  function getProfileEditKeyboard() {
    return {
      inline_keyboard: [
        [{ text: "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data: "edit_name" }],
        [{ text: "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", callback_data: "edit_phone" }],
        [{ text: "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å email", callback_data: "edit_email" }],
        [{ text: "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å", callback_data: "edit_address" }],
        [{ text: "üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data: "back_to_settings" }]
      ]
    };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  function getNotificationsKeyboard(userId) {
    const user = usersDB.getUser(userId);
    const notifications = user.notifications;
    
    return {
      inline_keyboard: [
        [{ 
          text: `–ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã: ${notifications.newOrders ? '‚úÖ' : '‚ùå'}`, 
          callback_data: "toggle_notification_newOrders" 
        }],
        [{ 
          text: `–°–æ–æ–±—â–µ–Ω–∏—è: ${notifications.messages ? '‚úÖ' : '‚ùå'}`, 
          callback_data: "toggle_notification_messages" 
        }],
        [{ 
          text: `–û–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: ${notifications.statusUpdates ? '‚úÖ' : '‚ùå'}`, 
          callback_data: "toggle_notification_statusUpdates" 
        }],
        [{ 
          text: `–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: ${notifications.financialOperations ? '‚úÖ' : '‚ùå'}`, 
          callback_data: "toggle_notification_financialOperations" 
        }],
        [{ 
          text: `Email-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${notifications.emailNotifications ? '‚úÖ' : '‚ùå'}`, 
          callback_data: "toggle_notification_emailNotifications" 
        }],
        [{ text: "üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data: "back_to_settings" }]
      ]
    };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–∞–±–æ—á–µ–π –∑–æ–Ω—ã
  function getWorkZoneKeyboard() {
    return {
      inline_keyboard: [
        [{ text: "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–¥–∏—É—Å", callback_data: "edit_radius" }],
        [{ text: "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—Ç—Ä", callback_data: "edit_center" }],
        [{ text: "üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data: "back_to_settings" }]
      ]
    };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  function getSecurityKeyboard(userId) {
    const user = usersDB.getUser(userId);
    
    return {
      inline_keyboard: [
        [{ 
          text: `–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: ${user.security.twoFactorAuth ? '‚úÖ' : '‚ùå'}`, 
          callback_data: "toggle_2fa" 
        }],
        [{ text: "üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data: "back_to_settings" }]
      ]
    };
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
  function getStatusUpdateText(userId) {
    const user = usersDB.getUser(userId);
    
    return `<b>üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞</b>

–í–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: <b>${user.status}</b>

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã:</b>
‚úÖ <b>–°–≤–æ–±–æ–¥–µ–Ω</b> - –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã
‚è≥ <b>–ó–∞–Ω—è—Ç</b> - –≤—ã–ø–æ–ª–Ω—è—é –∑–∞–∫–∞–∑
üîÑ <b>–ü–µ—Ä–µ—Ä—ã–≤</b> - –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
‚ùå <b>–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b> - –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é –∑–∞–∫–∞–∑—ã

<i>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≤–∞—à–µ–π —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏</i>`;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞
  function getStatusKeyboard() {
    return {
      inline_keyboard: [
        [
          { text: "‚úÖ –°–≤–æ–±–æ–¥–µ–Ω", callback_data: "status_free" },
          { text: "‚è≥ –ó–∞–Ω—è—Ç", callback_data: "status_busy" }
        ],
        [
          { text: "üîÑ –ü–µ—Ä–µ—Ä—ã–≤", callback_data: "status_break" },
          { text: "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω", callback_data: "status_unavailable" }
        ],
        [
          { text: "üîô –ù–∞–∑–∞–¥", callback_data: "back_to_main" }
        ]
      ]
    };
  }

  return {
    getMainMenuKeyboard,
    getUserProfileText,
    getHelpText,
    getOrdersText,
    getStatisticsText,
    getSubscriptionText,
    getSubscriptionKeyboard,
    getTestPaymentText,
    getTestPaymentKeyboard,
    getIncomeText,
    getIncomeKeyboard,
    getOrderSearchText,
    getOrderSearchKeyboard,
    getSettingsText,
    getSettingsKeyboard,
    getProfileEditKeyboard,
    getNotificationsKeyboard,
    getWorkZoneKeyboard,
    getSecurityKeyboard,
    getStatusUpdateText,
    getStatusKeyboard
  };
};

// –¢–æ–∫–µ–Ω –∏–∑ .env —Ñ–∞–π–ª–∞ –∏–ª–∏ –∂–µ—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω—ã–π
const TOKEN = process.env.TELEGRAM_TOKEN || "7293247588:AAH5qQkNUmhoTzZ-_MSw0gS4BKlSTAW5qdM";

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
if (!TOKEN || TOKEN.length < 20) {
  console.error('‚ùå –û–®–ò–ë–ö–ê: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ .env —Ñ–∞–π–ª–µ –∏–ª–∏ –≤ –∫–æ–¥–µ.');
  process.exit(1);
}

console.log('üîë –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º:', TOKEN);

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new TelegramBot(TOKEN, { 
  polling: true,
  // –û–ø—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  poll_options: {
    timeout: 60,
    limit: 100
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
bot.getMe()
  .then(botInfo => {
    console.log('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ API Telegram');
    console.log(`üì± –ò–º—è –±–æ—Ç–∞: ${botInfo.first_name}`);
    console.log(`üë§ Username: @${botInfo.username}`);
    console.log(`üÜî ID: ${botInfo.id}`);
  })
  .catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ API Telegram:', error.message);
    console.error('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø –∫ api.telegram.org');
    process.exit(1);
  });

// –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
const handlers = createCommandHandler();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const welcomeMessage = `<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DrillFlow Bot!</b>

–≠—Ç–æ —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—É—Ä–æ–≤—ã–º–∏ —Ä–∞–±–æ—Ç–∞–º–∏.

–ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å–µ–≥–æ–¥–Ω—è?`;

  bot.sendMessage(chatId, welcomeMessage, {
    parse_mode: 'HTML',
    reply_markup: handlers.getMainMenuKeyboard()
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "üìã –ü—Ä–æ—Ñ–∏–ª—å"
bot.onText(/üìã –ü—Ä–æ—Ñ–∏–ª—å/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  bot.sendMessage(chatId, handlers.getUserProfileText(userId), {
    parse_mode: 'HTML',
    reply_markup: handlers.getMainMenuKeyboard()
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "üì¶ –ó–∞–∫–∞–∑—ã"
bot.onText(/üì¶ –ó–∞–∫–∞–∑—ã/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  bot.sendMessage(chatId, handlers.getOrdersText(userId), {
    parse_mode: 'HTML',
    reply_markup: handlers.getMainMenuKeyboard()
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å"
bot.onText(/üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  bot.sendMessage(chatId, handlers.getStatusUpdateText(userId), {
    parse_mode: 'HTML',
    reply_markup: handlers.getStatusKeyboard()
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
bot.onText(/üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  bot.sendMessage(chatId, handlers.getStatisticsText(userId), {
    parse_mode: 'HTML',
    reply_markup: handlers.getMainMenuKeyboard()
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "üí∞ –î–æ—Ö–æ–¥"
bot.onText(/üí∞ –î–æ—Ö–æ–¥/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  bot.sendMessage(chatId, handlers.getIncomeText(userId), {
    parse_mode: 'HTML',
    reply_markup: handlers.getIncomeKeyboard()
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"
bot.onText(/‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  bot.sendMessage(chatId, handlers.getSettingsText(userId), {
    parse_mode: 'HTML',
    reply_markup: handlers.getSettingsKeyboard()
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "üîÑ –ü–æ–¥–ø–∏—Å–∫–∞"
bot.onText(/üîÑ –ü–æ–¥–ø–∏—Å–∫–∞/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  bot.sendMessage(chatId, handlers.getSubscriptionText(userId), {
    parse_mode: 'HTML',
    reply_markup: handlers.getSubscriptionKeyboard(userId)
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "üí≥ –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂"
bot.onText(/üí≥ –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂/, (msg) => {
  const chatId = msg.chat.id;
  
  bot.sendMessage(chatId, handlers.getTestPaymentText(), {
    parse_mode: 'HTML',
    reply_markup: handlers.getTestPaymentKeyboard()
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "‚ùì –ü–æ–º–æ—â—å"
bot.onText(/‚ùì –ü–æ–º–æ—â—å/, (msg) => {
  const chatId = msg.chat.id;
  
  bot.sendMessage(chatId, handlers.getHelpText(), {
    parse_mode: 'HTML',
    reply_markup: handlers.getMainMenuKeyboard()
  });
});

// –î–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = {};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ (–∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏)
bot.on('callback_query', (callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const userId = callbackQuery.from.id;
  const data = callbackQuery.data;
  const messageId = callbackQuery.message.message_id;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
  console.log('üì¢ –ü–æ–ª—É—á–µ–Ω callback_query:');
  console.log('- chatId:', chatId);
  console.log('- userId:', userId);
  console.log('- data:', data);
  console.log('- messageId:', messageId);
  
  // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å –∫–Ω–æ–ø–∫–∏
  bot.answerCallbackQuery(callbackQuery.id)
    .then(() => console.log('‚úÖ answerCallbackQuery —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω'))
    .catch(error => console.error('‚ùå –û—à–∏–±–∫–∞ –≤ answerCallbackQuery:', error));
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (data.startsWith('status_')) {
    let newStatus = '';
    
    switch (data) {
      case 'status_free':
        newStatus = '–°–≤–æ–±–æ–¥–µ–Ω';
        break;
      case 'status_busy':
        newStatus = '–ó–∞–Ω—è—Ç';
        break;
      case 'status_break':
        newStatus = '–ü–µ—Ä–µ—Ä—ã–≤';
        break;
      case 'status_unavailable':
        newStatus = '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
        break;
    }
    
    if (newStatus) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      usersDB.updateUserStatus(userId, newStatus);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
      bot.sendMessage(
        chatId,
        `<b>‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω</b>\n\n–í–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: <b>${newStatus}</b>`,
        { 
          parse_mode: 'HTML',
          reply_markup: handlers.getMainMenuKeyboard() 
        }
      );
    }
  }
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫
  else if (data.startsWith('subscription_')) {
    const user = usersDB.getUser(userId);
    
    if (data === 'subscription_extend') {
      // –ü—Ä–æ–¥–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
      const now = new Date();
      const expDate = new Date(now);
      expDate.setMonth(expDate.getMonth() + 1); // –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –Ω–∞ 1 –º–µ—Å—è—Ü
      
      const formattedActivationDate = now.toLocaleDateString('ru-RU');
      const formattedExpirationDate = expDate.toLocaleDateString('ru-RU');
      
      user.subscription.activationDate = formattedActivationDate;
      user.subscription.expirationDate = formattedExpirationDate;
      
      usersDB.updateUser(userId, user);
      
      bot.sendMessage(
        chatId,
        `<b>‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞!</b>\n\n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ "${user.subscription.plan}" –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ ${formattedExpirationDate}`,
        { 
          parse_mode: 'HTML',
          reply_markup: handlers.getMainMenuKeyboard() 
        }
      );
    } 
    else if (data === 'subscription_cancel') {
      // –û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏
      user.subscription.status = '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞';
      usersDB.updateUser(userId, user);
      
      bot.sendMessage(
        chatId,
        `<b>‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –¥–æ –∫–æ–Ω—Ü–∞ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞, –∞ –∑–∞—Ç–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–∏—Ç—Å—è.`,
        { 
          parse_mode: 'HTML',
          reply_markup: handlers.getMainMenuKeyboard() 
        }
      );
    }
    else if (['subscription_basic', 'subscription_standard', 'subscription_premium'].includes(data)) {
      // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
      const now = new Date();
      const expDate = new Date(now);
      expDate.setMonth(expDate.getMonth() + 1); // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü
      
      const formattedActivationDate = now.toLocaleDateString('ru-RU');
      const formattedExpirationDate = expDate.toLocaleDateString('ru-RU');
      
      let planName = '';
      let planFeatures = [];
      
      if (data === 'subscription_basic') {
        planName = '–ë–∞–∑–æ–≤—ã–π';
        planFeatures = [
          '–ë–∞–∑–æ–≤—ã–π –¥–æ—Å—Ç—É–ø –∫ –∑–∞–∫–∞–∑–∞–º',
          '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
          '–õ–∏–º–∏—Ç 5 –∑–∞–∫–∞–∑–æ–≤ –≤ –¥–µ–Ω—å'
        ];
      } 
      else if (data === 'subscription_standard') {
        planName = '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π';
        planFeatures = [
          '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤',
          '–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
          '–õ–∏–º–∏—Ç 10 –∑–∞–∫–∞–∑–æ–≤ –≤ –¥–µ–Ω—å',
          '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞'
        ];
      } 
      else if (data === 'subscription_premium') {
        planName = '–ü—Ä–µ–º–∏—É–º';
        planFeatures = [
          '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤',
          '–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
          '–ü–æ–≤—ã—à–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç –∑–∞–∫–∞–∑–æ–≤ (–¥–æ 15 –≤ –¥–µ–Ω—å)',
          '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä',
          '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏'
        ];
      }
      
      user.subscription = {
        status: '–ê–∫—Ç–∏–≤–Ω–∞',
        plan: planName,
        activationDate: formattedActivationDate,
        expirationDate: formattedExpirationDate,
        features: planFeatures
      };
      
      usersDB.updateUser(userId, user);
      
      bot.sendMessage(
        chatId,
        `<b>‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ "${planName}" –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ ${formattedExpirationDate}`,
        { 
          parse_mode: 'HTML',
          reply_markup: handlers.getMainMenuKeyboard() 
        }
      );
    }
  }
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  else if (data === 'settings_profile') {
    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    bot.editMessageText(
      '<b>üë§ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:',
      {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: handlers.getProfileEditKeyboard()
      }
    );
  }
  else if (data === 'settings_notifications') {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    bot.editMessageText(
      '<b>üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n–í–∫–ª—é—á–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç–µ –Ω—É–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:',
      {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: handlers.getNotificationsKeyboard(userId)
      }
    );
  }
  else if (data === 'settings_workzone') {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–±–æ—á–µ–π –∑–æ–Ω—ã
    const user = usersDB.getUser(userId);
    
    bot.editMessageText(
      `<b>üìç –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–±–æ—á–µ–π –∑–æ–Ω—ã</b>

<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ –†–∞–¥–∏—É—Å: ${user.workZone.radius} –∫–º
‚Ä¢ –¶–µ–Ω—Ç—Ä: ${user.workZone.center}

–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:`,
      {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: handlers.getWorkZoneKeyboard()
      }
    );
  }
  else if (data === 'settings_security') {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    bot.editMessageText(
      '<b>üîí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</b>\n\n–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:',
      {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: handlers.getSecurityKeyboard(userId)
      }
    );
  }
  else if (data === 'back_to_settings') {
    // –í–æ–∑–≤—Ä–∞—Ç –∫ –æ–±—â–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
    const userId = callbackQuery.from.id;
    
    bot.editMessageText(
      handlers.getSettingsText(userId),
      {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: handlers.getSettingsKeyboard()
      }
    );
  }
  else if (data.startsWith('edit_')) {
    // –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è
    const fieldToEdit = data.replace('edit_', '');
    let promptText = '';
    
    switch (fieldToEdit) {
      case 'name':
        promptText = '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –Ω–æ–≤–æ–µ –∏–º—è:';
        break;
      case 'phone':
        promptText = '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:';
        break;
      case 'email':
        promptText = '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π email:';
        break;
      case 'address':
        promptText = '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å:';
        break;
      case 'radius':
        promptText = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞–¥–∏—É—Å —Ä–∞–±–æ—á–µ–π –∑–æ–Ω—ã (–≤ –∫–º):';
        break;
      case 'center':
        promptText = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä —Ä–∞–±–æ—á–µ–π –∑–æ–Ω—ã (–≥–æ—Ä–æ–¥ –∏–ª–∏ –∞–¥—Ä–µ—Å):';
        break;
    }
    
    if (promptText) {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      userStates[userId] = { 
        action: 'edit',
        field: fieldToEdit,
        messageId: messageId
      };
      
      bot.sendMessage(chatId, promptText, {
        reply_markup: {
          force_reply: true
        }
      });
    }
  }
  else if (data.startsWith('toggle_notification_')) {
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const notificationType = data.replace('toggle_notification_', '');
    const user = usersDB.getUser(userId);
    
    // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
    user.notifications[notificationType] = !user.notifications[notificationType];
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    usersDB.updateUser(userId, user);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    bot.editMessageReplyMarkup(
      handlers.getNotificationsKeyboard(userId).inline_keyboard,
      {
        chat_id: chatId,
        message_id: messageId
      }
    );
  }
  else if (data === 'toggle_2fa') {
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const user = usersDB.getUser(userId);
    
    // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
    user.security.twoFactorAuth = !user.security.twoFactorAuth;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    usersDB.updateUser(userId, user);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const status = user.security.twoFactorAuth ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–æ—Ç–∫–ª—é—á–µ–Ω–∞';
    
    bot.sendMessage(
      chatId,
      `<b>‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã</b>\n\n–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è ${status}.`,
      { 
        parse_mode: 'HTML'
      }
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    bot.editMessageReplyMarkup(
      handlers.getSecurityKeyboard(userId).inline_keyboard,
      {
        chat_id: chatId,
        message_id: messageId
      }
    );
  }
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
  else if (data.startsWith('pay_test_')) {
    const paymentAmount = data.replace('pay_test_', '');
    
    bot.sendMessage(
      chatId, 
      `<b>‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É ${paymentAmount} ‚ÇΩ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω</b>

–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ–ø–ª–∞—Ç—ã!

–ù–æ–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: TX-${Date.now().toString().slice(-8)}`,
      { 
        parse_mode: 'HTML',
        reply_markup: handlers.getMainMenuKeyboard()
      }
    );
  }
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ—Ö–æ–¥–æ–≤ –∏ –≤—ã–ø–ª–∞—Ç
  else if (data === 'withdraw_funds') {
    // –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
    const user = usersDB.getUser(userId);
    
    if (user.finance.currentBalance <= 0) {
      // –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å –ø—É—Å—Ç
      bot.sendMessage(
        chatId,
        `<b>‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</b>\n\n–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞.`,
        { 
          parse_mode: 'HTML',
          reply_markup: handlers.getMainMenuKeyboard() 
        }
      );
    } else {
      // –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
      bot.sendMessage(
        chatId,
        `<b>üí∏ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞ ${user.finance.currentBalance.toLocaleString('ru-RU')} ‚ÇΩ:`,
        { 
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [
              [{ text: "üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞", callback_data: "withdraw_card" }],
              [{ text: "üè¶ –°–ë–ü", callback_data: "withdraw_sbp" }],
              [{ text: "üíº –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∫–æ—à–µ–ª–µ–∫", callback_data: "withdraw_wallet" }],
              [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "back_to_income" }]
            ]
          }
        }
      );
    }
  }
  else if (['withdraw_card', 'withdraw_sbp', 'withdraw_wallet'].includes(data)) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –≤—ã–≤–æ–¥–∞
    const user = usersDB.getUser(userId);
    const amount = user.finance.currentBalance;
    
    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤—ã–≤–æ–¥–∞
    const withdrawalId = 'W-' + Date.now().toString().slice(-8);
    
    // –û–±–Ω—É–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º "–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ"
    user.finance.pendingBalance += amount;
    user.finance.currentBalance = 0;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    usersDB.updateUser(userId, user);
    
    let method = '';
    if (data === 'withdraw_card') method = '–±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É';
    else if (data === 'withdraw_sbp') method = '–°–ë–ü';
    else if (data === 'withdraw_wallet') method = '—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∫–æ—à–µ–ª–µ–∫';
    
    bot.sendMessage(
      chatId,
      `<b>‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–∏–Ω—è—Ç</b>

<b>–°—É–º–º–∞:</b> ${amount.toLocaleString('ru-RU')} ‚ÇΩ
<b>–ú–µ—Ç–æ–¥:</b> ${method}
<b>ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b> ${withdrawalId}

–°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ –≤–∞—à —Å—á–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤. –°—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –º–æ–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ "–î–æ—Ö–æ–¥".`,
      { 
        parse_mode: 'HTML',
        reply_markup: handlers.getMainMenuKeyboard() 
      }
    );
  }
  else if (data === 'income_stats') {
    // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Ö–æ–¥–æ–≤
    const user = usersDB.getUser(userId);
    const completedOrders = user.orders ? user.orders.filter(o => o.status === 'completed') : [];
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ –∑–∞ –∑–∞–∫–∞–∑
    const avgOrderIncome = completedOrders.length > 0 
      ? user.finance.totalIncome / completedOrders.length 
      : 0;
    
    // –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥ –∑–∞ –∑–∞–∫–∞–∑
    let maxOrderIncome = 0;
    let maxOrderId = '';
    
    completedOrders.forEach(order => {
      if (order.price > maxOrderIncome) {
        maxOrderIncome = order.price;
        maxOrderId = order.id;
      }
    });
    
    bot.sendMessage(
      chatId,
      `<b>üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Ö–æ–¥–æ–≤</b>

<b>–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:</b> ${user.finance.totalIncome.toLocaleString('ru-RU')} ‚ÇΩ
<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤:</b> ${completedOrders.length}
<b>–°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ –∑–∞ –∑–∞–∫–∞–∑:</b> ${avgOrderIncome.toLocaleString('ru-RU')} ‚ÇΩ

<b>–°–∞–º—ã–π –≤—ã–≥–æ–¥–Ω—ã–π –∑–∞–∫–∞–∑:</b> #${maxOrderId} - ${maxOrderIncome.toLocaleString('ru-RU')} ‚ÇΩ

<b>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:</b> ${(avgOrderIncome * 4).toLocaleString('ru-RU')} ‚ÇΩ

<i>–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤</i>`,
      { 
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [{ text: "üîô –ù–∞–∑–∞–¥ –∫ –¥–æ—Ö–æ–¥–∞–º", callback_data: "back_to_income" }]
          ]
        }
      }
    );
  }
  else if (data === 'back_to_income') {
    // –í–æ–∑–≤—Ä–∞—Ç –∫ —ç–∫—Ä–∞–Ω—É –¥–æ—Ö–æ–¥–æ–≤
    bot.editMessageText(
      handlers.getIncomeText(userId),
      {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: handlers.getIncomeKeyboard()
      }
    );
  }
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
  else if (data.startsWith('search_')) {
    const searchType = data.replace('search_', '');
    
    if (searchType === 'all') {
      // –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã API –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      const availableOrders = [];
      
      for (let i = 0; i < 5; i++) {
        const orderId = Math.floor(2000 + Math.random() * 8000);
        const orderTypes = [
          '–ë—É—Ä–µ–Ω–∏–µ —Å–∫–≤–∞–∂–∏–Ω—ã',
          '–ë—É—Ä–µ–Ω–∏–µ –Ω–∞ –ø–µ—Å–æ–∫',
          '–†–µ–º–æ–Ω—Ç —Å–∫–≤–∞–∂–∏–Ω—ã',
          '–ß–∏—Å—Ç–∫–∞ —Å–∫–≤–∞–∂–∏–Ω—ã',
          '–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –Ω–∞—Å–æ—Å–∞'
        ];
        const locations = [
          '–ú–æ—Å–∫–≤–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞',
          '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ø—Ä. –ù–µ–≤—Å–∫–∏–π',
          '–ö–∞–∑–∞–Ω—å, —É–ª. –ë–∞—É–º–∞–Ω–∞',
          '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥, –ø–ª. –ú–∏–Ω–∏–Ω–∞',
          '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥, —É–ª. –ú–∞–ª—ã—à–µ–≤–∞'
        ];
        const randomType = orderTypes[Math.floor(Math.random() * orderTypes.length)];
        const randomLocation = locations[Math.floor(Math.random() * locations.length)];
        const randomDepth = Math.floor(10 + Math.random() * 40);
        const randomPrice = Math.floor(40000 + Math.random() * 100000);
        
        availableOrders.push({
          id: orderId,
          title: randomType,
          depth: randomDepth,
          location: randomLocation,
          price: randomPrice,
          deadline: '15.05.2024'
        });
      }
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–∫–∞–∑–æ–≤
      let ordersMessage = `<b>üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã</b>\n\n`;
      
      availableOrders.forEach(order => {
        ordersMessage += `<b>–ó–∞–∫–∞–∑ #${order.id}</b> - ${order.title}, ${order.depth}–º\n`;
        ordersMessage += `üìç ${order.location}\n`;
        ordersMessage += `üí∞ ${order.price.toLocaleString('ru-RU')} ‚ÇΩ\n`;
        ordersMessage += `üïí –í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ: ${order.deadline}\n`;
        ordersMessage += `<i>–î–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ</i>\n\n`;
      });
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–æ–≤
      const inlineKeyboard = [];
      
      availableOrders.forEach(order => {
        inlineKeyboard.push([
          { text: `‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑ #${order.id}`, callback_data: `accept_order_${order.id}` }
        ]);
      });
      
      inlineKeyboard.push([
        { text: "üîÑ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã", callback_data: "search_all" }
      ]);
      
      inlineKeyboard.push([
        { text: "üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É", callback_data: "back_to_search" }
      ]);
      
      bot.sendMessage(
        chatId,
        ordersMessage,
        { 
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: inlineKeyboard
          }
        }
      );
    } else {
      // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –ø–æ–∏—Å–∫–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∏ –±—ã —Ñ–∏–ª—å—Ç—Ä—ã)
      const searchMessages = {
        'location': '–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤:',
        'type': '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç:',
        'price': '–£–∫–∞–∂–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "50000-100000"):',
        'deadline': '–£–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ä–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–¥–æ 15.05.2024"):'
      };
      
      const promptText = searchMessages[searchType] || '–£—Ç–æ—á–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:';
      
      userStates[userId] = { 
        action: 'search',
        searchType: searchType
      };
      
      bot.sendMessage(
        chatId,
        `<b>üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</b>\n\n${promptText}`,
        { 
          parse_mode: 'HTML',
          reply_markup: {
            force_reply: true
          }
        }
      );
    }
  }
  else if (data === 'back_to_search') {
    // –í–æ–∑–≤—Ä–∞—Ç –∫ —ç–∫—Ä–∞–Ω—É –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
    bot.editMessageText(
      handlers.getOrderSearchText(),
      {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: handlers.getOrderSearchKeyboard()
      }
    );
  }
  else if (data.startsWith('accept_order_')) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞
    const orderId = data.replace('accept_order_', '');
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–∫–∞–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const orderTypes = [
      '–ë—É—Ä–µ–Ω–∏–µ —Å–∫–≤–∞–∂–∏–Ω—ã',
      '–ë—É—Ä–µ–Ω–∏–µ –Ω–∞ –ø–µ—Å–æ–∫',
      '–†–µ–º–æ–Ω—Ç —Å–∫–≤–∞–∂–∏–Ω—ã',
      '–ß–∏—Å—Ç–∫–∞ —Å–∫–≤–∞–∂–∏–Ω—ã',
      '–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –Ω–∞—Å–æ—Å–∞'
    ];
    const locations = [
      '–ú–æ—Å–∫–≤–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞',
      '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ø—Ä. –ù–µ–≤—Å–∫–∏–π',
      '–ö–∞–∑–∞–Ω—å, —É–ª. –ë–∞—É–º–∞–Ω–∞',
      '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥, –ø–ª. –ú–∏–Ω–∏–Ω–∞',
      '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥, —É–ª. –ú–∞–ª—ã—à–µ–≤–∞'
    ];
    
    const randomType = orderTypes[Math.floor(Math.random() * orderTypes.length)];
    const randomLocation = locations[Math.floor(Math.random() * locations.length)];
    const randomDepth = Math.floor(10 + Math.random() * 40);
    const randomPrice = Math.floor(40000 + Math.random() * 100000);
    
    const newOrder = {
      id: orderId,
      title: randomType,
      depth: randomDepth,
      location: randomLocation,
      price: randomPrice,
      deadline: '15.05.2024',
      status: 'active',
      creationDate: new Date().toLocaleDateString('ru-RU')
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const user = usersDB.getUser(userId);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    user.stats.inProgress += 1;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑
    usersDB.addOrder(userId, newOrder);
    
    // –û–ø–æ–≤–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.sendMessage(
      chatId,
      `<b>‚úÖ –ó–∞–∫–∞–∑ #${orderId} –ø—Ä–∏–Ω—è—Ç!</b>

<b>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:</b>
‚Ä¢ –¢–∏–ø —Ä–∞–±–æ—Ç: ${newOrder.title}, ${newOrder.depth}–º
‚Ä¢ –ê–¥—Ä–µ—Å: ${newOrder.location}
‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${newOrder.price.toLocaleString('ru-RU')} ‚ÇΩ
‚Ä¢ –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: –¥–æ ${newOrder.deadline}

<i>–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É "üì¶ –ó–∞–∫–∞–∑—ã"</i>`,
      { 
        parse_mode: 'HTML',
        reply_markup: handlers.getMainMenuKeyboard()
      }
    );
  }
  else if (data === 'back_to_main') {
    // –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    bot.sendMessage(
      chatId,
      '<b>üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é:',
      { 
        parse_mode: 'HTML',
        reply_markup: handlers.getMainMenuKeyboard() 
      }
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–∫–ª—é—á–∞—è –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã)
bot.on('message', (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const text = msg.text;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
  if (userStates[userId] && userStates[userId].action === 'search') {
    const state = userStates[userId];
    const searchType = state.searchType;
    const searchQuery = text;
    
    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    delete userStates[userId];
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let searchMessage = `<b>üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</b>\n\n`;
    
    switch (searchType) {
      case 'location':
        searchMessage += `–ó–∞–∫–∞–∑—ã –≤ —Ä–µ–≥–∏–æ–Ω–µ <b>${searchQuery}</b>:\n\n`;
        break;
      case 'type':
        searchMessage += `–ó–∞–∫–∞–∑—ã —Ç–∏–ø–∞ <b>${searchQuery}</b>:\n\n`;
        break;
      case 'price':
        searchMessage += `–ó–∞–∫–∞–∑—ã –≤ —Ü–µ–Ω–æ–≤–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ <b>${searchQuery}</b>:\n\n`;
        break;
      case 'deadline':
        searchMessage += `–ó–∞–∫–∞–∑—ã —Å–æ —Å—Ä–æ–∫–æ–º <b>${searchQuery}</b>:\n\n`;
        break;
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ (–æ—Ç 0 –¥–æ 3 –∑–∞–∫–∞–∑–æ–≤)
    const resultsCount = Math.floor(Math.random() * 4);
    
    if (resultsCount === 0) {
      searchMessage += "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∑–∞–∫–∞–∑–æ–≤ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã.";
      
      bot.sendMessage(
        chatId,
        searchMessage,
        { 
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [
              [{ text: "üîÑ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã", callback_data: "search_all" }],
              [{ text: "üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É", callback_data: "back_to_search" }]
            ]
          }
        }
      );
    } else {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É
      const availableOrders = [];
      
      for (let i = 0; i < resultsCount; i++) {
        const orderId = Math.floor(2000 + Math.random() * 8000);
        let orderType, orderLocation, orderPrice, orderDeadline;
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–∫–∞–∑—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞
        if (searchType === 'location') {
          orderLocation = searchQuery;
        } else {
          const locations = [
            '–ú–æ—Å–∫–≤–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞',
            '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ø—Ä. –ù–µ–≤—Å–∫–∏–π',
            '–ö–∞–∑–∞–Ω—å, —É–ª. –ë–∞—É–º–∞–Ω–∞',
            searchQuery // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å–∫–æ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–Ω–æ—Å—Ç–∏
          ];
          orderLocation = locations[Math.floor(Math.random() * locations.length)];
        }
        
        if (searchType === 'type') {
          orderType = searchQuery;
        } else {
          const orderTypes = [
            '–ë—É—Ä–µ–Ω–∏–µ —Å–∫–≤–∞–∂–∏–Ω—ã',
            '–ë—É—Ä–µ–Ω–∏–µ –Ω–∞ –ø–µ—Å–æ–∫',
            '–†–µ–º–æ–Ω—Ç —Å–∫–≤–∞–∂–∏–Ω—ã',
            searchQuery // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å–∫–æ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–Ω–æ—Å—Ç–∏
          ];
          orderType = orderTypes[Math.floor(Math.random() * orderTypes.length)];
        }
        
        const randomDepth = Math.floor(10 + Math.random() * 40);
        
        if (searchType === 'price') {
          // –ï—Å–ª–∏ –ø–æ–∏—Å–∫ –ø–æ —Ü–µ–Ω–µ, —Ç–æ –ø—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω
          const priceRange = searchQuery.split('-');
          if (priceRange.length === 2) {
            const minPrice = parseInt(priceRange[0]);
            const maxPrice = parseInt(priceRange[1]);
            
            if (!isNaN(minPrice) && !isNaN(maxPrice)) {
              orderPrice = Math.floor(minPrice + Math.random() * (maxPrice - minPrice));
            } else {
              orderPrice = Math.floor(40000 + Math.random() * 100000);
            }
          } else {
            // –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ü–µ–Ω—É
            orderPrice = Math.floor(40000 + Math.random() * 100000);
          }
        } else {
          orderPrice = Math.floor(40000 + Math.random() * 100000);
        }
        
        if (searchType === 'deadline') {
          orderDeadline = searchQuery;
        } else {
          orderDeadline = '15.05.2024';
        }
        
        availableOrders.push({
          id: orderId,
          title: orderType,
          depth: randomDepth,
          location: orderLocation,
          price: orderPrice,
          deadline: orderDeadline
        });
      }
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
      availableOrders.forEach(order => {
        searchMessage += `<b>–ó–∞–∫–∞–∑ #${order.id}</b> - ${order.title}, ${order.depth}–º\n`;
        searchMessage += `üìç ${order.location}\n`;
        searchMessage += `üí∞ ${order.price.toLocaleString('ru-RU')} ‚ÇΩ\n`;
        searchMessage += `üïí –í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ: ${order.deadline}\n\n`;
      });
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–æ–≤
      const inlineKeyboard = [];
      
      availableOrders.forEach(order => {
        inlineKeyboard.push([
          { text: `‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑ #${order.id}`, callback_data: `accept_order_${order.id}` }
        ]);
      });
      
      inlineKeyboard.push([
        { text: "üîÑ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã", callback_data: "search_all" }
      ]);
      
      inlineKeyboard.push([
        { text: "üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É", callback_data: "back_to_search" }
      ]);
      
      bot.sendMessage(
        chatId,
        searchMessage,
        { 
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: inlineKeyboard
          }
        }
      );
    }
    
    return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
  if (userStates[userId] && userStates[userId].action === 'edit') {
    const state = userStates[userId];
    const user = usersDB.getUser(userId);
    let success = false;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ
    switch (state.field) {
      case 'name':
        user.name = text;
        success = true;
        break;
      case 'phone':
        user.phone = text;
        success = true;
        break;
      case 'email':
        user.email = text;
        success = true;
        break;
      case 'address':
        user.address = text;
        success = true;
        break;
      case 'radius':
        const radius = parseInt(text);
        if (!isNaN(radius) && radius > 0) {
          user.workZone.radius = radius;
          success = true;
        } else {
          bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ä–∞–¥–∏—É—Å–∞.');
        }
        break;
      case 'center':
        user.workZone.center = text;
        success = true;
        break;
    }
    
    if (success) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      usersDB.updateUser(userId, user);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
      bot.sendMessage(
        chatId,
        `<b>‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã</b>\n\n–ó–Ω–∞—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ.`,
        { 
          parse_mode: 'HTML',
          reply_markup: handlers.getMainMenuKeyboard()
        }
      );
      
      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      delete userStates[userId];
    }
    
    return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
  }
  
  // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–∏ –æ–¥–Ω–∏–º –∏–∑ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π –≤—ã—à–µ
  if (![
    '/start', 'üìã –ü—Ä–æ—Ñ–∏–ª—å', 'üì¶ –ó–∞–∫–∞–∑—ã', 'üîç –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤', 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å', 
    'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'üí∞ –î–æ—Ö–æ–¥', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'üîÑ –ü–æ–¥–ø–∏—Å–∫–∞', 
    'üí≥ –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂', '‚ùì –ü–æ–º–æ—â—å'
  ].includes(text)) {
    bot.sendMessage(
      chatId,
      '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.',
      { reply_markup: handlers.getMainMenuKeyboard() }
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('polling_error', (error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞ (polling_error):', error.message);
  if (error.code) {
    console.error('–ö–æ–¥ –æ—à–∏–±–∫–∏:', error.code);
  }
  if (error.response && error.response.body) {
    console.error('–û—Ç–≤–µ—Ç API:', error.response.body);
  }
});

// –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  console.error('–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:', error.stack);
  // –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, —á—Ç–æ–±—ã –±–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–ª —Ä–∞–±–æ—Ç—É
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
  // –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, —á—Ç–æ–±—ã –±–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–ª —Ä–∞–±–æ—Ç—É
});

// –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
bot.onText(/\/add_test_order/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑
  const orderId = Math.floor(1000 + Math.random() * 9000); // 4-–∑–Ω–∞—á–Ω—ã–π ID
  const newOrder = {
    id: orderId,
    title: '–ë—É—Ä–µ–Ω–∏–µ —Å–∫–≤–∞–∂–∏–Ω—ã',
    depth: Math.floor(15 + Math.random() * 25), // –æ—Ç 15 –¥–æ 40 –º–µ—Ç—Ä–æ–≤
    location: '–ú–æ—Å–∫–≤–∞, –õ–µ–Ω–∏–Ω—Å–∫–∏–π –ø—Ä-—Ç',
    price: Math.floor(50000 + Math.random() * 50000), // –æ—Ç 50000 –¥–æ 100000 —Ä—É–±–ª–µ–π
    deadline: '25.04.2024',
    status: 'active',
    creationDate: new Date().toLocaleDateString('ru-RU')
  };
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  usersDB.addOrder(userId, newOrder);
  
  bot.sendMessage(chatId, `‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ #${orderId} –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!`, {
    reply_markup: handlers.getMainMenuKeyboard()
  });
});

// –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
bot.onText(/\/complete_order (.+)/, (msg, match) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const orderId = match[1];
  
  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –∑–∞–∫–∞–∑—ã
  const user = usersDB.getUser(userId);
  
  if (!user.orders) {
    bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤!', {
      reply_markup: handlers.getMainMenuKeyboard()
    });
    return;
  }
  
  // –ò—â–µ–º –∑–∞–∫–∞–∑ –ø–æ ID
  const orderIndex = user.orders.findIndex(o => o.id.toString() === orderId && o.status === 'active');
  
  if (orderIndex === -1) {
    bot.sendMessage(chatId, `‚ùå –ó–∞–∫–∞–∑ #${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω!`, {
      reply_markup: handlers.getMainMenuKeyboard()
    });
    return;
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
  user.orders[orderIndex].status = 'completed';
  user.orders[orderIndex].completionDate = new Date().toLocaleDateString('ru-RU');
  user.orders[orderIndex].rating = 5.0; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  user.completedOrders += 1;
  user.stats.completed += 1;
  user.stats.inProgress -= 1;
  user.stats.positiveReviews += 1;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–Ω–∞–Ω—Å—ã
  const orderPrice = user.orders[orderIndex].price;
  user.finance.totalIncome += orderPrice;
  user.finance.currentBalance += orderPrice;
  
  // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫
  if (user.stats.completed > 0) {
    user.finance.averageCheck = user.finance.totalIncome / user.stats.completed;
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  usersDB.updateUser(userId, user);
  
  bot.sendMessage(chatId, `‚úÖ –ó–∞–∫–∞–∑ #${orderId} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω! –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${orderPrice.toLocaleString('ru-RU')} ‚ÇΩ`, {
    reply_markup: handlers.getMainMenuKeyboard()
  });
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
console.log('üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ polling!');
console.log('‚úÖ –¢–æ–∫–µ–Ω:', TOKEN);
console.log('üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C'); 