version: '3.8'

services:
  web:
    build: .
    ports:
      - "8080:8080"
    environment:
      - DATABASE_URL=postgresql://atributik:BpM3TIh2USFn0KBPj77qh9WerjTCqsad@dpg-cutmu00gph6c73b4gj20-a.oregon-postgres.render.com/drill_flow_db
      - TELEGRAM_TOKEN=7554540052:AAEvde_xL9d85kbJBdxPu8B6Mo4UEMF-qBs
      - BOT_WEBHOOK_DOMAIN=https://drilling-flow.vercel.app
    volumes:
      - .:/app
    depends_on:
      - db

  db:
    image: postgres:15
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=drill_flow_db
    volumes:
      - postgres_data:/var/lib/postgresql/data

volumes:
  postgres_data:

  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    restart: always
    command: >
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - backend

  bot:
    build:
      context: .
      dockerfile: Dockerfile.bot
    restart: always
    env_file:
      - .env
    depends_on:
      - web
      - redis
    networks:
      - backend

  celery:
    build: .
    command: celery -A app.worker worker --loglevel=info --concurrency=4
    volumes:
      - ./app:/app/app
    env_file:
      - .env
    depends_on:
      - redis
      - db
    restart: always
    networks:
      - backend

  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    restart: always
    networks:
      - backend

  grafana:
    image: grafana/grafana
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: always
    networks:
      - backend

networks:
  backend:
    driver: bridge

volumes:
  redis_data:
  prometheus_data:
  grafana_data:
  static_volume:
  media_volume:
  backups:
  certbot: 