const { Telegraf, Markup } = require('telegraf');
const { handleProfile } = require('./handlers/profile');
const { handleOrders } = require('./handlers/orders');
const { handlePayment, handlePaymentCallback } = require('./handlers/payments');
const { handleSubscription, handleSubscriptionCallback, checkSubscriptions } = require('./handlers/subscriptions');
const { handleSettings } = require('./handlers/settings');
const { handleDocuments } = require('./handlers/documents');
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();
const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);

// –î–æ–±–∞–≤–ª—è–µ–º Prisma –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
bot.context.prisma = prisma;

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.command('start', async (ctx) => {
  try {
    const user = await prisma.user.findFirst({
      where: {
        telegramId: BigInt(ctx.from.id)
      }
    });

    if (!user) {
      await prisma.user.create({
        data: {
          telegramId: BigInt(ctx.from.id),
          username: ctx.from.username || '',
          firstName: ctx.from.first_name || '',
          lastName: ctx.from.last_name || '',
          role: 'USER'
        }
      });
    }

    const keyboard = Markup.keyboard([
      ['üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'üìù –ó–∞–∫–∞–∑—ã'],
      ['üí≥ –û–ø–ª–∞—Ç–∞', 'üì± –ü–æ–¥–ø–∏—Å–∫–∞'],
      ['‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã']
    ]).resize();

    await ctx.reply(`
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Drilling Flow!

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:
    `, keyboard);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start:', error);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.hears('üë§ –ü—Ä–æ—Ñ–∏–ª—å', handleProfile);
bot.hears('üìù –ó–∞–∫–∞–∑—ã', handleOrders);
bot.hears('üí≥ –û–ø–ª–∞—Ç–∞', handlePayment);
bot.hears('üì± –ü–æ–¥–ø–∏—Å–∫–∞', handleSubscription);
bot.hears('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', handleSettings);
bot.hears('üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã', handleDocuments);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', async (ctx) => {
  const query = ctx.callbackQuery;
  const data = query.data;

  try {
    if (data.startsWith('payment_')) {
      await handlePaymentCallback(bot, query, prisma);
    } else if (data.startsWith('sub_')) {
      await handleSubscriptionCallback(bot, query, prisma);
    }
    // –î—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤...
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback-–∑–∞–ø—Ä–æ—Å–∞:', error);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00
const CronJob = require('cron').CronJob;
new CronJob('0 0 * * *', () => {
  checkSubscriptions(prisma, bot);
}, null, true);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error('–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:', err);
  ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
});

module.exports = bot; 