/**
 * @fileoverview –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª Telegram –±–æ—Ç–∞ DrillFlow
 */

const TelegramBot = require('node-telegram-bot-api');
const config = require('../config/default');
const { handleTelegramError } = require('../utils/errorHandler');
const { 
  getUserByTelegramId, 
  updateUser 
} = require('../utils/database');
const {
  getMainMenuKeyboard,
  getProfileKeyboard,
  getSettingsKeyboard,
  getSubscriptionKeyboard,
  getOrdersKeyboard,
  getStatusKeyboard,
  getTestPaymentKeyboard
} = require('../utils/keyboards');
const {
  formatUserProfile,
  formatOrdersList,
  formatUserStats,
  formatSubscriptionInfo,
  formatIncomeInfo
} = require('../utils/messages');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new TelegramBot(config.bot.token, {
  polling: process.env.USE_POLLING === '1'
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  try {
    let user = await getUserByTelegramId(userId);
    
    if (!user) {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const now = new Date();
      user = await updateUser(userId, {
        telegramId: userId,
        name: msg.from.first_name,
        status: '–ê–∫—Ç–∏–≤–µ–Ω',
        role: 'CLIENT',
        rating: 5.0,
        registrationDate: now.toLocaleDateString('ru-RU')
      });
    }
    
    const welcomeMessage = `<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DrillFlow Bot!</b>

–≠—Ç–æ —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—É—Ä–æ–≤—ã–º–∏ —Ä–∞–±–æ—Ç–∞–º–∏.

–ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å–µ–≥–æ–¥–Ω—è?`;
    
    await bot.sendMessage(chatId, welcomeMessage, {
      parse_mode: 'HTML',
      reply_markup: getMainMenuKeyboard()
    });
  } catch (error) {
    handleTelegramError(error, { method: 'start', userId });
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "üìã –ü—Ä–æ—Ñ–∏–ª—å"
bot.onText(/üìã –ü—Ä–æ—Ñ–∏–ª—å/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  try {
    const user = await getUserByTelegramId(userId);
    if (!user) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    await bot.sendMessage(chatId, formatUserProfile(user), {
      parse_mode: 'HTML',
      reply_markup: getProfileKeyboard(user)
    });
  } catch (error) {
    handleTelegramError(error, { method: 'profile', userId });
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
bot.onText(/üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  try {
    const user = await getUserByTelegramId(userId);
    if (!user) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    await bot.sendMessage(chatId, formatUserStats(user), {
      parse_mode: 'HTML',
      reply_markup: getMainMenuKeyboard()
    });
  } catch (error) {
    handleTelegramError(error, { method: 'stats', userId });
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "üîÑ –ü–æ–¥–ø–∏—Å–∫–∞"
bot.onText(/üîÑ –ü–æ–¥–ø–∏—Å–∫–∞/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  try {
    const user = await getUserByTelegramId(userId);
    if (!user) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    await bot.sendMessage(chatId, formatSubscriptionInfo(user), {
      parse_mode: 'HTML',
      reply_markup: getSubscriptionKeyboard(user)
    });
  } catch (error) {
    handleTelegramError(error, { method: 'subscription', userId });
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "üí∞ –î–æ—Ö–æ–¥"
bot.onText(/üí∞ –î–æ—Ö–æ–¥/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  try {
    const user = await getUserByTelegramId(userId);
    if (!user) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    await bot.sendMessage(chatId, formatIncomeInfo(user), {
      parse_mode: 'HTML',
      reply_markup: getMainMenuKeyboard()
    });
  } catch (error) {
    handleTelegramError(error, { method: 'income', userId });
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Ö–æ–¥–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', async (callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const userId = callbackQuery.from.id;
  const data = callbackQuery.data;
  
  try {
    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å –∫–Ω–æ–ø–∫–∏
    await bot.answerCallbackQuery(callbackQuery.id);
    
    const user = await getUserByTelegramId(userId);
    if (!user) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    if (data.startsWith('status_')) {
      const statusMap = {
        status_free: '–°–≤–æ–±–æ–¥–µ–Ω',
        status_busy: '–ó–∞–Ω—è—Ç',
        status_break: '–ü–µ—Ä–µ—Ä—ã–≤',
        status_unavailable: '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
      };
      
      const newStatus = statusMap[data];
      if (newStatus) {
        await updateUser(userId, { status: newStatus });
        await bot.sendMessage(
          chatId,
          `<b>‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω</b>\n\n–í–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: <b>${newStatus}</b>`,
          { 
            parse_mode: 'HTML',
            reply_markup: getMainMenuKeyboard()
          }
        );
      }
    }
    else if (data.startsWith('subscription_')) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–¥–ø–∏—Å–∫–æ–π
      if (data === 'subscription_extend') {
        const now = new Date();
        const expDate = new Date(now);
        expDate.setMonth(expDate.getMonth() + 1);
        
        await updateUser(userId, {
          subscription: {
            ...user.subscription,
            expirationDate: expDate.toLocaleDateString('ru-RU')
          }
        });
        
        await bot.sendMessage(
          chatId,
          `<b>‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞!</b>\n\n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ "${user.subscription.plan}" –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ ${expDate.toLocaleDateString('ru-RU')}`,
          { 
            parse_mode: 'HTML',
            reply_markup: getMainMenuKeyboard()
          }
        );
      }
    }
    else if (data === 'back_to_main') {
      await bot.sendMessage(
        chatId,
        '<b>üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é:',
        { 
          parse_mode: 'HTML',
          reply_markup: getMainMenuKeyboard()
        }
      );
    }
  } catch (error) {
    handleTelegramError(error, { method: 'callback_query', userId, data });
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('polling_error', (error) => {
  handleTelegramError(error, { method: 'polling_error' });
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞
module.exports = bot; 