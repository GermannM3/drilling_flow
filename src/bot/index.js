const TelegramBot = require('node-telegram-bot-api');
const { PrismaClient } = require('@prisma/client');
const { handleProfile } = require('./handlers/profile');
const { handleOrders } = require('./handlers/orders');
const { handleLocation } = require('./handlers/location');
const { handleDocuments } = require('./handlers/documents');
const { handleSettings } = require('./handlers/settings');
const { handleStart, handleHelp } = require('./handlers');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Prisma
const prisma = new PrismaClient();

function initBot() {
  const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, {
    polling: process.env.USE_POLLING === '1'
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
  bot.onText(/\/start/, (msg) => handleStart(bot, msg));
  bot.onText(/\/help/, (msg) => handleHelp(bot, msg));
  bot.onText(/\/location/, (msg) => handleLocation(bot, msg));

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
  bot.on('location', (msg) => handleLocation(bot, msg));

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  bot.on('message', (msg) => {
    if (msg.text && !msg.text.startsWith('/')) {
      const chatId = msg.chat.id;
      switch (msg.text) {
        case 'üìã –ü—Ä–æ—Ñ–∏–ª—å':
          bot.sendMessage(chatId, '–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
          break;
        case 'üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ':
          handleLocation(bot, msg);
          break;
        case 'üì¶ –ó–∞–∫–∞–∑—ã':
          bot.sendMessage(chatId, '–§—É–Ω–∫—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
          break;
        case '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏':
          bot.sendMessage(chatId, '–§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
          break;
        case '‚ùì –ü–æ–º–æ—â—å':
          handleHelp(bot, msg);
          break;
        case 'üîô –ù–∞–∑–∞–¥':
          handleStart(bot, msg);
          break;
      }
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
  bot.on('callback_query', (query) => {
    const chatId = query.message.chat.id;
    bot.answerCallbackQuery(query.id);
    bot.sendMessage(chatId, '–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  bot.on('error', (error) => {
    console.error('–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:', error);
  });

  bot.on('polling_error', (error) => {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–ª–∏–Ω–≥–µ:', error);
  });

  return bot;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const data = query.data;

  try {
    switch (data) {
      case 'profile':
        await handleProfile(bot, query, prisma);
        break;
      case 'create_order':
      case 'my_orders':
        await handleOrders(bot, query, prisma);
        break;
      case 'settings':
        await handleSettings(bot, query, prisma);
        break;
      case 'help':
        await sendHelp(bot, chatId);
        break;
      default:
        if (data.startsWith('order_')) {
          await handleOrders(bot, query, prisma);
        } else if (data.startsWith('profile_')) {
          await handleProfile(bot, query, prisma);
        } else if (data.startsWith('settings_')) {
          await handleSettings(bot, query, prisma);
        }
    }

    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –∑–∞–ø—Ä–æ—Å
    await bot.answerCallbackQuery(query.id);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback:', error);
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
bot.on('photo', async (msg) => {
  try {
    await handleDocuments(bot, msg, prisma, 'photo');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ:', error);
    await bot.sendMessage(msg.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ.');
  }
});

bot.on('document', async (msg) => {
  try {
    await handleDocuments(bot, msg, prisma, 'document');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error);
    await bot.sendMessage(msg.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞.');
  }
});

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø—Ä–∞–≤–∫–∏
async function sendHelp(bot, chatId) {
  const helpText = `üîç –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:

üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:
1. –ù–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑"
2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å–ª—É–≥–∏
3. –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å
4. –î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ
5. –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ
6. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞

üîç –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤:
- "–ú–æ–∏ –∑–∞–∫–∞–∑—ã" –ø–æ–∫–∞–∂–µ—Ç –≤—Å–µ –≤–∞—à–∏ –∑–∞–∫–∞–∑—ã
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
- –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞–∫–∞–∑ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π

üë§ –ü—Ä–æ—Ñ–∏–ª—å:
- –£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
- –ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
- –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ (–¥–ª—è –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤)

‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:
- –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
- –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∑–≤—É–∫
- –ò–∑–º–µ–Ω–∏—Ç–µ —è–∑—ã–∫

‚ùì –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?
–ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @support`;

  await bot.sendMessage(chatId, helpText, {
    parse_mode: 'Markdown'
  });
}

// –≠–∫—Å–ø–æ—Ä—Ç –±–æ—Ç–∞ –∏ Prisma –∫–ª–∏–µ–Ω—Ç–∞
module.exports = {
  initBot,
  prisma
}; 