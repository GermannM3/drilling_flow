const { Markup } = require('telegraf');

async function handleSubscription(ctx) {
  try {
    const user = await ctx.prisma.user.findFirst({
      where: {
        telegramId: BigInt(ctx.from.id)
      },
      include: {
        subscription: true
      }
    });

    if (!user) {
      return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
    }

    const subscription = user.subscription;
    let message = '';
    let keyboard;

    if (subscription && new Date(subscription.endDate) > new Date()) {
      // –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
      message = `
üì± –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞

–¢–∏–ø: ${subscription.type === 'PREMIUM' ? 'üíé –ü—Ä–µ–º–∏—É–º' : 'üöÄ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª'}
–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${new Date(subscription.endDate).toLocaleDateString()}
–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ: ${subscription.autoRenew ? '‚úÖ –í–∫–ª—é—á–µ–Ω–æ' : '‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ'}

–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
${getSubscriptionFeatures(subscription.type)}
      `;

      keyboard = Markup.inlineKeyboard([
        [Markup.button.callback(
          subscription.autoRenew ? '‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ' : '‚úÖ –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ',
          subscription.autoRenew ? 'sub_disable_auto' : 'sub_enable_auto'
        )],
        [Markup.button.callback('üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 'sub_renew')],
        [Markup.button.callback('üí´ –ò–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏', 'sub_change')]
      ]);
    } else {
      // –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
      message = `
üí° –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:

üíé –ü—Ä–µ–º–∏—É–º (999‚ÇΩ/–º–µ—Å)
${getSubscriptionFeatures('PREMIUM')}

üöÄ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª (1999‚ÇΩ/–º–µ—Å)
${getSubscriptionFeatures('PROFESSIONAL')}
      `;

      keyboard = Markup.inlineKeyboard([
        [
          Markup.button.callback('üíé –ü—Ä–µ–º–∏—É–º', 'payment_premium'),
          Markup.button.callback('üöÄ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª', 'payment_pro')
        ]
      ]);
    }

    await ctx.reply(message, keyboard);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

function getSubscriptionFeatures(type) {
  const features = {
    PREMIUM: `
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –∑–∞–∫–∞–∑–æ–≤
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ –î–æ 50 –∑–∞–∫–∞–∑–æ–≤ –≤ –º–µ—Å—è—Ü`,
    PROFESSIONAL: `
‚Ä¢ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ü—Ä–µ–º–∏—É–º
‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
‚Ä¢ API –¥–æ—Å—Ç—É–ø
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
‚Ä¢ –ë—Ä–µ–Ω–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã`
  };

  return features[type] || '';
}

async function handleSubscriptionCallback(bot, query, prisma) {
  const chatId = query.message.chat.id;
  const userId = query.from.id;
  const data = query.data;

  try {
    const user = await prisma.user.findFirst({
      where: {
        telegramId: BigInt(userId)
      },
      include: {
        subscription: true
      }
    });

    if (!user) {
      await bot.answerCallbackQuery(query.id, {
        text: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
        show_alert: true
      });
      return;
    }

    switch (data) {
      case 'sub_enable_auto':
      case 'sub_disable_auto':
        if (!user.subscription) {
          await bot.answerCallbackQuery(query.id, {
            text: '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏',
            show_alert: true
          });
          return;
        }

        await prisma.subscription.update({
          where: { id: user.subscription.id },
          data: { autoRenew: data === 'sub_enable_auto' }
        });

        await bot.answerCallbackQuery(query.id, {
          text: `–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ ${data === 'sub_enable_auto' ? '–≤–∫–ª—é—á–µ–Ω–æ' : '–æ—Ç–∫–ª—é—á–µ–Ω–æ'}`,
          show_alert: true
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–ø–∏—Å–∫–µ
        await handleSubscription({ ...ctx, from: { id: userId } });
        break;

      case 'sub_renew':
      case 'sub_change':
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã
        const keyboard = Markup.inlineKeyboard([
          [
            Markup.button.callback('üíé –ü—Ä–µ–º–∏—É–º (999‚ÇΩ)', 'payment_premium'),
            Markup.button.callback('üöÄ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª (1999‚ÇΩ)', 'payment_pro')
          ]
        ]);

        await bot.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:', {
          chat_id: chatId,
          message_id: query.message.message_id,
          reply_markup: keyboard
        });
        break;
    }

    await bot.answerCallbackQuery(query.id);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
    await bot.answerCallbackQuery(query.id, {
      text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      show_alert: true
    });
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫
async function checkSubscriptions(prisma, bot) {
  try {
    const expiredSubscriptions = await prisma.subscription.findMany({
      where: {
        endDate: {
          lt: new Date()
        },
        autoRenew: true
      },
      include: {
        user: true
      }
    });

    for (const subscription of expiredSubscriptions) {
      try {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è
        const payment = await prisma.payment.create({
          data: {
            userId: subscription.userId,
            amount: subscription.type === 'PREMIUM' ? 999 : 1999,
            status: 'PENDING',
            paymentMethod: 'CARD',
            description: `–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ ${subscription.type}`
          }
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.telegram.sendMessage(subscription.user.telegramId, `
‚ö†Ô∏è –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç–µ–∫

–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏: ${subscription.type === 'PREMIUM' ? 'üíé –ü—Ä–µ–º–∏—É–º' : 'üöÄ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª'}
–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${payment.amount}‚ÇΩ

–î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:
${process.env.FRONTEND_URL}/payment/${payment.id}
        `);
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ ${subscription.id}:`, error);
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫:', error);
  }
}

module.exports = {
  handleSubscription,
  handleSubscriptionCallback,
  checkSubscriptions
}; 