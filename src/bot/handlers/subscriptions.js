/**
 * @fileoverview –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è Telegram –±–æ—Ç–∞
 */

const { 
  getUserByTelegramId,
  updateUser 
} = require('../../utils/database');
const { handleTelegramError } = require('../../utils/errorHandler');
const { 
  getMainMenuKeyboard,
  getSubscriptionKeyboard 
} = require('../../utils/keyboards');
const { formatSubscriptionInfo } = require('../../utils/messages');
const config = require('../../config/default');

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "üîÑ –ü–æ–¥–ø–∏—Å–∫–∞"
 * @param {TelegramBot} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
 * @param {Object} msg - –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
const handleSubscription = async (bot, msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  try {
    const user = await getUserByTelegramId(userId);
    if (!user) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    await bot.sendMessage(chatId, formatSubscriptionInfo(user), {
      parse_mode: 'HTML',
      reply_markup: getSubscriptionKeyboard(user)
    });
  } catch (error) {
    handleTelegramError(error, { method: 'handleSubscription', userId });
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫
 * @param {TelegramBot} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
 * @param {Object} query - Callback query
 */
const handleSubscriptionCallback = async (bot, query) => {
  const chatId = query.message.chat.id;
  const userId = query.from.id;
  const data = query.data;
  
  try {
    await bot.answerCallbackQuery(query.id);
    
    const user = await getUserByTelegramId(userId);
    if (!user) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    if (data === 'subscription_extend') {
      const now = new Date();
      const expDate = new Date(now);
      expDate.setMonth(expDate.getMonth() + 1);
      
      await updateUser(userId, {
        subscription: {
          ...user.subscription,
          expirationDate: expDate.toLocaleDateString('ru-RU')
        }
      });
      
      await bot.sendMessage(chatId, `<b>‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞!</b>

–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ "${user.subscription.plan}" –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ ${expDate.toLocaleDateString('ru-RU')}`, {
        parse_mode: 'HTML',
        reply_markup: getMainMenuKeyboard()
      });
    }
    else if (data === 'subscription_cancel') {
      await updateUser(userId, {
        subscription: {
          ...user.subscription,
          status: 'INACTIVE'
        }
      });
      
      await bot.sendMessage(chatId, `<b>‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>

–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –¥–æ –∫–æ–Ω—Ü–∞ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞, –∞ –∑–∞—Ç–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–∏—Ç—Å—è.`, {
        parse_mode: 'HTML',
        reply_markup: getMainMenuKeyboard()
      });
    }
    else if (data.startsWith('subscription_')) {
      const plan = data.replace('subscription_', '');
      const { subscriptionPlans } = config.payments;
      const planData = subscriptionPlans[plan.toLowerCase()];
      
      if (!planData) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏');
      }
      
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–ø–ª–∞—Ç—É
      const { handleSubscriptionPayment } = require('./payments');
      await handleSubscriptionPayment(bot, query.message, plan);
    }
  } catch (error) {
    handleTelegramError(error, { method: 'handleSubscriptionCallback', userId, data });
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å—ã –ø–æ–¥–ø–∏—Å–æ–∫
 * @param {TelegramBot} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
 */
const checkSubscriptions = async (bot) => {
  try {
    const now = new Date();
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
    const users = await prisma.user.findMany({
      where: {
        subscription: {
          status: 'ACTIVE'
        }
      },
      include: {
        subscription: true
      }
    });
    
    for (const user of users) {
      const expDate = new Date(user.subscription.expirationDate.split('.').reverse().join('-'));
      
      // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞
      if (expDate <= now) {
        if (user.subscription.autoRenew) {
          // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è
          // –í –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ –ø—Ä–æ—Å—Ç–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          await bot.sendMessage(user.telegramId, `<b>‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ!</b>

–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ "${user.subscription.plan}" –∏—Å—Ç–µ–∫.
–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤—Ä—É—á–Ω—É—é.`, {
            parse_mode: 'HTML'
          });
        }
        
        // –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        await updateUser(user.telegramId, {
          subscription: {
            ...user.subscription,
            status: 'INACTIVE'
          }
        });
        
        await bot.sendMessage(user.telegramId, `<b>‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞</b>

–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ "${user.subscription.plan}" –∏—Å—Ç–µ–∫.
–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ñ–æ—Ä–º–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É.`, {
          parse_mode: 'HTML'
        });
      }
      // –ï—Å–ª–∏ –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –æ—Å—Ç–∞–ª–æ—Å—å 3 –¥–Ω—è –∏–ª–∏ –º–µ–Ω—å—à–µ
      else if ((expDate - now) / (1000 * 60 * 60 * 24) <= 3) {
        await bot.sendMessage(user.telegramId, `<b>‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ!</b>

–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ "${user.subscription.plan}" –∏—Å—Ç–µ–∫–∞–µ—Ç ${user.subscription.expirationDate}.
${user.subscription.autoRenew ? '–ü–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –ø—Ä–æ–¥–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.' : '–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É!'}`, {
          parse_mode: 'HTML'
        });
      }
    }
  } catch (error) {
    handleTelegramError(error, { method: 'checkSubscriptions' });
  }
};

module.exports = {
  handleSubscription,
  handleSubscriptionCallback,
  checkSubscriptions
}; 