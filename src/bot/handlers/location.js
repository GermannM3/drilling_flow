const { calculateDistance } = require('../utils');

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
async function handleLocation(bot, msg, prisma) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  try {
    const user = await prisma.user.findUnique({
      where: { telegramId: BigInt(userId) },
      include: { contractor: true }
    });

    if (!user) {
      await bot.sendMessage(chatId, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      return;
    }

    if (!msg.location) {
      await requestLocation(bot, chatId);
      return;
    }

    const { latitude, longitude } = msg.location;

    if (user.role === 'CONTRACTOR') {
      await handleContractorLocation(bot, msg, prisma, user, latitude, longitude);
    } else {
      await handleClientLocation(bot, msg, prisma, user, latitude, longitude);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error);
    await bot.sendMessage(chatId,
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    );
  }
}

// –ó–∞–ø—Ä–æ—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
async function requestLocation(bot, chatId) {
  const keyboard = {
    keyboard: [
      [{
        text: 'üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é',
        request_location: true
      }]
    ],
    resize_keyboard: true,
    one_time_keyboard: true
  };

  await bot.sendMessage(chatId,
    '–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:',
    { reply_markup: keyboard }
  );
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞
async function handleContractorLocation(bot, msg, prisma, user, latitude, longitude) {
  const chatId = msg.chat.id;

  try {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏
    await prisma.location.upsert({
      where: {
        contractorId: user.contractor.id
      },
      update: {
        latitude,
        longitude
      },
      create: {
        latitude,
        longitude,
        contractor: {
          connect: { id: user.contractor.id }
        }
      }
    });

    // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    const orders = await prisma.order.findMany({
      where: {
        status: 'NEW',
        location: {
          isNot: null
        }
      },
      include: {
        location: true
      }
    });

    // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –ø–æ —Ä–∞–¥–∏—É—Å—É —Ä–∞–±–æ—Ç—ã –ø–æ–¥—Ä—è–¥—á–∏–∫–∞
    const nearbyOrders = orders.filter(order => {
      if (!order.location) return false;
      
      const distance = calculateDistance(
        latitude,
        longitude,
        order.location.latitude,
        order.location.longitude
      );

      return distance <= user.contractor.workRadius;
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–∏–∂–∞–π—à–∏—Ö –∑–∞–∫–∞–∑–∞—Ö
    if (nearbyOrders.length > 0) {
      let message = 'üìç –ù–∞–π–¥–µ–Ω—ã –∑–∞–∫–∞–∑—ã –≤ –≤–∞—à–µ–º —Ä–∞–¥–∏—É—Å–µ —Ä–∞–±–æ—Ç—ã:\n\n';
      
      for (const order of nearbyOrders) {
        const distance = calculateDistance(
          latitude,
          longitude,
          order.location.latitude,
          order.location.longitude
        );

        message += `üîπ –ó–∞–∫–∞–∑ #${order.id}\n` +
                  `üìç –ê–¥—Ä–µ—Å: ${order.address}\n` +
                  `üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${distance.toFixed(1)} –∫–º\n` +
                  `üîß –£—Å–ª—É–≥–∞: ${order.service}\n\n`;
      }

      await bot.sendMessage(chatId, message);
    } else {
      await bot.sendMessage(chatId,
        'üìç –í–∞—à–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n' +
        '–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –≤ –≤–∞—à–µ–º —Ä–∞–¥–∏—É—Å–µ —Ä–∞–±–æ—Ç—ã.'
      );
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞:', error);
    await bot.sendMessage(chatId,
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    );
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
async function handleClientLocation(bot, msg, prisma, user, latitude, longitude) {
  const chatId = msg.chat.id;

  try {
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏
    const contractors = await prisma.contractor.findMany({
      where: {
        location: {
          isNot: null
        },
        user: {
          status: 'ACTIVE'
        }
      },
      include: {
        location: true,
        user: true
      }
    });

    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
    const nearbyContractors = contractors.filter(contractor => {
      if (!contractor.location) return false;

      const distance = calculateDistance(
        latitude,
        longitude,
        contractor.location.latitude,
        contractor.location.longitude
      );

      return distance <= contractor.workRadius;
    });

    if (nearbyContractors.length > 0) {
      let message = 'üë∑ –ù–∞–π–¥–µ–Ω—ã –ø–æ–¥—Ä—è–¥—á–∏–∫–∏, –≥–æ—Ç–æ–≤—ã–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –≤–∞—à–µ–º —Ä–∞–π–æ–Ω–µ:\n\n';

      for (const contractor of nearbyContractors) {
        const distance = calculateDistance(
          latitude,
          longitude,
          contractor.location.latitude,
          contractor.location.longitude
        );

        message += `üë§ ${contractor.user.name}\n` +
                  `üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${distance.toFixed(1)} –∫–º\n` +
                  `üîß –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ${contractor.specialization.join(', ')}\n` +
                  `‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: ${contractor.rating.toFixed(1)}\n\n`;
      }

      await bot.sendMessage(chatId, message);
    } else {
      await bot.sendMessage(chatId,
        'üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –≤–∞—à–µ–º —Ä–∞–π–æ–Ω–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤.\n' +
        '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ - –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞!'
      );
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞:', error);
    await bot.sendMessage(chatId,
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    );
  }
}

module.exports = {
  handleLocation
}; 