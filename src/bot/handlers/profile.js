const { PrismaClient } = require('@prisma/client');
const { mainKeyboard } = require('./index');
const { Markup } = require('telegraf');

const prisma = new PrismaClient();

// –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
const profileStates = new Map();

async function handleProfile(ctx) {
  try {
    const user = await ctx.prisma.user.findFirst({
      where: {
        telegramId: BigInt(ctx.from.id)
      },
      include: {
        subscription: true,
        settings: true
      }
    });

    if (!user) {
      return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
    }

    await showProfile(ctx, user);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ—Ñ–∏–ª—è:', error);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

async function showProfile(ctx, user) {
  const subscriptionStatus = user.subscription 
    ? `${user.subscription.type} (–¥–æ ${new Date(user.subscription.endDate).toLocaleDateString()})`
    : '–ù–µ –∞–∫—Ç–∏–≤–Ω–∞';

  const keyboard = Markup.inlineKeyboard([
    [
      Markup.button.callback('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', 'profile_edit'),
      Markup.button.callback('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'profile_settings')
    ],
    [
      Markup.button.callback('üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã', 'profile_documents'),
      Markup.button.callback('üîÑ –°—Ç–∞—Ç—É—Å', 'profile_status')
    ],
    [
      Markup.button.callback('üí∞ –î–æ—Ö–æ–¥', 'profile_income'),
      Markup.button.callback('üîî –ü–æ–¥–ø–∏—Å–∫–∞', 'profile_subscription')
    ],
    [Markup.button.callback('üí≥ –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂', 'profile_payment')]
  ]);

  const message = `
üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>

üÜî ID: ${user.telegramId}
üë§ –ò–º—è: ${user.firstName} ${user.lastName || ''}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${user.phoneNumber || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìß Email: ${user.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üëî –†–æ–ª—å: ${user.role}
üîÑ –°—Ç–∞—Ç—É—Å: ${user.isActive ? 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' : 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
üí´ –ü–æ–¥–ø–∏—Å–∫–∞: ${subscriptionStatus}

‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:
üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${user.settings?.notifications ? '–í–∫–ª—é—á–µ–Ω—ã' : '–í—ã–∫–ª—é—á–µ–Ω—ã'}
üåç –Ø–∑—ã–∫: ${user.settings?.language || '–†—É—Å—Å–∫–∏–π'}
üìç –†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞: ${user.settings?.radius || 50} –∫–º
`;

  await ctx.replyWithHTML(message, keyboard);
}

async function handleProfileCallback(bot, query, prisma) {
  const chatId = query.message.chat.id;
  const userId = query.from.id;
  const data = query.data;

  try {
    const user = await prisma.user.findFirst({
      where: {
        telegramId: BigInt(userId)
      },
      include: {
        subscription: true,
        settings: true
      }
    });

    if (!user) {
      await bot.answerCallbackQuery(query.id, {
        text: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
        show_alert: true
      });
      return;
    }

    switch (data) {
      case 'profile_edit':
        const editKeyboard = Markup.inlineKeyboard([
          [
            Markup.button.callback('‚úèÔ∏è –ò–º—è', 'profile_edit_name'),
            Markup.button.callback('üì± –¢–µ–ª–µ—Ñ–æ–Ω', 'profile_edit_phone')
          ],
          [
            Markup.button.callback('üìß Email', 'profile_edit_email'),
            Markup.button.callback('üåç –Ø–∑—ã–∫', 'profile_edit_language')
          ],
          [Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'back_to_profile')]
        ]);
        await bot.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:', {
          chat_id: chatId,
          message_id: query.message.message_id,
          reply_markup: editKeyboard
        });
        break;

      case 'profile_settings':
        const settingsKeyboard = Markup.inlineKeyboard([
          [
            Markup.button.callback('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'settings_notifications'),
            Markup.button.callback('üìç –†–∞–¥–∏—É—Å', 'settings_radius')
          ],
          [Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'back_to_profile')]
        ]);
        await bot.editMessageText('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', {
          chat_id: chatId,
          message_id: query.message.message_id,
          reply_markup: settingsKeyboard
        });
        break;

      case 'profile_subscription':
        const subKeyboard = Markup.inlineKeyboard([
          [Markup.button.callback('üíé –ü—Ä–µ–º–∏—É–º - 999‚ÇΩ/–º–µ—Å', 'sub_premium')],
          [Markup.button.callback('üöÄ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª - 1999‚ÇΩ/–º–µ—Å', 'sub_pro')],
          [Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'back_to_profile')]
        ]);
        await bot.editMessageText(`
<b>üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π</b>

–í–∞—à —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ: <b>${user.subscription?.type || '–ë–∞–∑–æ–≤—ã–π'}</b>
–°—Ç–∞—Ç—É—Å: <b>${user.subscription ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–ù–µ –∞–∫—Ç–∏–≤–Ω–∞'}</b>
${user.subscription ? `–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: <b>${new Date(user.subscription.endDate).toLocaleDateString()}</b>` : ''}

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:</b>
üíé <b>–ü—Ä–µ–º–∏—É–º</b> - 999‚ÇΩ/–º–µ—Å—è—Ü
  ‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤
  ‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7

üöÄ <b>–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª</b> - 1999‚ÇΩ/–º–µ—Å—è—Ü
  ‚Ä¢ –í—Å–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ü—Ä–µ–º–∏—É–º
  ‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–æ–º–∏—Å—Å–∏–∏
  ‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä

<i>–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞ –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É</i>
`, {
          chat_id: chatId,
          message_id: query.message.message_id,
          parse_mode: 'HTML',
          reply_markup: subKeyboard
        });
        break;

      case 'profile_payment':
        const paymentKeyboard = Markup.inlineKeyboard([
          [Markup.button.callback('üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 1‚ÇΩ', 'payment_test')],
          [Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'back_to_profile')]
        ]);
        await bot.editMessageText(`
üí≥ –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂

–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.

–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: 1‚ÇΩ
–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ
`, {
          chat_id: chatId,
          message_id: query.message.message_id,
          reply_markup: paymentKeyboard
        });
        break;

      case 'profile_income':
        const income = await calculateIncome(user.id, prisma);
        await bot.editMessageText(`
üí∞ –í–∞—à –¥–æ—Ö–æ–¥

–ó–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: ${income.monthly}‚ÇΩ
–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è: ${income.total}‚ÇΩ

–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: ${income.completedOrders}
–°—Ä–µ–¥–Ω–∏–π —á–µ–∫: ${income.averageOrder}‚ÇΩ
`, {
          chat_id: chatId,
          message_id: query.message.message_id,
          reply_markup: Markup.inlineKeyboard([[Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'back_to_profile')]])
        });
        break;

      case 'profile_status':
        const statusKeyboard = Markup.inlineKeyboard([
          [
            Markup.button.callback('üü¢ –ê–∫—Ç–∏–≤–µ–Ω', 'profile_status_active'),
            Markup.button.callback('üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω', 'profile_status_inactive')
          ],
          [Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'back_to_profile')]
        ]);
        await bot.editMessageText(`
üîÑ –°—Ç–∞—Ç—É—Å –ø—Ä–æ—Ñ–∏–ª—è

–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${user.isActive ? 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' : 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}

–ê–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ–∑–≤–æ–ª—è–µ—Ç:
‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
‚Ä¢ –ë—ã—Ç—å –≤–∏–¥–∏–º—ã–º –≤ –ø–æ–∏—Å–∫–µ
‚Ä¢ –ü—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã –≤ —Ä–∞–±–æ—Ç—É
`, {
          chat_id: chatId,
          message_id: query.message.message_id,
          reply_markup: statusKeyboard
        });
        break;

      case 'profile_status_active':
        await prisma.user.update({
          where: { id: user.id },
          data: { isActive: true }
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
        broadcastEvent('USER_UPDATED', {
          id: user.id,
          isActive: true
        });

        await bot.editMessageText('‚úÖ –í–∞—à —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ "–ê–∫—Ç–∏–≤–µ–Ω"', {
          chat_id: chatId,
          message_id: query.message.message_id,
          reply_markup: Markup.inlineKeyboard([[Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'profile_status')]])
        });
        break;

      case 'profile_status_inactive':
        await prisma.user.update({
          where: { id: user.id },
          data: { isActive: false }
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
        broadcastEvent('USER_UPDATED', {
          id: user.id,
          isActive: false
        });

        await bot.editMessageText('üî¥ –í–∞—à —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω"', {
          chat_id: chatId,
          message_id: query.message.message_id,
          reply_markup: Markup.inlineKeyboard([[Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'profile_status')]])
        });
        break;

      case 'back_to_profile':
        await showProfile(bot, chatId, user);
        break;
    }

    await bot.answerCallbackQuery(query.id);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback –ø—Ä–æ—Ñ–∏–ª—è:', error);
    await bot.answerCallbackQuery(query.id, {
      text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      show_alert: true
    });
  }
}

async function calculateIncome(userId, prisma) {
  const now = new Date();
  const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);

  const completedOrders = await prisma.order.findMany({
    where: {
      contractorId: userId,
      status: 'COMPLETED'
    }
  });

  const monthlyOrders = completedOrders.filter(order => 
    new Date(order.completedAt) >= startOfMonth
  );

  const totalIncome = completedOrders.reduce((sum, order) => sum + (order.price || 0), 0);
  const monthlyIncome = monthlyOrders.reduce((sum, order) => sum + (order.price || 0), 0);
  const averageOrder = completedOrders.length > 0 ? totalIncome / completedOrders.length : 0;

  return {
    monthly: monthlyIncome,
    total: totalIncome,
    completedOrders: completedOrders.length,
    averageOrder: Math.round(averageOrder)
  };
}

module.exports = {
  handleProfile,
  handleProfileCallback,
  profileStates
}; 