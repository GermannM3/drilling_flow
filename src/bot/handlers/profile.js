const { PrismaClient } = require('@prisma/client');
const { mainKeyboard } = require('./index');

const prisma = new PrismaClient();

// –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
const profileStates = new Map();

async function handleProfile(bot, msg, prisma, action = null) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  try {
    const user = await prisma.user.findFirst({
      where: {
        telegramId: BigInt(userId)
      },
      include: {
        location: true,
        documents: true
      }
    });

    if (!user) {
      bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start');
      return;
    }

    if (action) {
      switch (action) {
        case 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å':
          return handleStatusUpdate(bot, chatId, user);
        case 'üí∞ –î–æ—Ö–æ–¥':
          return handleIncome(bot, chatId, user);
        case 'üîÑ –ü–æ–¥–ø–∏—Å–∫–∞':
          return handleSubscription(bot, chatId, user);
        case 'üí≥ –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂':
          return handleTestPayment(bot, chatId, user);
      }
    }

    const state = profileStates.get(userId);
    if (state) {
      switch (state.field) {
        case 'name':
          await handleNameEdit(bot, msg, prisma, user);
          break;
        case 'phone':
          await handlePhoneEdit(bot, msg, prisma, user);
          break;
        case 'email':
          await handleEmailEdit(bot, msg, prisma, user);
          break;
        default:
          showProfile(bot, chatId, user);
      }
      return;
    }

    showProfile(bot, chatId, user);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ—Ñ–∏–ª—è:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

function showProfile(bot, chatId, user) {
  const keyboard = {
    reply_markup: {
      inline_keyboard: [
        [{ text: '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', callback_data: 'profile_edit' }],
        [{ text: 'üìÑ –ú–æ–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã', callback_data: 'profile_documents' }],
        user.role === 'contractor' ? [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å', callback_data: 'profile_status' }] : [],
        user.role === 'contractor' ? [{ text: 'üí∞ –î–æ—Ö–æ–¥', callback_data: 'profile_income' }] : [],
        [{ text: 'üîÑ –ü–æ–¥–ø–∏—Å–∫–∞', callback_data: 'profile_subscription' }],
        [{ text: 'üí≥ –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂', callback_data: 'profile_payment' }],
        [{ text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_menu' }]
      ].filter(row => row.length > 0)
    }
  };

  const documentsCount = user.documents?.length || 0;
  const verifiedDocuments = user.documents?.filter(doc => doc.status === 'verified').length || 0;

  const profileText = `
üë§ *–ü—Ä–æ—Ñ–∏–ª—å*

*–ò–º—è*: ${user.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
*–§–∞–º–∏–ª–∏—è*: ${user.lastName || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
*–¢–µ–ª–µ—Ñ–æ–Ω*: ${user.phoneNumber || '–ù–µ —É–∫–∞–∑–∞–Ω'}
*–†–æ–ª—å*: ${user.role === 'contractor' ? '–ü–æ–¥—Ä—è–¥—á–∏–∫' : '–ö–ª–∏–µ–Ω—Ç'}
*–°—Ç–∞—Ç—É—Å*: ${user.isActive ? 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' : 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}

${user.role === 'contractor' ? `
üìÑ *–î–æ–∫—É–º–µ–Ω—Ç—ã*: ${verifiedDocuments}/${documentsCount} –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ

üìç *–†–∞–¥–∏—É—Å —Ä–∞–±–æ—Ç—ã*: ${user.location?.workRadius || 10} –∫–º` : ''}

*–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è*: ${user.notificationsEnabled ? '‚úÖ' : '‚ùå'}
*–ó–≤—É–∫*: ${user.soundEnabled ? '‚úÖ' : '‚ùå'}`;

  bot.sendMessage(chatId, profileText, {
    parse_mode: 'Markdown',
    ...keyboard
  });
}

async function handleProfileCallback(bot, query, prisma) {
  const chatId = query.message.chat.id;
  const userId = query.from.id;
  const data = query.data;

  try {
    const user = await prisma.user.findFirst({
      where: {
        telegramId: BigInt(userId)
      }
    });

    if (!user) {
      await bot.answerCallbackQuery(query.id, {
        text: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
        show_alert: true
      });
      return;
    }

    switch (data) {
      case 'profile_edit':
        const editKeyboard = {
          inline_keyboard: [
            [
              { text: '‚úèÔ∏è –ò–º—è', callback_data: 'profile_edit_name' },
              { text: 'üì± –¢–µ–ª–µ—Ñ–æ–Ω', callback_data: 'profile_edit_phone' }
            ],
            [{ text: 'üìß Email', callback_data: 'profile_edit_email' }],
            [{ text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_profile' }]
          ]
        };
        await bot.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:', {
          chat_id: chatId,
          message_id: query.message.message_id,
          reply_markup: editKeyboard
        });
        break;

      case 'profile_edit_name':
        profileStates.set(userId, { field: 'name' });
        await bot.editMessageText('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:', {
          chat_id: chatId,
          message_id: query.message.message_id
        });
        break;

      case 'profile_edit_phone':
        profileStates.set(userId, { field: 'phone' });
        await bot.editMessageText('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:', {
          chat_id: chatId,
          message_id: query.message.message_id
        });
        break;

      case 'profile_edit_email':
        profileStates.set(userId, { field: 'email' });
        await bot.editMessageText('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π email:', {
          chat_id: chatId,
          message_id: query.message.message_id
        });
        break;

      case 'back_to_profile':
        profileStates.delete(userId);
        showProfile(bot, chatId, user);
        break;

      case 'profile_documents':
        await handleDocuments(bot, query.message, prisma);
        break;

      case 'profile_status':
        await handleStatusUpdate(bot, chatId, user);
        break;

      case 'profile_income':
        await handleIncome(bot, chatId, user);
        break;

      case 'profile_subscription':
        await handleSubscription(bot, chatId, user);
        break;

      case 'profile_payment':
        await handleTestPayment(bot, chatId, user);
        break;

      case 'profile_status_active':
        await prisma.user.update({
          where: { id: user.id },
          data: { isActive: true }
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
        broadcastEvent('USER_UPDATED', {
          id: user.id,
          isActive: true
        });

        await bot.editMessageText('‚úÖ –í–∞—à —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ "–ê–∫—Ç–∏–≤–µ–Ω"', {
          chat_id: chatId,
          message_id: query.message.message_id
        });
        break;

      case 'profile_status_inactive':
        await prisma.user.update({
          where: { id: user.id },
          data: { isActive: false }
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
        broadcastEvent('USER_UPDATED', {
          id: user.id,
          isActive: false
        });

        await bot.editMessageText('üî¥ –í–∞—à —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω"', {
          chat_id: chatId,
          message_id: query.message.message_id
        });
        break;
    }

    await bot.answerCallbackQuery(query.id);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback –ø—Ä–æ—Ñ–∏–ª—è:', error);
    await bot.answerCallbackQuery(query.id, {
      text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      show_alert: true
    });
  }
}

async function handleNameEdit(bot, msg, prisma, user) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const name = msg.text.trim();

  if (name.length < 2) {
    bot.sendMessage(chatId, '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
    return;
  }

  try {
    await prisma.user.update({
      where: { id: user.id },
      data: { firstName: name }
    });

    profileStates.delete(userId);
    bot.sendMessage(chatId, '‚úÖ –ò–º—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!', mainKeyboard);
    showProfile(bot, chatId, { ...user, firstName: name });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏.');
  }
}

async function handlePhoneEdit(bot, msg, prisma, user) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const phone = msg.text.trim();

  const phoneRegex = /^\+7\d{10}$/;
  if (!phoneRegex.test(phone)) {
    bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:');
    return;
  }

  try {
    await prisma.user.update({
      where: { id: user.id },
      data: { phoneNumber: phone }
    });

    profileStates.delete(userId);
    bot.sendMessage(chatId, '‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!', mainKeyboard);
    showProfile(bot, chatId, { ...user, phoneNumber: phone });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.');
  }
}

async function handleEmailEdit(bot, msg, prisma, user) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const email = msg.text.trim().toLowerCase();

  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  if (!emailRegex.test(email)) {
    bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
    return;
  }

  try {
    await prisma.user.update({
      where: { id: user.id },
      data: { email }
    });

    profileStates.delete(userId);
    bot.sendMessage(chatId, '‚úÖ Email —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!', mainKeyboard);
    showProfile(bot, chatId, { ...user, email });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ email:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ email.');
  }
}

async function handleStatusUpdate(bot, chatId, user) {
  const keyboard = {
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω', callback_data: 'profile_status_active' },
          { text: 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω', callback_data: 'profile_status_inactive' }
        ],
        [{ text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_profile' }]
      ]
    }
  };

  bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Å—Ç–∞—Ç—É—Å:', keyboard);
}

async function handleIncome(bot, chatId, user) {
  const incomeText = `
üí∞ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Ö–æ–¥–æ–≤*

–ó–∞ —Å–µ–≥–æ–¥–Ω—è: 0‚ÇΩ
–ó–∞ –Ω–µ–¥–µ–ª—é: 0‚ÇΩ
–ó–∞ –º–µ—Å—è—Ü: 0‚ÇΩ
–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è: 0‚ÇΩ

_–§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ_`;

  bot.sendMessage(chatId, incomeText, { parse_mode: 'Markdown' });
}

async function handleSubscription(bot, chatId, user) {
  const subscriptionText = `
üîÑ *–ü–æ–¥–ø–∏—Å–∫–∞*

*–¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω*: –ë–∞–∑–æ–≤—ã–π
*–°—Ç–∞—Ç—É—Å*: –ê–∫—Ç–∏–≤–Ω–∞
*–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ*: –ë–µ—Å—Å—Ä–æ—á–Ω–æ

_–§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ_`;

  bot.sendMessage(chatId, subscriptionText, { parse_mode: 'Markdown' });
}

async function handleTestPayment(bot, chatId, user) {
  const paymentText = `
üí≥ *–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂*

–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É 1‚ÇΩ.
–°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.

_–§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ_`;

  bot.sendMessage(chatId, paymentText, { parse_mode: 'Markdown' });
}

module.exports = {
  handleProfile,
  handleProfileCallback,
  profileStates
}; 