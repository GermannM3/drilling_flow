const { PrismaClient } = require('@prisma/client');
const geolib = require('geolib');

const prisma = new PrismaClient();

// –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
const mainKeyboard = {
  reply_markup: {
    keyboard: [
      ['üìã –ü—Ä–æ—Ñ–∏–ª—å', 'üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ'],
      ['üì¶ –ó–∞–∫–∞–∑—ã', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'],
      ['‚ùì –ü–æ–º–æ—â—å']
    ],
    resize_keyboard: true
  }
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async function handleStart(bot, msg) {
  const chatId = msg.chat.id;
  try {
    const user = await prisma.user.findFirst({
      where: {
        telegramId: BigInt(msg.from.id)
      }
    });

    if (!user) {
      await prisma.user.create({
        data: {
          telegramId: BigInt(msg.from.id),
          chatId: BigInt(chatId),
          firstName: msg.from.first_name,
          lastName: msg.from.last_name,
          username: msg.from.username
        }
      });
    }

    bot.sendMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DrillFlow! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤ –¥–ª—è –≤–∞—à–∏—Ö —Ä–∞–±–æ—Ç.', mainKeyboard);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
function handleHelp(bot, msg) {
  const chatId = msg.chat.id;
  const helpText = `
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/profile - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏
/location - –û–±–Ω–æ–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ

–î–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤:
- –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∑–∞–∫–∞–∑—ã
- –ù–∞—Ö–æ–¥–∏—Ç–µ –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏
- –û—Å—Ç–∞–≤–ª—è–π—Ç–µ –æ—Ç–∑—ã–≤—ã

–î–ª—è –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤:
- –ó–∞–≥—Ä—É–∂–∞–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
- –ü–æ–ª—É—á–∞–π—Ç–µ –∑–∞–∫–∞–∑—ã
- –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª–µ–º

–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.
  `;
  bot.sendMessage(chatId, helpText, mainKeyboard);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
async function handleLocation(bot, msg) {
  const chatId = msg.chat.id;
  if (msg.location) {
    try {
      const user = await prisma.user.findFirst({
        where: {
          telegramId: BigInt(msg.from.id)
        }
      });

      if (!user) {
        bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start');
        return;
      }

      const location = await prisma.location.upsert({
        where: {
          userId: user.id
        },
        update: {
          latitude: msg.location.latitude,
          longitude: msg.location.longitude
        },
        create: {
          userId: user.id,
          latitude: msg.location.latitude,
          longitude: msg.location.longitude
        }
      });

      bot.sendMessage(chatId, '–í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!', mainKeyboard);

      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø–æ–¥—Ä—è–¥—á–∏–∫, –∏—â–µ–º –±–ª–∏–∂–∞–π—à–∏–µ –∑–∞–∫–∞–∑—ã
      if (user.role === 'contractor') {
        const nearbyOrders = await findNearbyOrders(location);
        if (nearbyOrders.length > 0) {
          let message = '–ù–∞–π–¥–µ–Ω—ã –∑–∞–∫–∞–∑—ã –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏:\n\n';
          for (const order of nearbyOrders) {
            message += `üì¶ –ó–∞–∫–∞–∑ #${order.id}\n`;
            message += `üìç –ê–¥—Ä–µ—Å: ${order.address}\n`;
            message += `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${order.description}\n`;
            message += `üí∞ –¶–µ–Ω–∞: ${order.price ? order.price + ' —Ä—É–±.' : '–î–æ–≥–æ–≤–æ—Ä–Ω–∞—è'}\n\n`;
          }
          bot.sendMessage(chatId, message);
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:', error);
      bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  } else {
    const keyboard = {
      reply_markup: {
        keyboard: [
          [{ text: 'üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', request_location: true }],
          ['üîô –ù–∞–∑–∞–¥']
        ],
        resize_keyboard: true
      }
    };
    bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:', keyboard);
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤
async function findNearbyOrders(location) {
  const orders = await prisma.order.findMany({
    where: {
      status: 'pending',
      latitude: { not: null },
      longitude: { not: null }
    }
  });

  const nearbyOrders = orders.filter(order => {
    const distance = geolib.getDistance(
      { latitude: location.latitude, longitude: location.longitude },
      { latitude: order.latitude, longitude: order.longitude }
    );
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –º–µ—Ç—Ä–æ–≤ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä—ã
    return distance / 1000 <= location.workRadius;
  });

  return nearbyOrders;
}

module.exports = {
  handleStart,
  handleHelp,
  handleLocation,
  mainKeyboard
}; 