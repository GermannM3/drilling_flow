/**
 * @fileoverview –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è Telegram –±–æ—Ç–∞
 */

const { 
  getUserByTelegramId,
  updateUser 
} = require('../../utils/database');
const { handleTelegramError } = require('../../utils/errorHandler');
const { 
  getMainMenuKeyboard,
  getTestPaymentKeyboard,
  createInlineKeyboard 
} = require('../../utils/keyboards');
const { formatCurrency } = require('../../utils/common');
const config = require('../../config/default');

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "üí≥ –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂"
 * @param {TelegramBot} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
 * @param {Object} msg - –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
const handleTestPayment = async (bot, msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  try {
    const user = await getUserByTelegramId(userId);
    if (!user) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    await bot.sendMessage(chatId, `<b>üí≥ –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂</b>

–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –ø–ª–∞—Ç–µ–∂–µ–π –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞.

<b>–°—É–º–º–∞:</b> 100 ‚ÇΩ
<b>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:</b> –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ–ø–ª–∞—Ç—ã
<b>–ú–µ—Ç–æ–¥:</b> –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞

<i>–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂, —Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏ –Ω–µ –±—É–¥—É—Ç —Å–ø–∏—Å–∞–Ω—ã</i>`, {
      parse_mode: 'HTML',
      reply_markup: getTestPaymentKeyboard()
    });
  } catch (error) {
    handleTelegramError(error, { method: 'handleTestPayment', userId });
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ
 * @param {TelegramBot} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
 * @param {Object} msg - –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} plan - –¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏
 */
const handleSubscriptionPayment = async (bot, msg, plan) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  try {
    const user = await getUserByTelegramId(userId);
    if (!user) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    const { subscriptionPlans } = config.payments;
    const planData = subscriptionPlans[plan.toLowerCase()];
    
    if (!planData) {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏');
    }
    
    const keyboard = createInlineKeyboard([
      [{ text: `üí≥ –û–ø–ª–∞—Ç–∏—Ç—å ${formatCurrency(planData.price)}`, callback_data: `pay_subscription_${plan}` }],
      [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "back_to_subscription" }]
    ]);
    
    await bot.sendMessage(chatId, `<b>üí≥ –û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ "${planData.name}"</b>

<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> ${formatCurrency(planData.price)}
<b>–ü–µ—Ä–∏–æ–¥:</b> 1 –º–µ—Å—è—Ü

<b>–í–∫–ª—é—á–µ–Ω–æ –≤ —Ç–∞—Ä–∏—Ñ:</b>
${planData.features.map(feature => `‚Ä¢ ${feature}`).join('\n')}

<i>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏—Ç—å" –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ</i>`, {
      parse_mode: 'HTML',
      reply_markup: keyboard
    });
  } catch (error) {
    handleTelegramError(error, { method: 'handleSubscriptionPayment', userId, plan });
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤
 * @param {TelegramBot} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
 * @param {Object} msg - –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} method - –ú–µ—Ç–æ–¥ –≤—ã–≤–æ–¥–∞
 */
const handleWithdraw = async (bot, msg, method) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  try {
    const user = await getUserByTelegramId(userId);
    if (!user) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    if (user.finance.currentBalance <= 0) {
      await bot.sendMessage(chatId, `<b>‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</b>

–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞.`, {
        parse_mode: 'HTML',
        reply_markup: getMainMenuKeyboard()
      });
      return;
    }
    
    const amount = user.finance.currentBalance;
    const withdrawalId = 'W-' + Date.now().toString().slice(-8);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await updateUser(userId, {
      finance: {
        ...user.finance,
        currentBalance: 0,
        pendingBalance: user.finance.pendingBalance + amount
      }
    });
    
    let methodName = '';
    switch (method) {
      case 'card':
        methodName = '–±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É';
        break;
      case 'sbp':
        methodName = '–°–ë–ü';
        break;
      case 'wallet':
        methodName = '—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∫–æ—à–µ–ª–µ–∫';
        break;
    }
    
    await bot.sendMessage(chatId, `<b>‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–∏–Ω—è—Ç</b>

<b>–°—É–º–º–∞:</b> ${formatCurrency(amount)}
<b>–ú–µ—Ç–æ–¥:</b> ${methodName}
<b>ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b> ${withdrawalId}

–°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ –≤–∞—à —Å—á–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤. –°—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –º–æ–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ "–î–æ—Ö–æ–¥".`, {
      parse_mode: 'HTML',
      reply_markup: getMainMenuKeyboard()
    });
  } catch (error) {
    handleTelegramError(error, { method: 'handleWithdraw', userId, withdrawMethod: method });
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π
 * @param {TelegramBot} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
 * @param {Object} query - Callback query
 */
const handlePaymentCallback = async (bot, query) => {
  const chatId = query.message.chat.id;
  const userId = query.from.id;
  const data = query.data;
  
  try {
    await bot.answerCallbackQuery(query.id);
    
    const user = await getUserByTelegramId(userId);
    if (!user) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    if (data.startsWith('pay_test_')) {
      const amount = parseInt(data.replace('pay_test_', ''));
      await bot.sendMessage(chatId, `<b>‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É ${formatCurrency(amount)} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω</b>

–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ–ø–ª–∞—Ç—ã!

–ù–æ–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: TX-${Date.now().toString().slice(-8)}`, {
        parse_mode: 'HTML',
        reply_markup: getMainMenuKeyboard()
      });
    }
    else if (data.startsWith('pay_subscription_')) {
      const plan = data.replace('pay_subscription_', '');
      const { subscriptionPlans } = config.payments;
      const planData = subscriptionPlans[plan.toLowerCase()];
      
      if (!planData) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏');
      }
      
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω—ã–º —à–ª—é–∑–æ–º
      const now = new Date();
      const expDate = new Date(now);
      expDate.setMonth(expDate.getMonth() + 1);
      
      await updateUser(userId, {
        subscription: {
          status: 'ACTIVE',
          plan: planData.name,
          activationDate: now.toLocaleDateString('ru-RU'),
          expirationDate: expDate.toLocaleDateString('ru-RU'),
          features: planData.features
        }
      });
      
      await bot.sendMessage(chatId, `<b>‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!</b>

<b>–¢–∞—Ä–∏—Ñ:</b> ${planData.name}
<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> ${formatCurrency(planData.price)}
<b>–ü–µ—Ä–∏–æ–¥:</b> 1 –º–µ—Å—è—Ü
<b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> ${expDate.toLocaleDateString('ru-RU')}

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
${planData.features.map(feature => `‚Ä¢ ${feature}`).join('\n')}`, {
        parse_mode: 'HTML',
        reply_markup: getMainMenuKeyboard()
      });
    }
    else if (data.startsWith('withdraw_')) {
      const method = data.replace('withdraw_', '');
      await handleWithdraw(bot, query.message, method);
    }
  } catch (error) {
    handleTelegramError(error, { method: 'handlePaymentCallback', userId, data });
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

module.exports = {
  handleTestPayment,
  handleSubscriptionPayment,
  handleWithdraw,
  handlePaymentCallback
}; 