const { Markup } = require('telegraf');
const axios = require('axios');

async function handlePayment(ctx) {
  try {
    const user = await ctx.prisma.user.findFirst({
      where: {
        telegramId: BigInt(ctx.from.id)
      }
    });

    if (!user) {
      return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
    }

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üí≥ –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ (1‚ÇΩ)', 'payment_test')],
      [
        Markup.button.callback('üíé –ü—Ä–µ–º–∏—É–º (999‚ÇΩ)', 'payment_premium'),
        Markup.button.callback('üöÄ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª (1999‚ÇΩ)', 'payment_pro')
      ]
    ]);

    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞:', keyboard);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞:', error);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

async function handlePaymentCallback(bot, query, prisma) {
  const chatId = query.message.chat.id;
  const userId = query.from.id;
  const data = query.data;

  try {
    const user = await prisma.user.findFirst({
      where: {
        telegramId: BigInt(userId)
      }
    });

    if (!user) {
      await bot.answerCallbackQuery(query.id, {
        text: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
        show_alert: true
      });
      return;
    }

    let amount, description, paymentType;

    switch (data) {
      case 'payment_test':
        amount = 1;
        description = '–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂';
        paymentType = 'TEST';
        break;
      case 'payment_premium':
        amount = 999;
        description = '–ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–µ–º–∏—É–º';
        paymentType = 'PREMIUM';
        break;
      case 'payment_pro':
        amount = 1999;
        description = '–ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª';
        paymentType = 'PRO';
        break;
      default:
        return;
    }

    // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const payment = await prisma.payment.create({
      data: {
        userId: user.id,
        amount,
        status: 'PENDING',
        paymentMethod: 'CARD',
        description
      }
    });

    // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
    const paymentUrl = await createPayment(payment.id, amount, description);

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.url('üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', paymentUrl)],
      [Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'back_to_payments')]
    ]);

    await bot.editMessageText(`
üí≥ –û–ø–ª–∞—Ç–∞

–°—É–º–º–∞: ${amount}‚ÇΩ
–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: ${description}
ID –ø–ª–∞—Ç–µ–∂–∞: ${payment.id}

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ
`, {
      chat_id: chatId,
      message_id: query.message.message_id,
      reply_markup: keyboard
    });

    await bot.answerCallbackQuery(query.id);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞:', error);
    await bot.answerCallbackQuery(query.id, {
      text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      show_alert: true
    });
  }
}

async function createPayment(paymentId, amount, description) {
  // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω—ã–º —à–ª—é–∑–æ–º
  // –°–µ–π—á–∞—Å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Å—ã–ª–∫—É
  return `https://drilling-flow.vercel.app/payment/${paymentId}`;
}

async function handlePaymentWebhook(req, res) {
  try {
    const { paymentId, status, signature } = req.body;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
    if (!verifySignature(req.body, signature)) {
      return res.status(400).json({ error: 'Invalid signature' });
    }

    const payment = await prisma.payment.findUnique({
      where: { id: parseInt(paymentId) },
      include: { user: true }
    });

    if (!payment) {
      return res.status(404).json({ error: 'Payment not found' });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
    await prisma.payment.update({
      where: { id: payment.id },
      data: { status }
    });

    // –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω –∏ —ç—Ç–æ –æ–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if (status === 'COMPLETED' && (payment.description.includes('–ü—Ä–µ–º–∏—É–º') || payment.description.includes('–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª'))) {
      const subType = payment.description.includes('–ü—Ä–µ–º–∏—É–º') ? 'PREMIUM' : 'PROFESSIONAL';
      const endDate = new Date();
      endDate.setMonth(endDate.getMonth() + 1);

      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
      await prisma.subscription.upsert({
        where: { userId: payment.userId },
        update: {
          type: subType,
          endDate,
          autoRenew: true
        },
        create: {
          userId: payment.userId,
          type: subType,
          endDate,
          autoRenew: true
        }
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const bot = createBot();
      await bot.telegram.sendMessage(payment.user.telegramId, `
‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞!

üí´ –ü–æ–¥–ø–∏—Å–∫–∞ ${subType} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞
üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${endDate.toLocaleDateString()}

–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!
      `);
    }

    res.json({ success: true });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
}

function verifySignature(payload, signature) {
  // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
  return true;
}

module.exports = {
  handlePayment,
  handlePaymentCallback,
  handlePaymentWebhook
}; 