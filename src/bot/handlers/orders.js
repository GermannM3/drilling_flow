const { getOrderCreationKeyboard, getClientOrderControlKeyboard, getContractorOrderControlKeyboard } = require('../keyboards');
const { formatDate, formatOrderStatus, calculateDistance, createNotification } = require('../utils');
const { PrismaClient } = require('@prisma/client');
const { mainKeyboard } = require('./index');

const prisma = new PrismaClient();

// –°–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
const orderStates = new Map();

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫–∞–∑–æ–≤
async function handleOrders(bot, msg, prisma) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  try {
    const user = await prisma.user.findFirst({
      where: {
        telegramId: BigInt(userId)
      }
    });

    if (!user) {
      bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start');
      return;
    }

    const state = orderStates.get(userId);
    if (state) {
      switch (state.step) {
        case 'AWAITING_SERVICE':
          await handleServiceInput(bot, msg, prisma, user);
          break;
        case 'AWAITING_ADDRESS':
          await handleAddressInput(bot, msg, prisma, user);
          break;
        case 'AWAITING_DESCRIPTION':
          await handleDescriptionInput(bot, msg, prisma, user);
          break;
        default:
          showOrdersMenu(bot, chatId, user);
      }
      return;
    }

    showOrdersMenu(bot, chatId, user);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–æ–≤:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

function showOrdersMenu(bot, chatId, user) {
  const keyboard = {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑', callback_data: 'order_create' }],
        [{ text: 'üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data: 'order_list' }],
        user.role === 'contractor' ? [{ text: 'üîç –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤', callback_data: 'order_search' }] : [],
        [{ text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_menu' }]
      ].filter(row => row.length > 0)
    }
  };

  bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', keyboard);
}

async function handleOrderCallback(bot, query, prisma) {
  const chatId = query.message.chat.id;
  const userId = query.from.id;
  const data = query.data;

  try {
    const user = await prisma.user.findFirst({
      where: {
        telegramId: BigInt(userId)
      }
    });

    if (!user) {
      await bot.answerCallbackQuery(query.id, {
        text: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
        show_alert: true
      });
      return;
    }

    if (data.startsWith('order_accept_')) {
      const orderId = parseInt(data.split('_')[2]);
      const order = await prisma.order.update({
        where: { id: orderId },
        data: {
          status: 'accepted',
          contractorId: user.id
        },
        include: {
          client: true,
          contractor: true
        }
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
      broadcastEvent('ORDER_UPDATED', {
        id: order.id,
        status: order.status,
        contractor: {
          id: user.id,
          firstName: user.firstName,
          lastName: user.lastName,
          phoneNumber: user.phoneNumber
        }
      });

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
      bot.sendMessage(order.client.chatId, `
‚úÖ –í–∞—à –∑–∞–∫–∞–∑ #${order.id} –ø—Ä–∏–Ω—è—Ç!

üë§ –ü–æ–¥—Ä—è–¥—á–∏–∫: ${user.firstName} ${user.lastName || ''}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${user.phoneNumber || '–ù–µ —É–∫–∞–∑–∞–Ω'}

–ü–æ–¥—Ä—è–¥—á–∏–∫ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.
      `);
    }

    switch (data) {
      case 'order_create':
        orderStates.set(userId, { step: 'AWAITING_SERVICE' });
        const serviceKeyboard = {
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'üö∞ –ë—É—Ä–µ–Ω–∏–µ —Å–∫–≤–∞–∂–∏–Ω—ã', callback_data: 'service_drilling' },
                { text: 'üîß –†–µ–º–æ–Ω—Ç —Å–∫–≤–∞–∂–∏–Ω—ã', callback_data: 'service_repair' }
              ],
              [
                { text: 'üöø –í–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ', callback_data: 'service_water' },
                { text: 'üöΩ –ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è', callback_data: 'service_sewage' }
              ],
              [{ text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_orders' }]
            ]
          }
        };
        await bot.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å–ª—É–≥–∏:', {
          chat_id: chatId,
          message_id: query.message.message_id,
          reply_markup: serviceKeyboard
        });
        break;

      case 'order_list':
        const orders = await prisma.order.findMany({
          where: {
            OR: [
              { clientId: user.id },
              { contractorId: user.id }
            ]
          },
          orderBy: {
            createdAt: 'desc'
          },
          take: 5
        });

        if (orders.length === 0) {
          await bot.editMessageText('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.', {
            chat_id: chatId,
            message_id: query.message.message_id,
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑', callback_data: 'order_create' }],
                [{ text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_orders' }]
              ]
            }
          });
        } else {
          let message = '*–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:*\n\n';
          const keyboard = {
            inline_keyboard: []
          };

          for (const order of orders) {
            message += `üì¶ –ó–∞–∫–∞–∑ #${order.id}\n`;
            message += `üîß –£—Å–ª—É–≥–∞: ${order.serviceType}\n`;
            message += `üìç –ê–¥—Ä–µ—Å: ${order.address || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`;
            message += `üìù –°—Ç–∞—Ç—É—Å: ${getOrderStatusText(order.status)}\n\n`;

            keyboard.inline_keyboard.push([
              { text: `üì¶ –ó–∞–∫–∞–∑ #${order.id}`, callback_data: `order_view_${order.id}` }
            ]);
          }

          keyboard.inline_keyboard.push([{ text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_orders' }]);

          await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: query.message.message_id,
            parse_mode: 'Markdown',
            reply_markup: keyboard
          });
        }
        break;

      case 'order_search':
        if (user.role !== 'contractor') {
          await bot.answerCallbackQuery(query.id, {
            text: '–ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤',
            show_alert: true
          });
          return;
        }

        const location = await prisma.location.findUnique({
          where: { userId: user.id }
        });

        if (!location) {
          await bot.editMessageText('–î–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.', {
            chat_id: chatId,
            message_id: query.message.message_id,
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üìç –£–∫–∞–∑–∞—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', callback_data: 'location_set' }],
                [{ text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_orders' }]
              ]
            }
          });
          break;
        }

        const nearbyOrders = await findNearbyOrders(location);
        if (nearbyOrders.length === 0) {
          await bot.editMessageText('–ü–æ–±–ª–∏–∑–æ—Å—Ç–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.', {
            chat_id: chatId,
            message_id: query.message.message_id,
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'order_search' }],
                [{ text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_orders' }]
              ]
            }
          });
        } else {
          let message = '*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏:*\n\n';
          const keyboard = {
            inline_keyboard: []
          };

          for (const order of nearbyOrders) {
            message += `üì¶ –ó–∞–∫–∞–∑ #${order.id}\n`;
            message += `üîß –£—Å–ª—É–≥–∞: ${order.serviceType}\n`;
            message += `üìç –ê–¥—Ä–µ—Å: ${order.address}\n`;
            message += `üí∞ –¶–µ–Ω–∞: ${order.price ? order.price + ' —Ä—É–±.' : '–î–æ–≥–æ–≤–æ—Ä–Ω–∞—è'}\n\n`;

            keyboard.inline_keyboard.push([
              { text: `üì¶ –ó–∞–∫–∞–∑ #${order.id}`, callback_data: `order_view_${order.id}` }
            ]);
          }

          keyboard.inline_keyboard.push([
            { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'order_search' },
            { text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_orders' }
          ]);

          await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: query.message.message_id,
            parse_mode: 'Markdown',
            reply_markup: keyboard
          });
        }
        break;

      case 'back_to_orders':
        showOrdersMenu(bot, chatId, user);
        break;

      default:
        if (data.startsWith('service_')) {
          const service = data.replace('service_', '');
          orderStates.set(userId, {
            step: 'AWAITING_ADDRESS',
            service: service
          });
          await bot.editMessageText('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç:', {
            chat_id: chatId,
            message_id: query.message.message_id
          });
        } else if (data.startsWith('order_view_')) {
          const orderId = parseInt(data.split('_')[2]);
          const order = await prisma.order.findUnique({
            where: { id: orderId },
            include: {
              client: true,
              contractor: true
            }
          });

          if (!order) {
            await bot.answerCallbackQuery(query.id, {
              text: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω',
              show_alert: true
            });
            return;
          }

          let message = `*–ó–∞–∫–∞–∑ #${order.id}*\n\n`;
          message += `üîß –£—Å–ª—É–≥–∞: ${order.serviceType}\n`;
          message += `üìç –ê–¥—Ä–µ—Å: ${order.address}\n`;
          message += `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${order.description}\n`;
          message += `üí∞ –¶–µ–Ω–∞: ${order.price ? order.price + ' —Ä—É–±.' : '–î–æ–≥–æ–≤–æ—Ä–Ω–∞—è'}\n`;
          message += `üìÖ –°–æ–∑–¥–∞–Ω: ${formatDate(order.createdAt)}\n`;
          message += `üìä –°—Ç–∞—Ç—É—Å: ${getOrderStatusText(order.status)}\n\n`;

          if (order.contractor) {
            message += `üë§ –ü–æ–¥—Ä—è–¥—á–∏–∫: ${order.contractor.firstName} ${order.contractor.lastName || ''}\n`;
            message += `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${order.contractor.phoneNumber || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`;
          }

          const keyboard = {
            inline_keyboard: []
          };

          if (user.id === order.clientId) {
            if (order.status === 'pending') {
              keyboard.inline_keyboard.push([
                { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', callback_data: `order_cancel_${order.id}` }
              ]);
            }
          } else if (user.role === 'contractor') {
            if (order.status === 'pending') {
              keyboard.inline_keyboard.push([
                { text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑', callback_data: `order_accept_${order.id}` }
              ]);
            } else if (order.status === 'in_progress' && order.contractorId === user.id) {
              keyboard.inline_keyboard.push([
                { text: '‚ú® –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑', callback_data: `order_complete_${order.id}` }
              ]);
            }
          }

          keyboard.inline_keyboard.push([{ text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_orders' }]);

          await bot.editMessageText(message, {
            chat_id: chatId,
            message_id: query.message.message_id,
            parse_mode: 'Markdown',
            reply_markup: keyboard
          });
        }
    }

    await bot.answerCallbackQuery(query.id);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback –∑–∞–∫–∞–∑–æ–≤:', error);
    await bot.answerCallbackQuery(query.id, {
      text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      show_alert: true
    });
  }
}

async function handleServiceInput(bot, msg, prisma, user) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const service = msg.text.trim();

  const validServices = ['–ë—É—Ä–µ–Ω–∏–µ —Å–∫–≤–∞–∂–∏–Ω—ã', '–†–µ–º–æ–Ω—Ç —Å–∫–≤–∞–∂–∏–Ω—ã', '–í–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ', '–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è'];
  if (!validServices.includes(service)) {
    bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –∏–∑ —Å–ø–∏—Å–∫–∞:', {
      reply_markup: {
        keyboard: validServices.map(s => [s]),
        resize_keyboard: true,
        one_time_keyboard: true
      }
    });
    return;
  }

  orderStates.set(userId, {
    step: 'AWAITING_ADDRESS',
    service: service
  });

  bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç:');
}

async function handleAddressInput(bot, msg, prisma, user) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const address = msg.text.trim();
  const state = orderStates.get(userId);

  if (address.length < 10) {
    bot.sendMessage(chatId, '–ê–¥—Ä–µ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å:');
    return;
  }

  orderStates.set(userId, {
    ...state,
    step: 'AWAITING_DESCRIPTION',
    address: address
  });

  bot.sendMessage(chatId, '–û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:');
}

async function handleDescriptionInput(bot, msg, prisma, user) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const description = msg.text.trim();
  const state = orderStates.get(userId);

  if (description.length < 10) {
    bot.sendMessage(chatId, '–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ:');
    return;
  }

  try {
    const order = await prisma.order.create({
      data: {
        clientId: user.id,
        serviceType: state.service,
        address: state.address,
        description: description,
        status: 'pending'
      }
    });

    orderStates.delete(userId);

    const message = `
‚úÖ –ó–∞–∫–∞–∑ #${order.id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!

üîß –£—Å–ª—É–≥–∞: ${order.serviceType}
üìç –ê–¥—Ä–µ—Å: ${order.address}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${order.description}

–ú—ã –Ω–∞—á–∞–ª–∏ –ø–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞.`;

    bot.sendMessage(chatId, message, mainKeyboard);

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤
    notifyContractors(bot, prisma, order);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', mainKeyboard);
  }
}

async function notifyContractors(bot, prisma, order) {
  try {
    const contractors = await prisma.user.findMany({
      where: {
        role: 'contractor',
        isActive: true
      },
      include: {
        location: true
      }
    });

    for (const contractor of contractors) {
      if (contractor.location) {
        const distance = calculateDistance(
          order.latitude,
          order.longitude,
          contractor.location.latitude,
          contractor.location.longitude
        );

        if (distance <= contractor.location.workRadius) {
          const message = `
üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #${order.id}!

üîß –£—Å–ª—É–≥–∞: ${order.serviceType}
üìç –ê–¥—Ä–µ—Å: ${order.address}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${order.description}

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑:`;

          bot.sendMessage(contractor.chatId, message, {
            reply_markup: {
              inline_keyboard: [
                [{ text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑', callback_data: `order_accept_${order.id}` }]
              ]
            }
          });
        }
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤:', error);
  }
}

function calculateDistance(lat1, lon1, lat2, lon2) {
  const R = 6371; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö
  const dLat = toRad(lat2 - lat1);
  const dLon = toRad(lon2 - lon1);
  const a =
    Math.sin(dLat / 2) * Math.sin(dLat / 2) +
    Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *
    Math.sin(dLon / 2) * Math.sin(dLon / 2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  return R * c;
}

function toRad(value) {
  return (value * Math.PI) / 180;
}

function getOrderStatusText(status) {
  const statuses = {
    pending: '‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ä—è–¥—á–∏–∫–∞',
    accepted: '‚úÖ –ü—Ä–∏–Ω—è—Ç',
    in_progress: 'üîß –í —Ä–∞–±–æ—Ç–µ',
    completed: '‚ú® –ó–∞–≤–µ—Ä—à–µ–Ω',
    cancelled: '‚ùå –û—Ç–º–µ–Ω–µ–Ω'
  };
  return statuses[status] || status;
}

function formatDate(date) {
  return new Date(date).toLocaleString('ru-RU', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });
}

module.exports = {
  handleOrders,
  handleOrderCallback,
  orderStates
}; 