/**
 * @fileoverview –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è Telegram –±–æ—Ç–∞
 */

const { 
  getUserByTelegramId,
  getActiveOrders,
  createOrder,
  updateOrderStatus
} = require('../../utils/database');
const { handleTelegramError } = require('../../utils/errorHandler');
const { 
  getMainMenuKeyboard,
  getOrdersKeyboard,
  createInlineKeyboard 
} = require('../../utils/keyboards');
const { 
  formatOrderInfo,
  formatOrdersList 
} = require('../../utils/messages');
const { calculateDistance } = require('../../utils/common');
const config = require('../../config/default');

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "üì¶ –ó–∞–∫–∞–∑—ã"
 * @param {TelegramBot} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
 * @param {Object} msg - –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
const handleOrders = async (bot, msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  try {
    const user = await getUserByTelegramId(userId);
    if (!user) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    const orders = await getActiveOrders(userId);
    await bot.sendMessage(chatId, formatOrdersList(orders), {
      parse_mode: 'HTML',
      reply_markup: getOrdersKeyboard(orders)
    });
  } catch (error) {
    handleTelegramError(error, { method: 'handleOrders', userId });
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "üîç –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤"
 * @param {TelegramBot} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
 * @param {Object} msg - –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
const handleOrderSearch = async (bot, msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  try {
    const user = await getUserByTelegramId(userId);
    if (!user) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    const keyboard = createInlineKeyboard([
      [
        { text: "üìç –ü–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é", callback_data: "search_location" },
        { text: "üîß –ü–æ —Ç–∏–ø—É —Ä–∞–±–æ—Ç", callback_data: "search_type" }
      ],
      [
        { text: "üí∞ –ü–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏", callback_data: "search_price" },
        { text: "üïí –ü–æ —Å—Ä–æ–∫—É", callback_data: "search_deadline" }
      ],
      [
        { text: "üîÑ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã", callback_data: "search_all" }
      ],
      [
        { text: "üîô –ù–∞–∑–∞–¥", callback_data: "back_to_main" }
      ]
    ]);
    
    await bot.sendMessage(chatId, `<b>üîç –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤</b>

–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤:

‚Ä¢ –ü–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é
‚Ä¢ –ü–æ —Ç–∏–ø—É —Ä–∞–±–æ—Ç
‚Ä¢ –ü–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
‚Ä¢ –ü–æ —Å—Ä–æ–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞</i>`, {
      parse_mode: 'HTML',
      reply_markup: keyboard
    });
  } catch (error) {
    handleTelegramError(error, { method: 'handleOrderSearch', userId });
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–∫–∞–∑–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
 * @param {TelegramBot} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
 * @param {Object} msg - –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Object} orderData - –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
 */
const handleCreateOrder = async (bot, msg, orderData) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  try {
    const user = await getUserByTelegramId(userId);
    if (!user) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    const order = await createOrder({
      ...orderData,
      clientId: userId,
      status: 'PENDING'
    });
    
    await bot.sendMessage(chatId, `<b>‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>

${formatOrderInfo(order)}`, {
      parse_mode: 'HTML',
      reply_markup: getMainMenuKeyboard()
    });
    
    // –û–ø–æ–≤–µ—â–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤
    await notifyContractors(bot, order);
  } catch (error) {
    handleTelegramError(error, { method: 'handleCreateOrder', userId, orderData });
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

/**
 * –û–ø–æ–≤–µ—â–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
 * @param {TelegramBot} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
 * @param {Object} order - –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
 */
const notifyContractors = async (bot, order) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤
    const contractors = await prisma.user.findMany({
      where: {
        role: 'CONTRACTOR',
        status: '–°–≤–æ–±–æ–¥–µ–Ω',
        isActive: true
      },
      include: {
        location: true
      }
    });
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
    const nearbyContractors = contractors.filter(contractor => {
      if (!contractor.location || !order.location) return false;
      
      const distance = calculateDistance(
        contractor.location.latitude,
        contractor.location.longitude,
        order.location.latitude,
        order.location.longitude
      );
      
      return distance <= (contractor.workZone?.radius || config.geo.defaultRadius);
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    for (const contractor of nearbyContractors) {
      const keyboard = createInlineKeyboard([
        [{ text: "‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑", callback_data: `accept_order_${order.id}` }],
        [{ text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data: `decline_order_${order.id}` }]
      ]);
      
      await bot.sendMessage(contractor.telegramId, `<b>üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ –≤–∞—à–µ–º —Ä–∞–π–æ–Ω–µ!</b>

${formatOrderInfo(order)}`, {
        parse_mode: 'HTML',
        reply_markup: keyboard
      });
    }
  } catch (error) {
    handleTelegramError(error, { method: 'notifyContractors', orderId: order.id });
  }
};

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞
 * @param {TelegramBot} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
 * @param {Object} query - Callback query
 */
const handleAcceptOrder = async (bot, query) => {
  const chatId = query.message.chat.id;
  const userId = query.from.id;
  const orderId = parseInt(query.data.replace('accept_order_', ''));
  
  try {
    const user = await getUserByTelegramId(userId);
    if (!user) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    const order = await updateOrderStatus(orderId, 'ACCEPTED');
    if (!order) {
      throw new Error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –ø—Ä–∏–Ω—è—Ç');
    }
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥—Ä—è–¥—á–∏–∫–∞
    await bot.sendMessage(chatId, `<b>‚úÖ –ó–∞–∫–∞–∑ #${orderId} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç!</b>

${formatOrderInfo(order)}`, {
      parse_mode: 'HTML',
      reply_markup: getMainMenuKeyboard()
    });
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    await bot.sendMessage(order.clientId, `<b>üéâ –í–∞—à –∑–∞–∫–∞–∑ #${orderId} –ø—Ä–∏–Ω—è—Ç!</b>

–ü–æ–¥—Ä—è–¥—á–∏–∫: ${user.name}
–†–µ–π—Ç–∏–Ω–≥: ${'‚≠ê'.repeat(Math.round(user.rating))} (${user.rating.toFixed(1)})
–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: ${user.completedOrders}

${formatOrderInfo(order)}`, {
      parse_mode: 'HTML'
    });
  } catch (error) {
    handleTelegramError(error, { method: 'handleAcceptOrder', userId, orderId });
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
};

module.exports = {
  handleOrders,
  handleOrderSearch,
  handleCreateOrder,
  handleAcceptOrder
}; 