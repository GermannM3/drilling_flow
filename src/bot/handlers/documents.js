// –°–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
const documentUploadStates = new Map();

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
async function handleDocuments(bot, msg, prisma, type = 'document') {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  try {
    const user = await prisma.user.findFirst({
      where: {
        telegramId: BigInt(userId)
      },
      include: {
        documents: true
      }
    });

    if (!user) {
      bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start');
      return;
    }

    if (msg.document || msg.photo) {
      // –ü–æ–ª—É—á–∞–µ–º file_id
      const fileId = msg.document ? msg.document.file_id : msg.photo[msg.photo.length - 1].file_id;
      const fileName = msg.document ? msg.document.file_name : 'photo.jpg';

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
      await prisma.document.create({
        data: {
          userId: user.id,
          type: type,
          fileId: fileId,
          status: 'pending'
        }
      });

      bot.sendMessage(chatId, `‚úÖ –î–æ–∫—É–º–µ–Ω—Ç "${fileName}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.`);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
      const admins = await prisma.user.findMany({
        where: {
          role: 'admin'
        }
      });

      for (const admin of admins) {
        const adminMessage = `
üìÑ *–ù–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É*

*–û—Ç*: ${user.firstName} ${user.lastName} (${user.username || '–Ω–µ—Ç username'})
*–¢–∏–ø*: ${type}
*–°—Ç–∞—Ç—É—Å*: –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ`;

        bot.sendMessage(admin.chatId, adminMessage, { parse_mode: 'Markdown' });
        if (type === 'photo') {
          bot.sendPhoto(admin.chatId, fileId);
        } else {
          bot.sendDocument(admin.chatId, fileId);
        }
      }
    } else {
      const keyboard = {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ', callback_data: 'document_photo' }],
            [{ text: 'üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç', callback_data: 'document_file' }],
            [{ text: 'üìã –ú–æ–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã', callback_data: 'document_list' }],
            [{ text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_menu' }]
          ]
        }
      };

      const documentsText = `
üìÑ *–î–æ–∫—É–º–µ–Ω—Ç—ã*

*–ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤*: ${user.documents.length}
*–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ*: ${user.documents.filter(doc => doc.status === 'pending').length}
*–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ*: ${user.documents.filter(doc => doc.status === 'verified').length}
*–û—Ç–∫–ª–æ–Ω–µ–Ω–æ*: ${user.documents.filter(doc => doc.status === 'rejected').length}

_–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:_`;

      bot.sendMessage(chatId, documentsText, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
async function showDocumentsMenu(bot, chatId, user) {
  const documents = await prisma.document.findMany({
    where: { contractorId: user.contractor.id }
  });

  let message = 'üìÑ –í–∞—à–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã:\n\n';
  
  if (documents.length > 0) {
    documents.forEach((doc, index) => {
      message += `${index + 1}. ${doc.type} - ` +
                `${doc.verified ? '‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω' : '‚è≥ –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ'}\n`;
    });
  } else {
    message += '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.\n';
  }

  message += '\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:';

  const keyboard = {
    inline_keyboard: [
      [
        { text: "üì∑ –§–æ—Ç–æ —Ç–µ—Ö–Ω–∏–∫–∏", callback_data: "doc_equipment" },
        { text: "üìú –õ–∏—Ü–µ–Ω–∑–∏—è", callback_data: "doc_license" }
      ],
      [
        { text: "üè¢ –î–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏", callback_data: "doc_company" },
        { text: "üìã –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã", callback_data: "doc_certificates" }
      ],
      [
        { text: "‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data: "back_to_menu" }
      ]
    ]
  };

  await bot.sendMessage(chatId, message, { reply_markup: keyboard });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
async function handlePhotoDocument(bot, msg, prisma, user, state) {
  const chatId = msg.chat.id;
  const photoId = msg.photo[msg.photo.length - 1].file_id;

  try {
    // –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
    await prisma.document.create({
      data: {
        type: state.documentType,
        url: photoId,
        contractor: {
          connect: { id: user.contractor.id }
        }
      }
    });

    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    documentUploadStates.delete(msg.from.id);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await bot.sendMessage(chatId,
      '‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!'
    );

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    await notifyAdminsAboutNewDocument(bot, prisma, user, state.documentType);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ-–¥–æ–∫—É–º–µ–Ω—Ç–∞:', error);
    await bot.sendMessage(chatId,
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    );
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
async function handleFileDocument(bot, msg, prisma, user, state) {
  const chatId = msg.chat.id;
  const fileId = msg.document.file_id;

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    const allowedMimeTypes = ['application/pdf', 'image/jpeg', 'image/png'];
    if (!allowedMimeTypes.includes(msg.document.mime_type)) {
      await bot.sendMessage(chatId,
        '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.'
      );
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
    await prisma.document.create({
      data: {
        type: state.documentType,
        url: fileId,
        contractor: {
          connect: { id: user.contractor.id }
        }
      }
    });

    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    documentUploadStates.delete(msg.from.id);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await bot.sendMessage(chatId,
      '‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!'
    );

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    await notifyAdminsAboutNewDocument(bot, prisma, user, state.documentType);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞-–¥–æ–∫—É–º–µ–Ω—Ç–∞:', error);
    await bot.sendMessage(chatId,
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    );
  }
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ
async function notifyAdminsAboutNewDocument(bot, prisma, user, documentType) {
  try {
    const admins = await prisma.user.findMany({
      where: { role: 'ADMIN' }
    });

    const message = 
      `üìÑ –ù–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!\n\n` +
      `üë§ –ü–æ–¥—Ä—è–¥—á–∏–∫: ${user.name}\n` +
      `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone}\n` +
      `üìã –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${documentType}`;

    for (const admin of admins) {
      if (admin.telegramId) {
        await bot.sendMessage(admin.telegramId, message);
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:', error);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
async function handleDocumentCallback(bot, callbackQuery, prisma) {
  const chatId = callbackQuery.message.chat.id;
  const userId = callbackQuery.from.id;
  const data = callbackQuery.data;

  try {
    const user = await prisma.user.findUnique({
      where: { telegramId: BigInt(userId) },
      include: { contractor: true }
    });

    if (!user || user.role !== 'CONTRACTOR') {
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω',
        show_alert: true
      });
      return;
    }

    if (data.startsWith('doc_')) {
      const documentType = data.replace('doc_', '');
      documentUploadStates.set(userId, { documentType });

      await bot.editMessageText(
        `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ${getDocumentTypeDescription(documentType)}:`,
        {
          chat_id: chatId,
          message_id: callbackQuery.message.message_id
        }
      );
    }

    await bot.answerCallbackQuery(callbackQuery.id);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:', error);
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      show_alert: true
    });
  }
}

// –ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
function getDocumentTypeDescription(type) {
  const descriptions = {
    'equipment': '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤–∞—à–µ–π —Ç–µ—Ö–Ω–∏–∫–∏',
    'license': '—Ñ–æ—Ç–æ –∏–ª–∏ —Å–∫–∞–Ω –ª–∏—Ü–µ–Ω–∑–∏–∏',
    'company': '–¥–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (PDF –∏–ª–∏ —Ñ–æ—Ç–æ)',
    'certificates': '—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∏–ª–∏ –¥–∏–ø–ª–æ–º—ã'
  };
  return descriptions[type] || '–¥–æ–∫—É–º–µ–Ω—Ç';
}

module.exports = {
  handleDocuments,
  handleDocumentCallback,
  documentUploadStates
}; 