const { Markup } = require('telegraf');
const axios = require('axios');
const FormData = require('form-data');

// –°–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
const documentStates = new Map();

async function handleDocuments(ctx) {
  try {
    const user = await ctx.prisma.user.findFirst({
      where: {
        telegramId: BigInt(ctx.from.id)
      },
      include: {
        documents: true
      }
    });

    if (!user) {
      return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
    }

    const documents = user.documents || [];
    let message = 'üìÑ –í–∞—à–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã:\n\n';

    if (documents.length === 0) {
      message += '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.';
    } else {
      documents.forEach((doc, index) => {
        message += `${index + 1}. ${getDocumentTypeName(doc.type)} - ${doc.verified ? '‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω' : '‚è≥ –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ'}\n`;
      });
    }

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üìé –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–∞—Å–ø–æ—Ä—Ç', 'doc_upload_passport')],
      [Markup.button.callback('üìé –ó–∞–≥—Ä—É–∑–∏—Ç—å –ò–ù–ù', 'doc_upload_inn')],
      [Markup.button.callback('üìé –ó–∞–≥—Ä—É–∑–∏—Ç—å –°–ù–ò–õ–°', 'doc_upload_snils')],
      user.role === 'CONTRACTOR' ? [Markup.button.callback('üìé –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –ò–ü/–û–û–û', 'doc_upload_business')] : [],
      [Markup.button.callback('üóë –£–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç', 'doc_delete')]
    ].filter(row => row.length > 0));

    await ctx.reply(message, keyboard);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:', error);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

function getDocumentTypeName(type) {
  const types = {
    PASSPORT: 'üìï –ü–∞—Å–ø–æ—Ä—Ç',
    INN: 'üìó –ò–ù–ù',
    SNILS: 'üìò –°–ù–ò–õ–°',
    BUSINESS: 'üìô –î–æ–∫—É–º–µ–Ω—Ç—ã –ò–ü/–û–û–û'
  };
  return types[type] || type;
}

async function handleDocumentCallback(bot, query, prisma) {
  const chatId = query.message.chat.id;
  const userId = query.from.id;
  const data = query.data;

  try {
    const user = await prisma.user.findFirst({
      where: {
        telegramId: BigInt(userId)
      },
      include: {
        documents: true
      }
    });

    if (!user) {
      await bot.answerCallbackQuery(query.id, {
        text: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
        show_alert: true
      });
      return;
    }

    if (data.startsWith('doc_upload_')) {
      const docType = data.replace('doc_upload_', '').toUpperCase();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç
      const existingDoc = user.documents.find(doc => doc.type === docType);
      if (existingDoc) {
        await bot.answerCallbackQuery(query.id, {
          text: '–≠—Ç–æ—Ç —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–≥–æ.',
          show_alert: true
        });
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
      documentStates.set(userId, { type: docType });

      await bot.editMessageText(`
üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${getDocumentTypeName(docType)}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Å–∫–∞–Ω –¥–æ–∫—É–º–µ–Ω—Ç–∞.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG, PDF

‚ö†Ô∏è –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º:
- –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
- –í—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–µ—Ç–∫–æ –≤–∏–¥–Ω—ã
- –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –±–æ–ª–µ–µ 10 –ú–ë
      `, {
        chat_id: chatId,
        message_id: query.message.message_id,
        reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback('‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞', 'doc_cancel')]
        ])
      });
    } else if (data === 'doc_delete') {
      if (user.documents.length === 0) {
        await bot.answerCallbackQuery(query.id, {
          text: '–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤',
          show_alert: true
        });
        return;
      }

      const keyboard = Markup.inlineKeyboard(
        user.documents.map(doc => [
          Markup.button.callback(
            `üóë ${getDocumentTypeName(doc.type)}`,
            `doc_delete_${doc.id}`
          )
        ]).concat([[Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'doc_back')]])
      );

      await bot.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', {
        chat_id: chatId,
        message_id: query.message.message_id,
        reply_markup: keyboard
      });
    } else if (data.startsWith('doc_delete_')) {
      const docId = parseInt(data.replace('doc_delete_', ''));
      await prisma.document.delete({
        where: { id: docId }
      });

      await bot.answerCallbackQuery(query.id, {
        text: '–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω',
        show_alert: true
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
      await handleDocuments({ ...ctx, from: { id: userId } });
    } else if (data === 'doc_cancel') {
      documentStates.delete(userId);
      await handleDocuments({ ...ctx, from: { id: userId } });
    } else if (data === 'doc_back') {
      await handleDocuments({ ...ctx, from: { id: userId } });
    }

    await bot.answerCallbackQuery(query.id);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:', error);
    await bot.answerCallbackQuery(query.id, {
      text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      show_alert: true
    });
  }
}

async function handleDocumentUpload(ctx) {
  try {
    const userId = ctx.from.id;
    const state = documentStates.get(userId);

    if (!state) {
      return ctx.reply('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.');
    }

    const user = await ctx.prisma.user.findFirst({
      where: {
        telegramId: BigInt(userId)
      }
    });

    if (!user) {
      return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    }

    let fileId;
    if (ctx.message.photo) {
      // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ (—Å–∞–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ) —Ñ–æ—Ç–æ
      fileId = ctx.message.photo[ctx.message.photo.length - 1].file_id;
    } else if (ctx.message.document) {
      fileId = ctx.message.document.file_id;
    } else {
      return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç.');
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    const file = await ctx.telegram.getFile(fileId);
    const fileUrl = `https://api.telegram.org/file/bot${process.env.TELEGRAM_BOT_TOKEN}/${file.file_path}`;

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
    const response = await axios.get(fileUrl, { responseType: 'arraybuffer' });
    const buffer = Buffer.from(response.data);

    // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    const formData = new FormData();
    formData.append('file', buffer, {
      filename: `${state.type.toLowerCase()}_${Date.now()}.${file.file_path.split('.').pop()}`
    });

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ)
    // const uploadResponse = await axios.post('${process.env.UPLOAD_URL}/upload', formData);
    // const fileUrl = uploadResponse.data.url;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await ctx.prisma.document.create({
      data: {
        userId: user.id,
        type: state.type,
        url: fileUrl, // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç URL –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        verified: false
      }
    });

    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    documentStates.delete(userId);

    await ctx.reply(`
‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω

–¢–∏–ø: ${getDocumentTypeName(state.type)}
–°—Ç–∞—Ç—É—Å: ‚è≥ –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ

–ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ –¥–æ–∫—É–º–µ–Ω—Ç –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω.
    `);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    const admins = await ctx.prisma.user.findMany({
      where: { role: 'ADMIN' }
    });

    for (const admin of admins) {
      try {
        await ctx.telegram.sendMessage(admin.telegramId, `
üìÑ –ù–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.firstName} ${user.lastName}
ID: ${user.telegramId}
–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${getDocumentTypeName(state.type)}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:
${process.env.FRONTEND_URL}/admin/documents
        `);
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É ${admin.id}:`, error);
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

module.exports = {
  handleDocuments,
  handleDocumentCallback,
  handleDocumentUpload
}; 