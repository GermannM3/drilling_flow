const { getContractorRegistrationKeyboard } = require('../keyboards');

// –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
const registrationStates = new Map();

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async function handleRegistration(bot, msg, prisma) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const state = registrationStates.get(userId) || { step: 'NONE' };

  try {
    switch (state.step) {
      case 'NONE':
        // –ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await startRegistration(bot, msg);
        break;

      case 'AWAITING_NAME':
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏
        await handleNameInput(bot, msg, prisma, state);
        break;

      case 'AWAITING_PHONE':
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        await handlePhoneInput(bot, msg, prisma, state);
        break;

      case 'AWAITING_SPECIALIZATION':
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤)
        await handleSpecializationInput(bot, msg, prisma, state);
        break;

      case 'AWAITING_WORK_RADIUS':
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–¥–∏—É—Å–∞ —Ä–∞–±–æ—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤)
        await handleWorkRadiusInput(bot, msg, prisma, state);
        break;

      default:
        // –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ, –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ
        await startRegistration(bot, msg);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    registrationStates.delete(userId);
  }
}

// –ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async function startRegistration(bot, msg) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  registrationStates.set(userId, {
    step: 'AWAITING_NAME',
    role: 'CLIENT' // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç–∞
  });

  await bot.sendMessage(chatId, 
    '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n\n' +
    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:'
  );
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
async function handleNameInput(bot, msg, prisma, state) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const name = msg.text.trim();

  if (name.length < 2) {
    await bot.sendMessage(chatId, '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
    return;
  }

  state.name = name;
  state.step = 'AWAITING_PHONE';
  registrationStates.set(userId, state);

  await bot.sendMessage(chatId,
    '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:'
  );
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
async function handlePhoneInput(bot, msg, prisma, state) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const phone = msg.text.trim();

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  const phoneRegex = /^\+7\d{10}$/;
  if (!phoneRegex.test(phone)) {
    await bot.sendMessage(chatId,
      '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:'
    );
    return;
  }

  state.phone = phone;

  if (state.role === 'CONTRACTOR') {
    state.step = 'AWAITING_SPECIALIZATION';
    registrationStates.set(userId, state);

    await bot.sendMessage(chatId,
      '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é:',
      { reply_markup: getContractorRegistrationKeyboard() }
    );
  } else {
    // –î–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    await finishRegistration(bot, msg, prisma, state);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
async function handleSpecializationInput(bot, msg, prisma, state) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const specialization = msg.text.trim();

  state.specialization = specialization;
  state.step = 'AWAITING_WORK_RADIUS';
  registrationStates.set(userId, state);

  await bot.sendMessage(chatId,
    '–£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å —Ä–∞–±–æ—Ç—ã –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö (–æ—Ç 1 –¥–æ 100):'
  );
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ä–∞–¥–∏—É—Å–∞ —Ä–∞–±–æ—Ç—ã
async function handleWorkRadiusInput(bot, msg, prisma, state) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const radius = parseInt(msg.text.trim());

  if (isNaN(radius) || radius < 1 || radius > 100) {
    await bot.sendMessage(chatId,
      '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100:'
    );
    return;
  }

  state.workRadius = radius;
  await finishRegistration(bot, msg, prisma, state);
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async function finishRegistration(bot, msg, prisma, state) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  try {
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.create({
      data: {
        telegramId: BigInt(userId),
        name: state.name,
        phone: state.phone,
        role: state.role,
        contractor: state.role === 'CONTRACTOR' ? {
          create: {
            specialization: [state.specialization],
            workRadius: state.workRadius
          }
        } : undefined
      }
    });

    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    registrationStates.delete(userId);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const welcomeMessage = state.role === 'CONTRACTOR'
      ? '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏.'
      : '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞.';

    await bot.sendMessage(chatId, welcomeMessage);

    // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–¥—Ä—è–¥—á–∏–∫, —Å–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if (state.role === 'CONTRACTOR') {
      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
      const admins = await prisma.user.findMany({
        where: { role: 'ADMIN' }
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
      for (const admin of admins) {
        if (admin.telegramId) {
          await bot.sendMessage(admin.telegramId,
            `üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–¥—Ä—è–¥—á–∏–∫–∞!\n\n` +
            `üë§ –ò–º—è: ${user.name}\n` +
            `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone}\n` +
            `üîß –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ${state.specialization}\n` +
            `üìç –†–∞–¥–∏—É—Å —Ä–∞–±–æ—Ç—ã: ${state.workRadius} –∫–º`
          );
        }
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
    await bot.sendMessage(chatId,
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    );
  }
}

module.exports = {
  handleRegistration,
  registrationStates
}; 