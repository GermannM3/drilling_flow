const { Markup } = require('telegraf');

// –°–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
const settingsStates = new Map();

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫
async function handleSettings(ctx) {
  try {
    const user = await ctx.prisma.user.findFirst({
      where: {
        telegramId: BigInt(ctx.from.id)
      },
      include: {
        settings: true
      }
    });

    if (!user) {
      return ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if (!user.settings) {
      await ctx.prisma.settings.create({
        data: {
          userId: user.id,
          notificationsEnabled: true,
          soundEnabled: true,
          language: 'ru',
          orderRadius: 10,
          theme: 'LIGHT'
        }
      });
    }

    const settings = user.settings || {};
    const message = `
‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏

üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${settings.notificationsEnabled ? '‚úÖ' : '‚ùå'}
üîä –ó–≤—É–∫: ${settings.soundEnabled ? '‚úÖ' : '‚ùå'}
üåç –Ø–∑—ã–∫: ${getLanguageName(settings.language)}
üìç –†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞: ${settings.orderRadius} –∫–º
üé® –¢–µ–º–∞: ${settings.theme === 'LIGHT' ? '‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è' : 'üåô –¢–µ–º–Ω–∞—è'}
    `;

    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback(
          settings.notificationsEnabled ? 'üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' : 'üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
          'settings_notifications'
        )
      ],
      [
        Markup.button.callback(
          settings.soundEnabled ? 'üîá –û—Ç–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫' : 'üîä –í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫',
          'settings_sound'
        )
      ],
      [
        Markup.button.callback('üåç –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫', 'settings_language'),
        Markup.button.callback('üìç –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–¥–∏—É—Å', 'settings_radius')
      ],
      [
        Markup.button.callback(
          settings.theme === 'LIGHT' ? 'üåô –¢–µ–º–Ω–∞—è —Ç–µ–º–∞' : '‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞',
          'settings_theme'
        )
      ]
    ]);

    await ctx.reply(message, keyboard);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

function getLanguageName(code) {
  const languages = {
    ru: 'üá∑üá∫ –†—É—Å—Å–∫–∏–π',
    en: 'üá¨üáß English',
    kz: 'üá∞üáø “ö–∞–∑–∞“õ—à–∞'
  };
  return languages[code] || code;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–∫
async function handleSettingsCallback(bot, query, prisma) {
  const chatId = query.message.chat.id;
  const userId = query.from.id;
  const data = query.data;

  try {
    const user = await prisma.user.findFirst({
      where: {
        telegramId: BigInt(userId)
      },
      include: {
        settings: true
      }
    });

    if (!user || !user.settings) {
      await bot.answerCallbackQuery(query.id, {
        text: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
        show_alert: true
      });
      return;
    }

    switch (data) {
      case 'settings_notifications':
        await prisma.settings.update({
          where: { id: user.settings.id },
          data: { notificationsEnabled: !user.settings.notificationsEnabled }
        });
        break;

      case 'settings_sound':
        await prisma.settings.update({
          where: { id: user.settings.id },
          data: { soundEnabled: !user.settings.soundEnabled }
        });
        break;

      case 'settings_theme':
        await prisma.settings.update({
          where: { id: user.settings.id },
          data: { theme: user.settings.theme === 'LIGHT' ? 'DARK' : 'LIGHT' }
        });
        break;

      case 'settings_language':
        const languageKeyboard = Markup.inlineKeyboard([
          [
            Markup.button.callback('üá∑üá∫ –†—É—Å—Å–∫–∏–π', 'lang_ru'),
            Markup.button.callback('üá¨üáß English', 'lang_en')
          ],
          [Markup.button.callback('üá∞üáø “ö–∞–∑–∞“õ—à–∞', 'lang_kz')],
          [Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'settings_back')]
        ]);

        await bot.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:', {
          chat_id: chatId,
          message_id: query.message.message_id,
          reply_markup: languageKeyboard
        });
        return;

      case 'settings_radius':
        const radiusKeyboard = Markup.inlineKeyboard([
          [
            Markup.button.callback('5 –∫–º', 'radius_5'),
            Markup.button.callback('10 –∫–º', 'radius_10'),
            Markup.button.callback('20 –∫–º', 'radius_20')
          ],
          [
            Markup.button.callback('50 –∫–º', 'radius_50'),
            Markup.button.callback('100 –∫–º', 'radius_100')
          ],
          [Markup.button.callback('‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'settings_back')]
        ]);

        await bot.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤:', {
          chat_id: chatId,
          message_id: query.message.message_id,
          reply_markup: radiusKeyboard
        });
        return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    if (data.startsWith('lang_')) {
      const language = data.split('_')[1];
      await prisma.settings.update({
        where: { id: user.settings.id },
        data: { language }
      });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–¥–∏—É—Å–∞
    if (data.startsWith('radius_')) {
      const radius = parseInt(data.split('_')[1]);
      await prisma.settings.update({
        where: { id: user.settings.id },
        data: { orderRadius: radius }
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    if (data === 'settings_back' || data.startsWith('lang_') || data.startsWith('radius_')) {
      const updatedUser = await prisma.user.findFirst({
        where: { telegramId: BigInt(userId) },
        include: { settings: true }
      });

      const settings = updatedUser.settings;
      const message = `
‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏

üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${settings.notificationsEnabled ? '‚úÖ' : '‚ùå'}
üîä –ó–≤—É–∫: ${settings.soundEnabled ? '‚úÖ' : '‚ùå'}
üåç –Ø–∑—ã–∫: ${getLanguageName(settings.language)}
üìç –†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞: ${settings.orderRadius} –∫–º
üé® –¢–µ–º–∞: ${settings.theme === 'LIGHT' ? '‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è' : 'üåô –¢–µ–º–Ω–∞—è'}
      `;

      const keyboard = Markup.inlineKeyboard([
        [
          Markup.button.callback(
            settings.notificationsEnabled ? 'üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' : 'üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
            'settings_notifications'
          )
        ],
        [
          Markup.button.callback(
            settings.soundEnabled ? 'üîá –û—Ç–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫' : 'üîä –í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫',
            'settings_sound'
          )
        ],
        [
          Markup.button.callback('üåç –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫', 'settings_language'),
          Markup.button.callback('üìç –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–¥–∏—É—Å', 'settings_radius')
        ],
        [
          Markup.button.callback(
            settings.theme === 'LIGHT' ? 'üåô –¢–µ–º–Ω–∞—è —Ç–µ–º–∞' : '‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞',
            'settings_theme'
          )
        ]
      ]);

      await bot.editMessageText(message, {
        chat_id: chatId,
        message_id: query.message.message_id,
        reply_markup: keyboard
      });
    }

    await bot.answerCallbackQuery(query.id);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    await bot.answerCallbackQuery(query.id, {
      text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      show_alert: true
    });
  }
}

module.exports = {
  handleSettings,
  handleSettingsCallback,
  settingsStates
}; 