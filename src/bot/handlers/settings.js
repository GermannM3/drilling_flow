const { getSettingsKeyboard } = require('../keyboards');

// –°–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
const settingsStates = new Map();

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫
async function handleSettings(bot, msg, prisma) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  try {
    const user = await prisma.user.findFirst({
      where: {
        telegramId: BigInt(userId)
      }
    });

    if (!user) {
      bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start');
      return;
    }

    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: user.notificationsEnabled ? 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –í–∫–ª' : 'üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –í—ã–∫–ª', callback_data: 'settings_notifications' },
            { text: user.soundEnabled ? 'üîä –ó–≤—É–∫ –í–∫–ª' : 'üîá –ó–≤—É–∫ –í—ã–∫–ª', callback_data: 'settings_sound' }
          ],
          user.role === 'contractor' ? [{ text: 'üìç –†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞', callback_data: 'settings_radius' }] : [],
          [{ text: 'üì± –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', callback_data: 'settings_contacts' }],
          [{ text: 'üîê –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å', callback_data: 'settings_privacy' }],
          [{ text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_menu' }]
        ].filter(row => row.length > 0)
      }
    };

    const settingsText = `
‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*

*–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è*: ${user.notificationsEnabled ? '‚úÖ' : '‚ùå'}
*–ó–≤—É–∫*: ${user.soundEnabled ? '‚úÖ' : '‚ùå'}
${user.role === 'contractor' ? `*–†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞*: ${user.location?.workRadius || 10} –∫–º` : ''}

_–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è_`;

    bot.sendMessage(chatId, settingsText, {
      parse_mode: 'Markdown',
      ...keyboard
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–∫
async function handleSettingsCallback(bot, callbackQuery, prisma) {
  const chatId = callbackQuery.message.chat.id;
  const userId = callbackQuery.from.id;
  const data = callbackQuery.data;

  try {
    const user = await prisma.user.findUnique({
      where: { telegramId: BigInt(userId) },
      include: { contractor: true }
    });

    if (!user) {
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
        show_alert: true
      });
      return;
    }

    switch (data) {
      case 'settings_notifications':
        settingsStates.set(userId, { setting: 'notifications' });
        await bot.editMessageText(
          '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏\n\n' +
          '–û—Ç–ø—Ä–∞–≤—å—Ç–µ "–≤–∫–ª" –∏–ª–∏ "–≤—ã–∫–ª" –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏.',
          {
            chat_id: chatId,
            message_id: callbackQuery.message.message_id
          }
        );
        break;

      case 'settings_profile':
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        await handleProfileSettings(bot, callbackQuery, user);
        break;

      case 'settings_location':
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
        await handleLocationSettings(bot, callbackQuery);
        break;

      case 'settings_sound':
        settingsStates.set(userId, { setting: 'sound' });
        await bot.editMessageText(
          '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–≤—É–∫–æ–º\n\n' +
          '–û—Ç–ø—Ä–∞–≤—å—Ç–µ "–≤–∫–ª" –∏–ª–∏ "–≤—ã–∫–ª" –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–≤—É–∫–æ–≤—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏.',
          {
            chat_id: chatId,
            message_id: callbackQuery.message.message_id
          }
        );
        break;
    }

    await bot.answerCallbackQuery(callbackQuery.id);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      show_alert: true
    });
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ—Ñ–∏–ª—è
async function handleProfileSettings(bot, callbackQuery, user) {
  const chatId = callbackQuery.message.chat.id;

  const keyboard = {
    inline_keyboard: [
      [
        { text: "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data: "profile_edit_name" },
        { text: "üì± –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", callback_data: "profile_edit_phone" }
      ],
      [
        { text: "üìß –ò–∑–º–µ–Ω–∏—Ç—å email", callback_data: "profile_edit_email" }
      ],
      [
        { text: "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data: "back_to_settings" }
      ]
    ]
  };

  await bot.editMessageText(
    'üë§ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è\n\n' +
    `–ò–º—è: ${user.name}\n` +
    `–¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
    `Email: ${user.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}`,
    {
      chat_id: chatId,
      message_id: callbackQuery.message.message_id,
      reply_markup: keyboard
    }
  );
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
async function handleLocationSettings(bot, callbackQuery) {
  const chatId = callbackQuery.message.chat.id;

  const keyboard = {
    keyboard: [
      [{
        text: 'üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é',
        request_location: true
      }]
    ],
    resize_keyboard: true,
    one_time_keyboard: true
  };

  await bot.editMessageText(
    'üìç –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏\n\n' +
    '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è.',
    {
      chat_id: chatId,
      message_id: callbackQuery.message.message_id
    }
  );

  await bot.sendMessage(chatId,
    '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:',
    { reply_markup: keyboard }
  );
}

module.exports = {
  handleSettings,
  handleSettingsCallback,
  settingsStates
}; 