const TelegramBot = require('node-telegram-bot-api');
const { handleStart, handleHelp, handleLocation } = require('./handlers');
const { handleProfile, handleProfileCallback } = require('./handlers/profile');
const { handleOrders, handleOrderAccept, handleOrderCancel, handleOrderComplete } = require('./handlers/orders');
const { handleDocuments, handleDocumentCallback } = require('./handlers/documents');
const { handleSettings, handleSettingsCallback } = require('./handlers/settings');
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

function createBot() {
  const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, {
    polling: process.env.USE_POLLING === '1'
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
  bot.onText(/\/start/, (msg) => handleStart(bot, msg));
  bot.onText(/\/help/, (msg) => handleHelp(bot, msg));
  bot.onText(/\/location/, (msg) => handleLocation(bot, msg));
  bot.onText(/\/profile/, (msg) => handleProfile(bot, msg, prisma));
  bot.onText(/\/settings/, (msg) => handleSettings(bot, msg, prisma));

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
  bot.on('location', (msg) => handleLocation(bot, msg));

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  bot.on('message', async (msg) => {
    if (msg.text && !msg.text.startsWith('/')) {
      const chatId = msg.chat.id;
      try {
        switch (msg.text) {
          case 'üìã –ü—Ä–æ—Ñ–∏–ª—å':
            await handleProfile(bot, msg, prisma);
            break;
          case 'üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ':
            await handleLocation(bot, msg);
            break;
          case 'üì¶ –ó–∞–∫–∞–∑—ã':
          case 'üîç –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤':
            await handleOrders(bot, msg, prisma);
            break;
          case '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏':
            await handleSettings(bot, msg, prisma);
            break;
          case '‚ùì –ü–æ–º–æ—â—å':
            await handleHelp(bot, msg);
            break;
          case 'üîô –ù–∞–∑–∞–¥':
            await handleStart(bot, msg);
            break;
          case 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å':
          case 'üí∞ –î–æ—Ö–æ–¥':
          case 'üîÑ –ü–æ–¥–ø–∏—Å–∫–∞':
          case 'üí≥ –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂':
            await handleProfile(bot, msg, prisma, msg.text);
            break;
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
  bot.on('callback_query', async (query) => {
    const chatId = query.message.chat.id;
    try {
      const data = query.data;

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
      if (data === 'back_to_menu') {
        await handleStart(bot, query.message);
        await bot.answerCallbackQuery(query.id);
        return;
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
      if (data.startsWith('profile_')) {
        await handleProfileCallback(bot, query, prisma);
      } else if (data.startsWith('order_')) {
        const action = data.split('_')[1];
        switch (action) {
          case 'accept':
            await handleOrderAccept(bot, query, prisma);
            break;
          case 'cancel':
            await handleOrderCancel(bot, query, prisma);
            break;
          case 'complete':
            await handleOrderComplete(bot, query, prisma);
            break;
          default:
            await handleOrders(bot, query, prisma);
        }
      } else if (data.startsWith('settings_')) {
        await handleSettingsCallback(bot, query, prisma);
      } else if (data.startsWith('document_')) {
        await handleDocumentCallback(bot, query, prisma);
      } else {
        switch (data) {
          case 'profile':
            await handleProfile(bot, query.message, prisma);
            break;
          case 'orders':
            await handleOrders(bot, query.message, prisma);
            break;
          case 'settings':
            await handleSettings(bot, query.message, prisma);
            break;
          case 'help':
            await handleHelp(bot, query.message);
            break;
        }
      }

      await bot.answerCallbackQuery(query.id);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback:', error);
      bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      await bot.answerCallbackQuery(query.id, {
        text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        show_alert: true
      });
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
  bot.on('photo', async (msg) => {
    try {
      await handleDocuments(bot, msg, prisma, 'photo');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ:', error);
      bot.sendMessage(msg.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ.');
    }
  });

  bot.on('document', async (msg) => {
    try {
      await handleDocuments(bot, msg, prisma, 'document');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error);
      bot.sendMessage(msg.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  bot.on('error', (error) => {
    console.error('–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:', error);
  });

  bot.on('polling_error', (error) => {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–ª–∏–Ω–≥–µ:', error);
  });

  return bot;
}

module.exports = createBot; 