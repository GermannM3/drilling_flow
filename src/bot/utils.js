// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getUserProfileText(user) {
  let text = '';
  
  switch (user.role) {
    case 'CLIENT':
      text = `üè† <b>–ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞</b>\n\n` +
             `üë§ –ò–º—è: ${user.name}\n` +
             `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
             `üìß Email: ${user.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n` +
             `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n` +
             `- –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${await getOrdersCount(user.id)}\n` +
             `- –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: ${await getActiveOrdersCount(user.id)}`;
      break;
      
    case 'CONTRACTOR':
      const contractor = user.contractor;
      if (!contractor) break;
      
      text = `üë∑ <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–¥—Ä—è–¥—á–∏–∫–∞</b>\n\n` +
             `üë§ –ò–º—è: ${user.name}\n` +
             `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
             `üìß Email: ${user.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n` +
             `üîß –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ${contractor.specialization.join(', ')}\n` +
             `üìç –†–∞–¥–∏—É—Å —Ä–∞–±–æ—Ç—ã: ${contractor.workRadius} –∫–º\n` +
             `‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥: ${contractor.rating.toFixed(1)} (${contractor.ratingCount} –æ—Ç–∑—ã–≤–æ–≤)\n\n` +
             `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n` +
             `- –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: ${await getCompletedOrdersCount(contractor.id)}\n` +
             `- –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: ${await getActiveOrdersCount(user.id)}\n` +
             `- –û—Ç–º–µ–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: ${await getCancelledOrdersCount(contractor.id)}`;
      break;
      
    case 'ADMIN':
      text = `üë®‚Äçüíº <b>–ü—Ä–æ—Ñ–∏–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n` +
             `üë§ –ò–º—è: ${user.name}\n` +
             `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
             `üìß Email: ${user.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}`;
      break;
  }
  
  return text;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–æ–≤
async function getOrdersCount(userId) {
  try {
    const count = await prisma.order.count({
      where: { clientId: userId }
    });
    return count;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –∑–∞–∫–∞–∑–æ–≤:', error);
    return 0;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
async function getActiveOrdersCount(userId) {
  try {
    const count = await prisma.order.count({
      where: {
        OR: [
          { clientId: userId },
          { contractor: { userId: userId } }
        ],
        status: {
          in: ['NEW', 'PENDING', 'ACCEPTED', 'IN_PROGRESS']
        }
      }
    });
    return count;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤:', error);
    return 0;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
async function getCompletedOrdersCount(contractorId) {
  try {
    const count = await prisma.order.count({
      where: {
        contractorId: contractorId,
        status: 'COMPLETED'
      }
    });
    return count;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤:', error);
    return 0;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
async function getCancelledOrdersCount(contractorId) {
  try {
    const count = await prisma.order.count({
      where: {
        contractorId: contractorId,
        status: 'CANCELLED'
      }
    });
    return count;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤:', error);
    return 0;
  }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
function formatDate(date) {
  return new Date(date).toLocaleString('ru-RU', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
function formatOrderStatus(status) {
  const statusMap = {
    'NEW': 'üÜï –ù–æ–≤—ã–π',
    'PENDING': '‚è≥ –û–∂–∏–¥–∞–µ—Ç',
    'ACCEPTED': '‚úÖ –ü—Ä–∏–Ω—è—Ç',
    'IN_PROGRESS': 'üîÑ –í —Ä–∞–±–æ—Ç–µ',
    'COMPLETED': '‚ú® –í—ã–ø–æ–ª–Ω–µ–Ω',
    'CANCELLED': '‚ùå –û—Ç–º–µ–Ω–µ–Ω'
  };
  return statusMap[status] || status;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async function isAdmin(userId) {
  try {
    const user = await prisma.user.findUnique({
      where: { telegramId: BigInt(userId) }
    });
    return user?.role === 'ADMIN';
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error);
    return false;
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async function createNotification(userId, type, message) {
  try {
    await prisma.notification.create({
      data: {
        type,
        message,
        userId
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
  }
}

// –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ (–≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö)
function calculateDistance(lat1, lon1, lat2, lon2) {
  const R = 6371; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö
  const dLat = toRad(lat2 - lat1);
  const dLon = toRad(lon2 - lon1);
  const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
           Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * 
           Math.sin(dLon/2) * Math.sin(dLon/2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
  return R * c;
}

function toRad(value) {
  return value * Math.PI / 180;
}

module.exports = {
  getUserProfileText,
  getOrdersCount,
  getActiveOrdersCount,
  getCompletedOrdersCount,
  getCancelledOrdersCount,
  formatDate,
  formatOrderStatus,
  isAdmin,
  createNotification,
  calculateDistance
}; 