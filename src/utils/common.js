/**
 * @fileoverview –û–±—â–∏–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ DrillFlow
 * @module utils/common
 */

const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≥—Ä–∞–¥—É—Å—ã –≤ —Ä–∞–¥–∏–∞–Ω—ã
 * @param {number} degrees - –ó–Ω–∞—á–µ–Ω–∏–µ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö
 * @returns {number} –ó–Ω–∞—á–µ–Ω–∏–µ –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö
 */
const toRadians = (degrees) => degrees * Math.PI / 180;

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ –Ω–∞ –∫–∞—Ä—Ç–µ
 * @param {number} lat1 - –®–∏—Ä–æ—Ç–∞ –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏
 * @param {number} lon1 - –î–æ–ª–≥–æ—Ç–∞ –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏
 * @param {number} lat2 - –®–∏—Ä–æ—Ç–∞ –≤—Ç–æ—Ä–æ–π —Ç–æ—á–∫–∏
 * @param {number} lon2 - –î–æ–ª–≥–æ—Ç–∞ –≤—Ç–æ—Ä–æ–π —Ç–æ—á–∫–∏
 * @returns {number} –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö
 */
const calculateDistance = (lat1, lon1, lat2, lon2) => {
  const R = 6371; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–º
  const dLat = toRadians(lat2 - lat1);
  const dLon = toRadians(lon2 - lon1);
  
  const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
    Math.cos(toRadians(lat1)) * Math.cos(toRadians(lat2)) *
    Math.sin(dLon/2) * Math.sin(dLon/2);
  
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
  return R * c;
};

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ–Ω–µ–∂–Ω—É—é —Å—É–º–º—É
 * @param {number} amount - –°—É–º–º–∞
 * @param {string} [currency='‚ÇΩ'] - –í–∞–ª—é—Ç–∞
 * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
 */
const formatCurrency = (amount, currency = '‚ÇΩ') => {
  return `${amount.toLocaleString('ru-RU')} ${currency}`;
};

/**
 * –°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—É—é inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
 * @param {Array<Array<{text: string, callback_data: string}>>} buttons - –ú–∞—Å—Å–∏–≤ –∫–Ω–æ–ø–æ–∫
 * @returns {Object} –û–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è Telegram
 */
const createInlineKeyboard = (buttons) => ({
  inline_keyboard: buttons
});

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –≤ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
 * @param {Date} date - –î–∞—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞
 */
const formatDate = (date) => {
  return date.toLocaleDateString('ru-RU', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric'
  });
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ –¥–ª—è —á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã—Ö
 * @param {number} count - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
 * @param {Array<string>} words - –ú–∞—Å—Å–∏–≤ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å–ª–æ–≤–∞ [–æ–¥–∏–Ω, –¥–≤–∞-—á–µ—Ç—ã—Ä–µ, –º–Ω–æ–≥–æ]
 * @returns {string} –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞ —Å–ª–æ–≤–∞
 */
const getWordForm = (count, words) => {
  const cases = [2, 0, 1, 1, 1, 2];
  return words[
    count % 100 > 4 && count % 100 < 20 
      ? 2 
      : cases[Math.min(count % 10, 5)]
  ];
};

/**
 * –°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
 * @returns {Object} –û–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
 */
const getBackToMainKeyboard = () => createInlineKeyboard([
  [{ text: "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "back_to_main" }]
]);

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å email
 * @param {string} email - Email –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns {boolean} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
 */
const isValidEmail = (email) => {
  const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return re.test(email);
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
 * @param {string} phone - –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
 * @returns {boolean} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
 */
const isValidPhone = (phone) => {
  const re = /^(\+7|8)?[\s-]?\(?[489][0-9]{2}\)?[\s-]?[0-9]{3}[\s-]?[0-9]{2}[\s-]?[0-9]{2}$/;
  return re.test(phone);
};

/**
 * –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
 * @param {Error} error - –û–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏
 * @param {Object} context - –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
 */
const logError = (error, context = {}) => {
  console.error('‚ùå –û—à–∏–±–∫–∞:', {
    message: error.message,
    stack: error.stack,
    timestamp: new Date().toISOString(),
    ...context
  });
};

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
 * @param {Function} operation - –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
 * @param {Object} errorContext - –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–∫–∏
 * @returns {Promise<*>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
 */
const safeDbOperation = async (operation, errorContext = {}) => {
  try {
    return await operation();
  } catch (error) {
    logError(error, errorContext);
    return null;
  }
};

module.exports = {
  calculateDistance,
  formatCurrency,
  createInlineKeyboard,
  formatDate,
  getWordForm,
  getBackToMainKeyboard,
  isValidEmail,
  isValidPhone,
  logError,
  safeDbOperation
}; 