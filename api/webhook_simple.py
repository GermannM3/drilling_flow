from http.server import BaseHTTPRequestHandler
import json
import os
import urllib.request
import urllib.parse
import traceback
import uuid
# –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è Stripe
# import stripe
# from api.stripe_subscription import create_customer, create_payment_link, check_subscription_status

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Stripe API (–∑–∞–≥–ª—É—à–∫–∞)
# stripe_api_key = os.getenv("STRIPE_API_KEY", "")
# stripe.api_key = stripe_api_key

# –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
subscription_cache = {}

def check_subscription_status(user_id):
    """–ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    return user_id in subscription_cache and subscription_cache[user_id].get("active", False)

class handler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header('Content-type', 'application/json')
        self.end_headers()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ–±—Ö—É–∫–µ
        token = os.getenv("TELEGRAM_TOKEN", "")
        webhook_url = f"https://{os.getenv('BOT_WEBHOOK_DOMAIN', 'drilling-flow.vercel.app')}/webhook"
        
        response_data = {
            "status": "webhook endpoint is working",
            "webhook_url": webhook_url
        }
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ–±—Ö—É–∫–µ –æ—Ç Telegram
        try:
            url = f"https://api.telegram.org/bot{token}/getWebhookInfo"
            with urllib.request.urlopen(url) as response:
                webhook_info = json.loads(response.read().decode())
                response_data["current_webhook"] = webhook_info.get("result", {}).get("url", "")
                response_data["pending_updates"] = webhook_info.get("result", {}).get("pending_update_count", 0)
        except Exception as e:
            response_data["error"] = str(e)
        
        self.wfile.write(json.dumps(response_data).encode())
    
    def do_POST(self):
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
        content_length = int(self.headers['Content-Length'])
        post_data = self.rfile.read(content_length)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        self.send_response(200)
        self.send_header('Content-type', 'text/plain')
        self.end_headers()
        self.wfile.write('OK'.encode())
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        try:
            update = json.loads(post_data.decode())
            print(f"Received update: {update}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
            token = os.getenv("TELEGRAM_TOKEN", "")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
            if "message" in update and "text" in update["message"]:
                chat_id = update["message"]["chat"]["id"]
                text = update["message"]["text"]
                user_name = update["message"]["from"].get("first_name", "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
                user_id = update["message"]["from"]["id"]
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–º–∞–Ω–¥—ã
                if text == "/start":
                    response_text = f"–ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DrillFlow - –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—É—Ä–æ–≤—ã–º–∏ —Ä–∞–±–æ—Ç–∞–º–∏.\n\nüîπ –ó–∞–∫–∞–∑—á–∏–∫–∏ –º–æ–≥—É—Ç —Ä–∞–∑–º–µ—â–∞—Ç—å –∑–∞–∫–∞–∑—ã\nüîπ –ü–æ–¥—Ä—è–¥—á–∏–∫–∏ –º–æ–≥—É—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã\nüîπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤"
                    
                    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (reply keyboard)
                    reply_keyboard = {
                        "keyboard": [
                            [
                                {"text": "üìã –ü—Ä–æ—Ñ–∏–ª—å"},
                                {"text": "üì¶ –ó–∞–∫–∞–∑—ã"}
                            ],
                            [
                                {"text": "‚ùì –ü–æ–º–æ—â—å"},
                                {"text": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"}
                            ],
                            [
                                {"text": "üí≥ –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂"},
                                {"text": "üîÑ –ü–æ–¥–ø–∏—Å–∫–∞"}
                            ]
                        ],
                        "resize_keyboard": True,
                        "persistent": True
                    }
                    
                    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
                    inline_keyboard = {
                        "inline_keyboard": [
                            [
                                {"text": "üìã –ü—Ä–æ—Ñ–∏–ª—å", "callback_data": "profile"},
                                {"text": "üì¶ –ó–∞–∫–∞–∑—ã", "callback_data": "orders"}
                            ],
                            [
                                {"text": "‚ùì –ü–æ–º–æ—â—å", "callback_data": "help"},
                                {"text": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "callback_data": "stats"}
                            ],
                            [
                                {"text": "üí≥ –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂", "callback_data": "payment"}
                            ],
                            [
                                {"text": "üîÑ –ü–æ–¥–ø–∏—Å–∫–∞", "callback_data": "subscription"}
                            ]
                        ]
                    }
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                    send_url = f"https://api.telegram.org/bot{token}/sendMessage"
                    data = {
                        "chat_id": chat_id,
                        "text": response_text,
                        "parse_mode": "HTML",
                        "reply_markup": reply_keyboard
                    }
                    
                    req = urllib.request.Request(
                        send_url,
                        data=json.dumps(data).encode('utf-8'),
                        headers={'Content-Type': 'application/json'}
                    )
                    
                    with urllib.request.urlopen(req) as response:
                        result = json.loads(response.read().decode())
                        print(f"Message with keyboard sent: {result}")
                    
                    return
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ —Å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
                elif text == "üìã –ü—Ä–æ—Ñ–∏–ª—å" or text == "/profile":
                    response_text = f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}\nID: {update['message']['from']['id']}\n–°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω"
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
                    has_subscription = False
                    try:
                        subscription_status = check_subscription_status(user_id)
                        if isinstance(subscription_status, bool):
                            has_subscription = subscription_status
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
                    
                    if has_subscription:
                        response_text += "\n\n‚úÖ –£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!"
                    else:
                        response_text += "\n\n‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscription –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è."
                
                elif text == "üì¶ –ó–∞–∫–∞–∑—ã" or text == "/orders":
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
                    has_subscription = False
                    try:
                        subscription_status = check_subscription_status(user_id)
                        if isinstance(subscription_status, bool):
                            has_subscription = subscription_status
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
                        
                    if has_subscription:
                        response_text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤."
                    else:
                        response_text = "‚ùå –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–∫–∞–∑–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscription –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è."
                
                elif text == "‚ùì –ü–æ–º–æ—â—å" or text == "/help":
                    response_text = "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n/profile - –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n/orders - –≤–∞—à–∏ –∑–∞–∫–∞–∑—ã\n/payment - —Å–¥–µ–ª–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂\n/subscription - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π"
                
                elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
                    response_text = "–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–ó–∞–∫–∞–∑–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: 0\n–†–µ–π—Ç–∏–Ω–≥: ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê"
                
                elif text == "üí≥ –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂" or text == "/payment":
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
                    self.show_payment_options(token, chat_id)
                    return
                
                elif text == "üîÑ –ü–æ–¥–ø–∏—Å–∫–∞" or text == "/subscription":
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
                    has_subscription = False
                    try:
                        subscription_status = check_subscription_status(user_id)
                        if isinstance(subscription_status, bool):
                            has_subscription = subscription_status
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
                    
                    if has_subscription:
                        response_text = "‚úÖ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!\n\n–í–∞—à —Å—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω\n–¢–∏–ø: –ú–µ—Å—è—á–Ω–∞—è\n\n–ü–æ–¥–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç—Å—è –≤ –∫–æ–Ω—Ü–µ –ø–µ—Ä–∏–æ–¥–∞."
                    else:
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
                        self.show_subscription_options(token, chat_id, user_id, user_name)
                        return
                
                else:
                    response_text = f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {text}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                send_url = f"https://api.telegram.org/bot{token}/sendMessage"
                data = {
                    "chat_id": chat_id,
                    "text": response_text,
                    "parse_mode": "HTML"
                }
                
                req = urllib.request.Request(
                    send_url,
                    data=json.dumps(data).encode('utf-8'),
                    headers={'Content-Type': 'application/json'}
                )
                
                with urllib.request.urlopen(req) as response:
                    result = json.loads(response.read().decode())
                    print(f"Message sent: {result}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤ –æ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
            elif "callback_query" in update:
                callback_id = update["callback_query"]["id"]
                chat_id = update["callback_query"]["message"]["chat"]["id"]
                data = update["callback_query"]["data"]
                user_name = update["callback_query"]["from"].get("first_name", "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
                user_id = update["callback_query"]["from"]["id"]
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–±—ç–∫–∞
                if data == "profile":
                    response_text = f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}\nID: {update['callback_query']['from']['id']}\n–°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω"
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
                    has_subscription = False
                    try:
                        subscription_status = check_subscription_status(user_id)
                        if isinstance(subscription_status, bool):
                            has_subscription = subscription_status
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
                    
                    if has_subscription:
                        response_text += "\n\n‚úÖ –£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!"
                    else:
                        response_text += "\n\n‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscription –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è."
                    
                elif data == "orders":
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
                    has_subscription = False
                    try:
                        subscription_status = check_subscription_status(user_id)
                        if isinstance(subscription_status, bool):
                            has_subscription = subscription_status
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
                        
                    if has_subscription:
                        response_text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤."
                    else:
                        response_text = "‚ùå –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–∫–∞–∑–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscription –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è."
                
                elif data == "help":
                    response_text = "–†–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏. –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º."
                elif data == "stats":
                    response_text = "–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–ó–∞–∫–∞–∑–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: 0\n–†–µ–π—Ç–∏–Ω–≥: ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê"
                elif data == "payment":
                    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫
                    self.answer_callback_query(token, callback_id)
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
                    self.show_payment_options(token, chat_id)
                    return
                elif data == "payment_paymaster":
                    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫
                    self.answer_callback_query(token, callback_id)
                    # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ PayMaster
                    self.send_invoice(token, chat_id, "paymaster")
                    return
                elif data == "payment_redsys":
                    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫
                    self.answer_callback_query(token, callback_id)
                    # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ Redsys
                    self.send_invoice(token, chat_id, "redsys")
                    return
                elif data == "subscription":
                    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫
                    self.answer_callback_query(token, callback_id)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
                    has_subscription = False
                    try:
                        subscription_status = check_subscription_status(user_id)
                        if isinstance(subscription_status, bool):
                            has_subscription = subscription_status
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
                    
                    if has_subscription:
                        response_text = "‚úÖ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞!\n\n–í–∞—à —Å—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω\n–¢–∏–ø: –ú–µ—Å—è—á–Ω–∞—è\n\n–ü–æ–¥–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç—Å—è –≤ –∫–æ–Ω—Ü–µ –ø–µ—Ä–∏–æ–¥–∞."
                    else:
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
                        self.show_subscription_options(token, chat_id, user_id, user_name)
                        return
                
                elif data == "subscribe_stripe":
                    # –£–¥–∞–ª—è–µ–º —ç—Ç—É –æ–ø—Ü–∏—é, —Ç–∞–∫ –∫–∞–∫ Stripe –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –†–æ—Å—Å–∏–∏
                    self.answer_callback_query(token, callback_id)
                    response_text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, Stripe –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –†–æ—Å—Å–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã."
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    send_url = f"https://api.telegram.org/bot{token}/sendMessage"
                    data = {
                        "chat_id": chat_id,
                        "text": response_text,
                        "parse_mode": "HTML"
                    }
                    
                    req = urllib.request.Request(
                        send_url,
                        data=json.dumps(data).encode('utf-8'),
                        headers={'Content-Type': 'application/json'}
                    )
                    
                    with urllib.request.urlopen(req) as response:
                        result = json.loads(response.read().decode())
                        print(f"Message sent: {result}")
                
                elif data == "subscribe_paymaster":
                    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫
                    self.answer_callback_query(token, callback_id)
                    
                    try:
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –ø–æ–¥–ø–∏—Å–∫–∏
                        subscription_id = f"paymaster_{str(uuid.uuid4())}"
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –≤ –∫—ç—à
                        subscription_cache[user_id] = {
                            "subscription_id": subscription_id,
                            "active": True,
                            "provider": "PayMaster"
                        }
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ PayMaster
                        self.send_invoice(token, chat_id, "paymaster", is_subscription=True)
                    except Exception as e:
                        response_text = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {str(e)}"
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        send_url = f"https://api.telegram.org/bot{token}/sendMessage"
                        data = {
                            "chat_id": chat_id,
                            "text": response_text,
                            "parse_mode": "HTML"
                        }
                        
                        req = urllib.request.Request(
                            send_url,
                            data=json.dumps(data).encode('utf-8'),
                            headers={'Content-Type': 'application/json'}
                        )
                        
                        with urllib.request.urlopen(req) as response:
                            result = json.loads(response.read().decode())
                            print(f"Message sent: {result}")
                
                elif data == "subscribe_redsys":
                    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫
                    self.answer_callback_query(token, callback_id)
                    
                    try:
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –ø–æ–¥–ø–∏—Å–∫–∏
                        subscription_id = f"redsys_{str(uuid.uuid4())}"
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –≤ –∫—ç—à
                        subscription_cache[user_id] = {
                            "subscription_id": subscription_id,
                            "active": True,
                            "provider": "Redsys"
                        }
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ Redsys
                        self.send_invoice(token, chat_id, "redsys", is_subscription=True)
                    except Exception as e:
                        response_text = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {str(e)}"
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        send_url = f"https://api.telegram.org/bot{token}/sendMessage"
                        data = {
                            "chat_id": chat_id,
                            "text": response_text,
                            "parse_mode": "HTML"
                        }
                        
                        req = urllib.request.Request(
                            send_url,
                            data=json.dumps(data).encode('utf-8'),
                            headers={'Content-Type': 'application/json'}
                        )
                        
                        with urllib.request.urlopen(req) as response:
                            result = json.loads(response.read().decode())
                            print(f"Message sent: {result}")
                
                else:
                    response_text = f"–í—ã–±—Ä–∞–Ω–æ: {data}"
                
                # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∏
                if data not in ["payment", "payment_paymaster", "payment_redsys", "subscription", "subscribe_stripe", "subscribe_paymaster", "subscribe_redsys"]:
                    self.answer_callback_query(token, callback_id)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                send_url = f"https://api.telegram.org/bot{token}/sendMessage"
                data = {
                    "chat_id": chat_id,
                    "text": response_text,
                    "parse_mode": "HTML"
                }
                
                req = urllib.request.Request(
                    send_url,
                    data=json.dumps(data).encode('utf-8'),
                    headers={'Content-Type': 'application/json'}
                )
                
                with urllib.request.urlopen(req) as response:
                    result = json.loads(response.read().decode())
                    print(f"Message sent: {result}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ pre-checkout –∑–∞–ø—Ä–æ—Å–æ–≤ - –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π
            elif "pre_checkout_query" in update:
                pre_checkout_query_id = update["pre_checkout_query"]["id"]
                
                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–∞
                answer_url = f"https://api.telegram.org/bot{token}/answerPreCheckoutQuery"
                answer_data = {
                    "pre_checkout_query_id": pre_checkout_query_id,
                    "ok": True
                }
                
                req = urllib.request.Request(
                    answer_url,
                    data=json.dumps(answer_data).encode('utf-8'),
                    headers={'Content-Type': 'application/json'}
                )
                
                with urllib.request.urlopen(req) as response:
                    result = json.loads(response.read().decode())
                    print(f"Pre-checkout query answered: {result}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
            elif "message" in update and "successful_payment" in update["message"]:
                chat_id = update["message"]["chat"]["id"]
                payment_info = update["message"]["successful_payment"]
                user_id = update["message"]["from"]["id"]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —ç—Ç–æ –æ–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏
                payload = payment_info.get("invoice_payload", "")
                is_subscription = payload.startswith("subscription_")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
                payment_amount = payment_info["total_amount"] / 100  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –≤–∞–ª—é—Ç—É (–∫–æ–ø–µ–π–∫–∏ -> —Ä—É–±–ª–∏)
                payment_currency = payment_info["currency"]
                
                if is_subscription:
                    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    subscription_cache[user_id] = {
                        "active": True,
                        "subscription_id": payload,
                        "payment_id": payment_info['telegram_payment_charge_id']
                    }
                    
                    response_text = f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!\n\n"
                    response_text += f"–°—É–º–º–∞: {payment_amount} {payment_currency}\n"
                    response_text += f"–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞—Ç–µ–∂–∞: {payment_info['telegram_payment_charge_id']}\n\n"
                    response_text += f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞. –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ DrillFlow."
                else:
                    response_text = f"‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!\n\n"
                    response_text += f"–°—É–º–º–∞: {payment_amount} {payment_currency}\n"
                    response_text += f"–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞—Ç–µ–∂–∞: {payment_info['telegram_payment_charge_id']}\n\n"
                    response_text += f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É."
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                send_url = f"https://api.telegram.org/bot{token}/sendMessage"
                data = {
                    "chat_id": chat_id,
                    "text": response_text,
                    "parse_mode": "HTML"
                }
                
                req = urllib.request.Request(
                    send_url,
                    data=json.dumps(data).encode('utf-8'),
                    headers={'Content-Type': 'application/json'}
                )
                
                with urllib.request.urlopen(req) as response:
                    result = json.loads(response.read().decode())
                    print(f"Payment confirmation sent: {result}")
                
        except Exception as e:
            print(f"Error processing update: {e}")
            print(traceback.format_exc())
    
    def answer_callback_query(self, token, callback_query_id):
        """–û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query"""
        answer_url = f"https://api.telegram.org/bot{token}/answerCallbackQuery"
        answer_data = {
            "callback_query_id": callback_query_id
        }
        
        req = urllib.request.Request(
            answer_url,
            data=json.dumps(answer_data).encode('utf-8'),
            headers={'Content-Type': 'application/json'}
        )
        
        with urllib.request.urlopen(req) as response:
            result = json.loads(response.read().decode())
            print(f"Callback answered: {result}")
    
    def show_payment_options(self, token, chat_id):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        message_text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –æ–ø–ª–∞—Ç—ã:"
        
        keyboard = {
            "inline_keyboard": [
                [
                    {"text": "PayMaster Test", "callback_data": "payment_paymaster"}
                ],
                [
                    {"text": "Redsys Test", "callback_data": "payment_redsys"}
                ]
            ]
        }
        
        send_url = f"https://api.telegram.org/bot{token}/sendMessage"
        data = {
            "chat_id": chat_id,
            "text": message_text,
            "reply_markup": keyboard
        }
        
        req = urllib.request.Request(
            send_url,
            data=json.dumps(data).encode('utf-8'),
            headers={'Content-Type': 'application/json'}
        )
        
        with urllib.request.urlopen(req) as response:
            result = json.loads(response.read().decode())
            print(f"Payment options sent: {result}")
    
    def show_subscription_options(self, token, chat_id, user_id, user_name):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
        message_text = "üí≥ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ DrillFlow\n\n"
        message_text += "–° –ø–æ–¥–ø–∏—Å–∫–æ–π –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n"
        message_text += "‚úÖ –î–æ—Å—Ç—É–ø –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º\n"
        message_text += "‚úÖ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤\n"
        message_text += "‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É\n\n"
        message_text += "–°—Ç–æ–∏–º–æ—Å—Ç—å: 499 —Ä—É–±./–º–µ—Å—è—Ü\n\n"
        message_text += "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
        
        keyboard = {
            "inline_keyboard": [
                [
                    {"text": "–ü–æ–¥–ø–∏—Å–∫–∞ —á–µ—Ä–µ–∑ PayMaster", "callback_data": "subscribe_paymaster"}
                ],
                [
                    {"text": "–ü–æ–¥–ø–∏—Å–∫–∞ —á–µ—Ä–µ–∑ Redsys", "callback_data": "subscribe_redsys"}
                ]
            ]
        }
        
        send_url = f"https://api.telegram.org/bot{token}/sendMessage"
        data = {
            "chat_id": chat_id,
            "text": message_text,
            "parse_mode": "HTML",
            "reply_markup": keyboard
        }
        
        req = urllib.request.Request(
            send_url,
            data=json.dumps(data).encode('utf-8'),
            headers={'Content-Type': 'application/json'}
        )
        
        with urllib.request.urlopen(req) as response:
            result = json.loads(response.read().decode())
            print(f"Subscription options sent: {result}")
    
    def send_invoice(self, token, chat_id, provider="paymaster", is_subscription=False):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É"""
        # –°–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
        payment_id = str(uuid.uuid4())
        
        # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç
        invoice_url = f"https://api.telegram.org/bot{token}/sendInvoice"
        
        # –í—ã–±–µ—Ä–µ–º –ø–ª–∞—Ç–µ–∂–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        if provider == "redsys":
            # Redsys Test
            provider_token = "2051251535:TEST:OTk5MDA4ODgxLTAwNQ"
            provider_name = "Redsys"
        else:
            # PayMaster Test (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            provider_token = "1744374395:TEST:115e73e15f41dc0a68e0"
            provider_name = "PayMaster"
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–ª–∞—Ç–µ–∂–∞
        if is_subscription:
            title = f"–ü–æ–¥–ø–∏—Å–∫–∞ DrillFlow ({provider_name})"
            description = f"–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ DrillFlow —á–µ—Ä–µ–∑ {provider_name}. –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 –¥–Ω–µ–π."
            amount = 49900  # 499 —Ä—É–±–ª–µ–π –≤ –∫–æ–ø–µ–π–∫–∞—Ö
            payload = f"subscription_{provider}_{payment_id}"
        else:
            title = f"–¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ DrillFlow ({provider_name})"
            description = f"–¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥ –±—É—Ä–µ–Ω–∏—è —á–µ—Ä–µ–∑ {provider_name}. –≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏."
            amount = 50000  # 500 —Ä—É–±–ª–µ–π –≤ –∫–æ–ø–µ–π–∫–∞—Ö
            payload = f"test_payment_{provider}_{payment_id}"
            
        prices = [
            {
                "label": "–£—Å–ª—É–≥–∏ DrillFlow",
                "amount": amount
            }
        ]
        
        invoice_data = {
            "chat_id": chat_id,
            "title": title,
            "description": description,
            "payload": payload,
            "provider_token": provider_token,
            "currency": "RUB",
            "prices": prices,
            "max_tip_amount": 10000,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —á–∞–µ–≤—ã–µ - 100 —Ä—É–±–ª–µ–π
            "suggested_tip_amounts": [5000, 10000],  # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ —á–∞–µ–≤—ã–µ - 50 –∏ 100 —Ä—É–±–ª–µ–π
            "start_parameter": f"payment_{provider}_{payment_id}",
            "need_name": True,  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            "need_phone_number": True,  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            "need_email": True,  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º email
            "need_shipping_address": False,  # –ù–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
            "is_flexible": False  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞
        }
        
        req = urllib.request.Request(
            invoice_url,
            data=json.dumps(invoice_data).encode('utf-8'),
            headers={'Content-Type': 'application/json'}
        )
        
        try:
            with urllib.request.urlopen(req) as response:
                result = json.loads(response.read().decode())
                print(f"Invoice sent via {provider_name}: {result}")
        except Exception as e:
            print(f"Error sending invoice via {provider_name}: {e}")
            print(traceback.format_exc())
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞ —á–µ—Ä–µ–∑ {provider_name}: {str(e)}"
            send_url = f"https://api.telegram.org/bot{token}/sendMessage"
            data = {
                "chat_id": chat_id,
                "text": error_message
            }
            
            req = urllib.request.Request(
                send_url,
                data=json.dumps(data).encode('utf-8'),
                headers={'Content-Type': 'application/json'}
            )
            
            with urllib.request.urlopen(req) as response:
                result = json.loads(response.read().decode())
                print(f"Error message sent: {result}") 