from http.server import BaseHTTPRequestHandler
import json
import os
import urllib.request
import urllib.parse
import traceback
import urllib
import uuid
import time
import sys
import importlib.util
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–∞—Ç–∞–ª–æ–≥ –≤ sys.path –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
current_dir = os.path.dirname(os.path.abspath(__file__))
if current_dir not in sys.path:
    sys.path.append(current_dir)

# –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è Stripe
# import stripe
# from api.stripe_subscription import create_customer, create_payment_link, check_subscription_status

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Stripe API (–∑–∞–≥–ª—É—à–∫–∞)
# stripe_api_key = os.getenv("STRIPE_API_KEY", "")
# stripe.api_key = stripe_api_key

# –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
subscription_cache = {}

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –≤ —Å–ª—É—á–∞–µ –ø—Ä–æ–±–ª–µ–º
try:
    from contractor_handlers import (
        start_registration,
        process_registration_step,
        handle_registration_callback,
        handle_document_upload,
        handle_location,
        show_contractor_profile,
        RegistrationState,
        user_states
    )
except ImportError:
    # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
    handler_path = os.path.join(current_dir, "contractor_handlers.py")
    if os.path.exists(handler_path):
        spec = importlib.util.spec_from_file_location("contractor_handlers", handler_path)
        contractor_handlers = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(contractor_handlers)
        start_registration = contractor_handlers.start_registration
        process_registration_step = contractor_handlers.process_registration_step
        handle_registration_callback = contractor_handlers.handle_registration_callback
        handle_document_upload = contractor_handlers.handle_document_upload
        handle_location = contractor_handlers.handle_location
        show_contractor_profile = contractor_handlers.show_contractor_profile
        RegistrationState = contractor_handlers.RegistrationState
        user_states = contractor_handlers.user_states
    else:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ contractor_handlers.py –≤ {current_dir}")
        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π
        async def start_registration(*args, **kwargs): pass
        async def process_registration_step(*args, **kwargs): pass
        async def handle_registration_callback(*args, **kwargs): pass
        async def handle_document_upload(*args, **kwargs): pass
        async def handle_location(*args, **kwargs): pass
        async def show_contractor_profile(*args, **kwargs): pass
        class RegistrationState:
            IDLE = "IDLE"
        user_states = {}

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
try:
    from order_handlers import (
        distribute_order,
        offer_order_to_contractor,
        handle_order_response,
        show_contractor_orders,
        show_order_details,
        update_order_status,
        OrderStatus
    )
except ImportError:
    # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
    handler_path = os.path.join(current_dir, "order_handlers.py")
    if os.path.exists(handler_path):
        spec = importlib.util.spec_from_file_location("order_handlers", handler_path)
        order_handlers = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(order_handlers)
        distribute_order = order_handlers.distribute_order
        offer_order_to_contractor = order_handlers.offer_order_to_contractor
        handle_order_response = order_handlers.handle_order_response
        show_contractor_orders = order_handlers.show_contractor_orders
        show_order_details = order_handlers.show_order_details
        update_order_status = order_handlers.update_order_status
        OrderStatus = order_handlers.OrderStatus
    else:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ order_handlers.py –≤ {current_dir}")
        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π
        def distribute_order(*args, **kwargs): pass
        def offer_order_to_contractor(*args, **kwargs): pass
        async def handle_order_response(*args, **kwargs): pass
        async def show_contractor_orders(*args, **kwargs): pass
        async def show_order_details(*args, **kwargs): pass
        async def update_order_status(*args, **kwargs): pass
        class OrderStatus:
            CREATED = "CREATED"
            ASSIGNED = "ASSIGNED"
            IN_PROGRESS = "IN_PROGRESS"
            COMPLETED = "COMPLETED"
            CANCELLED = "CANCELLED"

def check_subscription_status(user_id):
    """–ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    return user_id in subscription_cache and subscription_cache[user_id].get("active", False)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é
def run_async(async_func, *args, **kwargs):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ"""
    import asyncio
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    result = loop.run_until_complete(async_func(*args, **kwargs))
    loop.close()
    return result

def send_message(token, chat_id, text, reply_markup=None, parse_mode="HTML"):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    send_url = f"https://api.telegram.org/bot{token}/sendMessage"
    data = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": parse_mode
    }
    
    if reply_markup:
        data["reply_markup"] = reply_markup
    
    req = urllib.request.Request(
        send_url,
        data=json.dumps(data).encode('utf-8'),
        headers={'Content-Type': 'application/json'}
    )
    
    try:
        with urllib.request.urlopen(req) as response:
            result = json.loads(response.read().decode())
            print(f"Message sent: {result}")
    except Exception as e:
        print(f"Error sending message: {e}")

def answer_callback_query(token, callback_query_id, text=None):
    """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ callback query"""
    answer_url = f"https://api.telegram.org/bot{token}/answerCallbackQuery"
    answer_data = {
        "callback_query_id": callback_query_id
    }
    
    if text:
        answer_data["text"] = text
    
    req = urllib.request.Request(
        answer_url,
        data=json.dumps(answer_data).encode('utf-8'),
        headers={'Content-Type': 'application/json'}
    )
    
    with urllib.request.urlopen(req) as response:
        result = json.loads(response.read().decode())
        print(f"Callback answered: {result}")

def show_payment_options(token, chat_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–ª–∞—Ç–µ–∂–Ω—ã–µ –æ–ø—Ü–∏–∏"""
    payment_options_text = "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:"
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–ª–∞—Ç–µ–∂–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
    keyboard = {
        "inline_keyboard": [
            [
                {"text": "PayMaster", "callback_data": "pay_paymaster_test"}
            ],
            [
                {"text": "Redsys", "callback_data": "pay_redsys_test"}
            ]
        ]
    }
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    send_message(token, chat_id, payment_options_text, keyboard)

def show_subscription_options(token, chat_id, user_id, user_name):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–ø—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
    has_subscription = check_subscription_status(user_id)
    
    if has_subscription:
        subscription_text = f"üîî –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞!\n\n–§—É–Ω–∫—Ü–∏–∏ –ø—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø–∞ –≤–∫–ª—é—á–µ–Ω—ã."
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π
        keyboard = {
            "inline_keyboard": [
                [
                    {"text": "üìã –î–µ—Ç–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏", "callback_data": "subscription_details"}
                ]
            ]
        }
    else:
        subscription_text = f"üíº –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø—Ä–µ–º–∏—É–º-—Ñ—É–Ω–∫—Ü–∏–∏ DrillFlow\n\n"
        subscription_text += "‚úì –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤\n"
        subscription_text += "‚úì –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        subscription_text += "‚úì –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –Ω–æ–≤—ã–º –∑–∞–∫–∞–∑–∞–º\n"
        subscription_text += "‚úì –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
        subscription_text += "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 499 —Ä—É–±/–º–µ—Å—è—Ü\n"
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        keyboard = {
            "inline_keyboard": [
                [
                    {"text": "üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å —á–µ—Ä–µ–∑ PayMaster", "callback_data": "pay_paymaster_subscription"}
                ],
                [
                    {"text": "üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å —á–µ—Ä–µ–∑ Redsys", "callback_data": "pay_redsys_subscription"}
                ]
            ]
        }
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    send_message(token, chat_id, subscription_text, keyboard)

def send_invoice(token, chat_id, provider="paymaster", is_subscription=False):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
    invoice_url = f"https://api.telegram.org/bot{token}/sendInvoice"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–Ω–≤–æ–π—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–ª–∞—Ç–µ–∂–∞
    if is_subscription:
        title = "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ DrillFlow Premium"
        description = "–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø—Ä–µ–º–∏—É–º-—Ñ—É–Ω–∫—Ü–∏–∏ DrillFlow"
        amount = 49900  # 499 —Ä—É–±. –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        payload = json.dumps({"is_subscription": True})
    else:
        title = "–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂"
        description = "–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã"
        amount = 100  # 1 —Ä—É–±. –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        payload = json.dumps({"is_subscription": False})
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω–≤–æ–π—Å–∞
    invoice_data = {
        "chat_id": chat_id,
        "title": title,
        "description": description,
        "payload": payload,
        "provider_token": os.getenv(f"{provider.upper()}_PAYMENT_TOKEN", "TEST_PAYMENT_TOKEN"),
        "currency": "RUB",
        "prices": [{"label": title, "amount": amount}],
        "need_name": True,
        "need_phone_number": True,
        "need_email": True,
        "need_shipping_address": False,
        "is_flexible": False
    }
    
    req = urllib.request.Request(
        invoice_url,
        data=json.dumps(invoice_data).encode('utf-8'),
        headers={'Content-Type': 'application/json'}
    )
    
    try:
        with urllib.request.urlopen(req) as response:
            result = json.loads(response.read().decode())
            print(f"Invoice sent: {result}")
    except Exception as e:
        print(f"Error sending invoice: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        error_message = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        send_message(token, chat_id, error_message)

# –§—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Vercel

def get(req, res):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ GET-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è Vercel"""
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ–±—Ö—É–∫–µ
    token = os.getenv("BOT_TOKEN", "")
    webhook_url = f"https://{os.getenv('BOT_WEBHOOK_DOMAIN', 'drilling-flow.vercel.app')}/api/webhook_simple"
    
    response_data = {
        "app": "DrillFlow Bot",
        "version": "1.0.0",
        "status": "running",
        "webhook_url": webhook_url,
        "telegram_bot": "@Drill_Flow_bot",
        "updated_at": int(time.time())
    }
    
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ–±—Ö—É–∫–µ –æ—Ç Telegram
    try:
        url = f"https://api.telegram.org/bot{token}/getWebhookInfo"
        with urllib.request.urlopen(url) as response:
            webhook_info = json.loads(response.read().decode())
            response_data["current_webhook"] = webhook_info.get("result", {}).get("url", "")
            response_data["pending_updates"] = webhook_info.get("result", {}).get("pending_update_count", 0)
    except Exception as e:
        response_data["error"] = str(e)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    return {
        "statusCode": 200,
        "headers": {"Content-Type": "application/json"},
        "body": json.dumps(response_data)
    }

def post(req, res):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ POST-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è Vercel"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
    data = req.get("body", "{}")
    if isinstance(data, str):
        try:
            update = json.loads(data)
        except:
            update = {}
    else:
        update = data
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    try:
        print(f"Received update: {update}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
        token = os.getenv("BOT_TOKEN", "")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        if "message" in update and "text" in update["message"]:
            chat_id = update["message"]["chat"]["id"]
            text = update["message"]["text"]
            user = update["message"].get("from", {})
            user_id = str(user.get("id", ""))
            user_name = user.get("first_name", "User")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            if user_id in user_states:
                current_state = user_states.get(user_id)
                if current_state != RegistrationState.IDLE:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —à–∞–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                    run_async(process_registration_step, str(chat_id), user_id, text, token)
                    return {"statusCode": 200, "body": "OK"}
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
            if text.startswith('/start'):
                # –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                response_text = f"–ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DrillFlow - –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—É—Ä–æ–≤—ã–º–∏ —Ä–∞–±–æ—Ç–∞–º–∏.\n\nüîπ –ó–∞–∫–∞–∑—á–∏–∫–∏ –º–æ–≥—É—Ç —Ä–∞–∑–º–µ—â–∞—Ç—å –∑–∞–∫–∞–∑—ã\nüîπ –ü–æ–¥—Ä—è–¥—á–∏–∫–∏ –º–æ–≥—É—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã\nüîπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤"
                
                # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (reply keyboard)
                reply_keyboard = {
                    "keyboard": [
                        [
                            {"text": "üìã –ü—Ä–æ—Ñ–∏–ª—å"},
                            {"text": "üì¶ –ó–∞–∫–∞–∑—ã"}
                        ],
                        [
                            {"text": "‚ùì –ü–æ–º–æ—â—å"},
                            {"text": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"}
                        ],
                        [
                            {"text": "üí≥ –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂"},
                            {"text": "üîÑ –ü–æ–¥–ø–∏—Å–∫–∞"}
                        ]
                    ],
                    "resize_keyboard": True,
                    "persistent": True
                }
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                send_url = f"https://api.telegram.org/bot{token}/sendMessage"
                data = {
                    "chat_id": chat_id,
                    "text": response_text,
                    "parse_mode": "HTML",
                    "reply_markup": reply_keyboard
                }
                
                req = urllib.request.Request(
                    send_url,
                    data=json.dumps(data).encode('utf-8'),
                    headers={'Content-Type': 'application/json'}
                )
                
                with urllib.request.urlopen(req) as response:
                    result = json.loads(response.read().decode())
                    print(f"Message with keyboard sent: {result}")
            
            elif text.startswith('/profile') or text == "üìã –ü—Ä–æ—Ñ–∏–ª—å" or text == "–ü—Ä–æ—Ñ–∏–ª—å":
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∞–∫ –ø–æ–¥—Ä—è–¥—á–∏–∫
                run_async(show_contractor_profile, str(chat_id), user_id, token)
            
            elif text.startswith('/register_contractor'):
                # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞
                run_async(start_registration, str(chat_id), user_name, user_id, token)
            
            elif text.startswith('/my_orders') or text == "üì¶ –ó–∞–∫–∞–∑—ã" or text == "–ó–∞–∫–∞–∑—ã":
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞
                run_async(show_contractor_orders, str(chat_id), user_id, token)
            
            elif text.startswith('/payment') or text == "üí≥ –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂" or text == "–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂":
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂–Ω—ã–µ –æ–ø—Ü–∏–∏
                show_payment_options(token, chat_id)
            
            elif text.startswith('/subscription') or text == "üîÑ –ü–æ–¥–ø–∏—Å–∫–∞" or text == "–ü–æ–¥–ø–∏—Å–∫–∞":
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
                show_subscription_options(token, chat_id, user_id, user_name)
            
            elif text.startswith('/help') or text == "‚ùì –ü–æ–º–æ—â—å" or text == "–ü–æ–º–æ—â—å":
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
                response_text = "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n/help - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å\n/profile - –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n/orders - –ú–æ–∏ –∑–∞–∫–∞–∑—ã\n/payment - –°–¥–µ–ª–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂\n/subscription - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                send_message(token, chat_id, response_text)
            
            elif text.startswith('/stats') or text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" or text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                response_text = "–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: 0\n–°—Ç–∞—Ç—É—Å: –ü–æ–¥—Ä—è–¥—á–∏–∫"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                send_message(token, chat_id, response_text)
            
            else:
                # –≠—Ö–æ-–æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                response_text = f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {text}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                send_message(token, chat_id, response_text)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback-–∑–∞–ø—Ä–æ—Å—ã (–Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏)
        elif "callback_query" in update:
            callback_query = update["callback_query"]
            callback_id = callback_query["id"]
            data = callback_query["data"]
            chat_id = callback_query["message"]["chat"]["id"]
            user = callback_query.get("from", {})
            user_id = str(user.get("id", ""))
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤
            if data.startswith('spec_') or data in ['confirm_registration', 'cancel_registration']:
                run_async(handle_registration_callback, callback_id, str(chat_id), user_id, data, token)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
            elif data.startswith('accept_order_') or data.startswith('decline_order_'):
                run_async(handle_order_response, callback_id, str(chat_id), user_id, data, token)
            
            elif data.startswith('start_order_'):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–∫–∞–∑–∞
                order_id = data.split('_')[-1]
                run_async(update_order_status, str(chat_id), user_id, order_id, OrderStatus.IN_PROGRESS, token)
            
            elif data.startswith('complete_order_'):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–∫–∞–∑–∞
                order_id = data.split('_')[-1]
                run_async(update_order_status, str(chat_id), user_id, order_id, OrderStatus.COMPLETED, token)
            
            elif data == 'my_orders':
                run_async(show_contractor_orders, str(chat_id), user_id, token)
            
            elif data.startswith('order_details_'):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–∫–∞–∑–∞
                order_id = data.split('_')[-1]
                run_async(show_order_details, str(chat_id), user_id, order_id, token)
            
            elif data == "payment":
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂–Ω—ã–µ –æ–ø—Ü–∏–∏
                show_payment_options(token, chat_id)
                # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
                answer_callback_query(token, callback_id)
            
            elif data == "subscription":
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
                user_name = callback_query["from"].get("first_name", "User")
                show_subscription_options(token, chat_id, user_id, user_name)
                # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
                answer_callback_query(token, callback_id)
            
            elif data.startswith("pay_"):
                parts = data.split("_")
                if len(parts) >= 3:
                    provider = parts[1]
                    payment_type = parts[2]
                    is_subscription = payment_type == "subscription"
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã
                    send_invoice(token, chat_id, provider, is_subscription)
                    
                    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
                    answer_callback_query(token, callback_id)
            
            else:
                # –≠—Ö–æ-–æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ callback-–∑–∞–ø—Ä–æ—Å—ã
                response_text = f"–í—ã–±—Ä–∞–Ω–æ: {data}"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                send_message(token, chat_id, response_text)
                
                # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
                answer_callback_query(token, callback_id)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
        elif "pre_checkout_query" in update:
            pre_checkout_id = update["pre_checkout_query"]["id"]
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–∞
            pre_checkout_url = f"https://api.telegram.org/bot{token}/answerPreCheckoutQuery"
            pre_checkout_data = {
                "pre_checkout_query_id": pre_checkout_id,
                "ok": True
            }
            
            req = urllib.request.Request(
                pre_checkout_url,
                data=json.dumps(pre_checkout_data).encode('utf-8'),
                headers={'Content-Type': 'application/json'}
            )
            
            with urllib.request.urlopen(req) as response:
                result = json.loads(response.read().decode())
                print(f"Pre-checkout answered: {result}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
        elif "message" in update and "successful_payment" in update["message"]:
            chat_id = update["message"]["chat"]["id"]
            payment_info = update["message"]["successful_payment"]
            payment_amount = payment_info["total_amount"] / 100  # –°—É–º–º–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö, –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Ä—É–±–ª–∏
            payment_currency = payment_info["currency"]
            is_subscription = "is_subscription" in payment_info["invoice_payload"] and payment_info["invoice_payload"]["is_subscription"]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ, –µ—Å–ª–∏ —ç—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞
            if is_subscription:
                user_id = str(update["message"]["from"]["id"])
                subscription_cache[user_id] = {
                    "active": True,
                    "expires_at": int(time.time()) + 30 * 24 * 60 * 60,  # +30 –¥–Ω–µ–π
                    "payment_id": payment_info["telegram_payment_charge_id"]
                }
                response_text = f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!\n\n"
                response_text += f"–°—É–º–º–∞: {payment_amount} {payment_currency}\n"
                response_text += f"–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞—Ç–µ–∂–∞: {payment_info['telegram_payment_charge_id']}\n\n"
                response_text += f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞. –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ DrillFlow."
            else:
                response_text = f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –≤—ã–ø–æ–ª–Ω–µ–Ω!\n\n"
                response_text += f"–°—É–º–º–∞: {payment_amount} {payment_currency}\n"
                response_text += f"–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞—Ç–µ–∂–∞: {payment_info['telegram_payment_charge_id']}\n\n"
                response_text += f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –≠—Ç–æ —É—á–µ–±–Ω—ã–π –ø—Ä–∏–º–µ—Ä —Å Telegram."
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            send_message(token, chat_id, response_text)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ
        elif "message" in update and "photo" in update["message"]:
            chat_id = update["message"]["chat"]["id"]
            user = update["message"].get("from", {})
            user_id = str(user.get("id", ""))
            photos = update["message"]["photo"]
            
            if photos:
                # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ —Å –Ω–∞–∏–ª—É—á—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º (–ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤ —Å–ø–∏—Å–∫–µ)
                photo = photos[-1]
                file_id = photo["file_id"]
                
                # –ü–µ—Ä–µ–¥–∞–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
                run_async(handle_document_upload, str(chat_id), user_id, file_id, token)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        elif "message" in update and "document" in update["message"]:
            chat_id = update["message"]["chat"]["id"]
            user = update["message"].get("from", {})
            user_id = str(user.get("id", ""))
            document = update["message"]["document"]
            file_id = document["file_id"]
            
            # –ü–µ—Ä–µ–¥–∞–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
            run_async(handle_document_upload, str(chat_id), user_id, file_id, token)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
        elif "message" in update and "location" in update["message"]:
            chat_id = update["message"]["chat"]["id"]
            user = update["message"].get("from", {})
            user_id = str(user.get("id", ""))
            location = update["message"]["location"]
            latitude = location["latitude"]
            longitude = location["longitude"]
            
            # –ü–µ—Ä–µ–¥–∞–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
            run_async(handle_location, str(chat_id), user_id, latitude, longitude, token)
    
    except Exception as e:
        print(f"Error processing update: {e}")
        traceback.print_exc()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    return {"statusCode": 200, "body": "OK"}

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Vercel
def lambda_handler(event, context):
    """–§—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è AWS Lambda"""
    if event.get('httpMethod') == 'GET':
        return get(event, context)
    elif event.get('httpMethod') == 'POST':
        return post(event, context)
    else:
        return {
            "statusCode": 405,
            "body": "Method Not Allowed"
        }

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è Vercel
def handler(req, res):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è Vercel serverless"""
    method = req.get('method', 'GET')
    if method == 'GET':
        result = get(req, None)
        return result
    elif method == 'POST':
        result = post(req, None)
        return result
    else:
        return {
            "statusCode": 405,
            "body": "Method Not Allowed"
        }