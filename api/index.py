import json
import os
import logging
import asyncio
import sys
from http.server import BaseHTTPRequestHandler
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery, Update
from aiogram.utils.markdown import hbold
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from urllib.parse import parse_qs
from fastapi import FastAPI, Request, Response
from loguru import logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.remove()  # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
logger.add(
    sys.stderr,
    format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - <level>{message}</level>",
    level="DEBUG" if os.getenv("DEBUG") else "INFO",
    colorize=True
)

# –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
logger.debug(f"Environment variables:")
logger.debug(f"TELEGRAM_TOKEN: {os.getenv('TELEGRAM_TOKEN')}")
logger.debug(f"VERCEL_URL: {os.getenv('VERCEL_URL')}")
logger.debug(f"USE_POLLING: {os.getenv('USE_POLLING')}")
logger.debug(f"BOT_WEBHOOK_DOMAIN: {os.getenv('BOT_WEBHOOK_DOMAIN')}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
class Settings:
    BOT_TOKEN = os.getenv("TELEGRAM_TOKEN", "")
    if not BOT_TOKEN:
        raise ValueError("TELEGRAM_TOKEN is not set in environment variables")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º BOT_WEBHOOK_DOMAIN –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏–Ω–∞—á–µ VERCEL_URL
    SITE_URL = os.getenv("BOT_WEBHOOK_DOMAIN") or os.getenv("VERCEL_URL", "localhost:8000")
    
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª –∏–∑ URL, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if SITE_URL.startswith("https://"):
        SITE_URL = SITE_URL[8:]
    elif SITE_URL.startswith("http://"):
        SITE_URL = SITE_URL[7:]
    
    WEBHOOK_PATH = "/webhook"  # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—É—Ç—å –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
    WEBHOOK_URL = f"https://{SITE_URL}{WEBHOOK_PATH}"

settings = Settings()
logger.debug(f"Bot settings:")
logger.debug(f"BOT_TOKEN: {settings.BOT_TOKEN[:5]}...{settings.BOT_TOKEN[-5:] if len(settings.BOT_TOKEN) > 10 else ''}")
logger.debug(f"SITE_URL: {settings.SITE_URL}")
logger.debug(f"WEBHOOK_PATH: {settings.WEBHOOK_PATH}")
logger.debug(f"WEBHOOK_URL: {settings.WEBHOOK_URL}")

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=settings.BOT_TOKEN)
dp = Dispatcher()

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI()

# –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def get_main_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìã –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
            InlineKeyboardButton(text="üì¶ –ó–∞–∫–∞–∑—ã", callback_data="orders")
        ],
        [
            InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help"),
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
        ]
    ])
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(CommandStart())
async def start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        logger.info(f"Received start command from user {message.from_user.id}")
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, {hbold(message.from_user.full_name)}!\n"
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DrillFlow - –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—É—Ä–æ–≤—ã–º–∏ —Ä–∞–±–æ—Ç–∞–º–∏.\n\n"
            f"üîπ –ó–∞–∫–∞–∑—á–∏–∫–∏ –º–æ–≥—É—Ç —Ä–∞–∑–º–µ—â–∞—Ç—å –∑–∞–∫–∞–∑—ã\n"
            f"üîπ –ü–æ–¥—Ä—è–¥—á–∏–∫–∏ –º–æ–≥—É—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã\n"
            f"üîπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=get_main_keyboard()
        )
        logger.info("Welcome message sent successfully")
        return True
    except Exception as e:
        logger.error(f"Failed to send welcome message: {e}")
        return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤
@dp.callback_query(F.data == "profile")
async def profile_callback(callback: CallbackQuery):
    await callback.message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å...")
    await callback.answer()

@dp.callback_query(F.data == "orders")
async def orders_callback(callback: CallbackQuery):
    await callback.message.answer("–í–∞—à–∏ –∑–∞–∫–∞–∑—ã...")
    await callback.answer()

@dp.callback_query(F.data == "help")
async def help_callback(callback: CallbackQuery):
    await callback.message.answer("–†–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏...")
    await callback.answer()

@dp.callback_query(F.data == "stats")
async def stats_callback(callback: CallbackQuery):
    await callback.message.answer("–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞...")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞
@app.post("/webhook")
async def webhook_handler(request: Request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ –æ—Ç Telegram"""
    try:
        logger.info("Received webhook request")
        update_data = await request.json()
        logger.debug(f"Update data: {json.dumps(update_data)[:200]}...")
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Update –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        telegram_update = Update.model_validate(update_data)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        await dp.feed_update(bot=bot, update=telegram_update)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        return Response(content="OK", media_type="text/plain")
    except Exception as e:
        logger.error(f"Error processing webhook: {e}")
        logger.exception(e)
        return {"ok": False, "error": str(e)}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ–±—Ö—É–∫–∞
@app.get("/webhook")
async def webhook_get_handler():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ GET-–∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –≤–µ–±—Ö—É–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    return {"status": "webhook endpoint is working", "webhook_url": settings.WEBHOOK_URL}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞"""
    return {"status": "ok", "bot_info": await bot.get_me()}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ø—É—Ç–∏
@app.get("/")
async def root_handler():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ø—É—Ç–∏"""
    return {
        "app": "DrillFlow Bot",
        "version": "1.0.0",
        "status": "running",
        "webhook_url": settings.WEBHOOK_URL,
        "telegram_bot": "@Drill_Flow_bot"
    }

# –°–æ–±—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@app.on_event("startup")
async def on_startup():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("Starting up the application...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
    if os.getenv("USE_POLLING", "False").lower() == "true":
        logger.info("Using polling mode")
        return
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    try:
        webhook_info = await bot.get_webhook_info()
        logger.info(f"Current webhook: {webhook_info.url}")
        
        if webhook_info.url != settings.WEBHOOK_URL:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫
            await bot.delete_webhook()
            logger.info("Old webhook deleted")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –≤–µ–±—Ö—É–∫
            await bot.set_webhook(
                url=settings.WEBHOOK_URL,
                allowed_updates=["message", "callback_query"]
            )
            logger.info(f"Webhook set to {settings.WEBHOOK_URL}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            webhook_info = await bot.get_webhook_info()
            logger.info(f"Webhook verification: {webhook_info.url}")
        else:
            logger.info("Webhook is already set correctly")
    except Exception as e:
        logger.error(f"Failed to set webhook: {e}")
        logger.exception(e)

@app.on_event("shutdown")
async def on_shutdown():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("Shutting down the application...")
    try:
        await bot.delete_webhook()
        logger.info("Webhook removed")
    except Exception as e:
        logger.error(f"Failed to remove webhook: {e}")
        logger.exception(e)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Vercel Serverless Functions
def handler(request, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Vercel Serverless Functions"""
    return app 