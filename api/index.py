import json
import os
import logging
import asyncio
import sys
from http.server import BaseHTTPRequestHandler
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.utils.markdown import hbold
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from urllib.parse import parse_qs

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
logger.info(f"Bot token: {TELEGRAM_TOKEN[:4]}...{TELEGRAM_TOKEN[-4:] if TELEGRAM_TOKEN else 'Not set'}")

try:
    bot = Bot(token=TELEGRAM_TOKEN)
    dp = Dispatcher()
    logger.info("Bot and dispatcher initialized successfully")
except Exception as e:
    logger.error(f"Failed to initialize bot: {e}")
    raise

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_main_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìã –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
            InlineKeyboardButton(text="üì¶ –ó–∞–∫–∞–∑—ã", callback_data="orders")
        ],
        [
            InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help"),
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
        ]
    ])
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        logger.info(f"Received start command from user {message.from_user.id}")
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, {hbold(message.from_user.full_name)}!\n"
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DrillFlow - –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—É—Ä–æ–≤—ã–º–∏ —Ä–∞–±–æ—Ç–∞–º–∏.\n\n"
            f"üîπ –ó–∞–∫–∞–∑—á–∏–∫–∏ –º–æ–≥—É—Ç —Ä–∞–∑–º–µ—â–∞—Ç—å –∑–∞–∫–∞–∑—ã\n"
            f"üîπ –ü–æ–¥—Ä—è–¥—á–∏–∫–∏ –º–æ–≥—É—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã\n"
            f"üîπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=get_main_keyboard()
        )
        logger.info("Welcome message sent successfully")
        return True
    except Exception as e:
        logger.error(f"Failed to send welcome message: {e}")
        logger.error(f"Traceback: {sys.exc_info()}")
        return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /–Ω–∞—á–∞—Ç—å
@dp.message(Command("–Ω–∞—á–∞—Ç—å"))
async def start_command_ru(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /–Ω–∞—á–∞—Ç—å"""
    return await start_command(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile
@dp.message(Command("profile"))
async def profile_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile"""
    try:
        logger.info(f"Received profile command from user {message.from_user.id}")
        await message.answer(
            f"üîë –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {hbold(message.from_user.full_name)}\n\n"
            f"üÜî ID: {message.from_user.id}\n"
            f"üë§ Username: @{message.from_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
            f"–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
            reply_markup=get_main_keyboard()
        )
        logger.info("Profile info sent successfully")
        return True
    except Exception as e:
        logger.error(f"Failed to send profile info: {e}")
        return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /–ø—Ä–æ—Ñ–∏–ª—å
@dp.message(Command("–ø—Ä–æ—Ñ–∏–ª—å"))
async def profile_command_ru(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /–ø—Ä–æ—Ñ–∏–ª—å"""
    return await profile_command(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /orders
@dp.message(Command("orders"))
async def orders_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /orders"""
    try:
        logger.info(f"Received orders command from user {message.from_user.id}")
        await message.answer(
            "üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑\n"
            "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã\n"
            "‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∑–∞–∫–∞–∑–∞–º–∏",
            reply_markup=get_main_keyboard()
        )
        logger.info("Orders info sent successfully")
        return True
    except Exception as e:
        logger.error(f"Failed to send orders info: {e}")
        return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /–∑–∞–∫–∞–∑—ã
@dp.message(Command("–∑–∞–∫–∞–∑—ã"))
async def orders_command_ru(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /–∑–∞–∫–∞–∑—ã"""
    return await orders_command(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message(Command("help"))
async def help_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    try:
        logger.info(f"Received help command from user {message.from_user.id}")
        await message.answer(
            "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n"
            "/start, /–Ω–∞—á–∞—Ç—å - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/profile, /–ø—Ä–æ—Ñ–∏–ª—å - –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è\n"
            "/orders, /–∑–∞–∫–∞–∑—ã - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏\n"
            "/help, /–ø–æ–º–æ—â—å - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É",
            reply_markup=get_main_keyboard()
        )
        logger.info("Help info sent successfully")
        return True
    except Exception as e:
        logger.error(f"Failed to send help info: {e}")
        return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /–ø–æ–º–æ—â—å
@dp.message(Command("–ø–æ–º–æ—â—å"))
async def help_command_ru(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /–ø–æ–º–æ—â—å"""
    return await help_command(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —ç–º–æ–¥–∑–∏
@dp.message(F.text.startswith("üìã"))
async def profile_text(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —ç–º–æ–¥–∑–∏ '–ü—Ä–æ—Ñ–∏–ª—å'"""
    try:
        logger.info(f"Received profile text from user {message.from_user.id}")
        await profile_command(message)
        return True
    except Exception as e:
        logger.error(f"Failed to process profile text: {e}")
        return False

@dp.message(F.text.startswith("üì¶"))
async def orders_text(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —ç–º–æ–¥–∑–∏ '–ó–∞–∫–∞–∑—ã'"""
    try:
        logger.info(f"Received orders text from user {message.from_user.id}")
        await orders_command(message)
        return True
    except Exception as e:
        logger.error(f"Failed to process orders text: {e}")
        return False

@dp.message(F.text.startswith("‚ùì"))
async def help_text(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —ç–º–æ–¥–∑–∏ '–ü–æ–º–æ—â—å'"""
    try:
        logger.info(f"Received help text from user {message.from_user.id}")
        await help_command(message)
        return True
    except Exception as e:
        logger.error(f"Failed to process help text: {e}")
        return False

@dp.message(F.text.startswith("üìä"))
async def stats_text(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —ç–º–æ–¥–∑–∏ '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'"""
    try:
        logger.info(f"Received stats text from user {message.from_user.id}")
        await message.answer(
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
            "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...",
            reply_markup=get_main_keyboard()
        )
        logger.info("Stats info sent successfully")
        return True
    except Exception as e:
        logger.error(f"Failed to process stats text: {e}")
        return False

@dp.message(F.text.startswith("üìù"))
async def reports_text(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —ç–º–æ–¥–∑–∏ '–û—Ç—á–µ—Ç—ã'"""
    try:
        logger.info(f"Received reports text from user {message.from_user.id}")
        await message.answer(
            "üìù –û—Ç—á–µ—Ç—ã\n\n"
            "–ó–¥–µ—Å—å –±—É–¥—É—Ç –≤–∞—à–∏ –æ—Ç—á–µ—Ç—ã...",
            reply_markup=get_main_keyboard()
        )
        logger.info("Reports info sent successfully")
        return True
    except Exception as e:
        logger.error(f"Failed to process reports text: {e}")
        return False

@dp.message(F.text.startswith("‚öôÔ∏è"))
async def settings_text(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —ç–º–æ–¥–∑–∏ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'"""
    try:
        logger.info(f"Received settings text from user {message.from_user.id}")
        await message.answer(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
            "–ó–¥–µ—Å—å –±—É–¥—É—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...",
            reply_markup=get_main_keyboard()
        )
        logger.info("Settings info sent successfully")
        return True
    except Exception as e:
        logger.error(f"Failed to process settings text: {e}")
        return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(F.text)
async def handle_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        logger.info(f"Received text message from user {message.from_user.id}: {message.text}")
        await message.answer(
            f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏: {message.text}\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –∏–ª–∏ /–ø–æ–º–æ—â—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
            reply_markup=get_main_keyboard()
        )
        logger.info("Response to text message sent successfully")
        return True
    except Exception as e:
        logger.error(f"Failed to process text message: {e}")
        return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–æ–∫
@dp.callback_query()
async def process_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback-–∫–Ω–æ–ø–æ–∫"""
    try:
        logger.info(f"Received callback {callback.data} from user {callback.from_user.id}")
        
        if callback.data == "profile":
            await callback.message.edit_text(
                f"üîë –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {hbold(callback.from_user.full_name)}\n\n"
                f"üÜî ID: {callback.from_user.id}\n"
                f"üë§ Username: @{callback.from_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}",
                reply_markup=get_main_keyboard()
            )
        elif callback.data == "orders":
            await callback.message.edit_text(
                "üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏\n\n"
                "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                "‚Ä¢ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑\n"
                "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã\n"
                "‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∑–∞–∫–∞–∑–∞–º–∏",
                reply_markup=get_main_keyboard()
            )
        elif callback.data == "help":
            await callback.message.edit_text(
                "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n"
                "/start, /–Ω–∞—á–∞—Ç—å - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
                "/profile, /–ø—Ä–æ—Ñ–∏–ª—å - –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è\n"
                "/orders, /–∑–∞–∫–∞–∑—ã - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏\n"
                "/help, /–ø–æ–º–æ—â—å - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É",
                reply_markup=get_main_keyboard()
            )
        elif callback.data == "stats":
            await callback.message.edit_text(
                "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
                "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...",
                reply_markup=get_main_keyboard()
            )
            
        await callback.answer()
        logger.info(f"Callback {callback.data} processed successfully")
        return True
    except Exception as e:
        logger.error(f"Failed to process callback {callback.data}: {e}")
        return False

# –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è API
mock_data = {
    "users": [
        {"id": 1, "name": "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤", "role": "admin", "email": "ivan@example.com"},
        {"id": 2, "name": "–ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤", "role": "contractor", "email": "petr@example.com"},
        {"id": 3, "name": "–°–∏–¥–æ—Ä –°–∏–¥–æ—Ä–æ–≤", "role": "client", "email": "sidor@example.com"}
    ],
    "orders": [
        {"id": 1, "title": "–ë—É—Ä–µ–Ω–∏–µ —Å–∫–≤–∞–∂–∏–Ω—ã 1", "status": "active", "client_id": 3, "contractor_id": 2},
        {"id": 2, "title": "–ë—É—Ä–µ–Ω–∏–µ —Å–∫–≤–∞–∂–∏–Ω—ã 2", "status": "pending", "client_id": 3, "contractor_id": None},
        {"id": 3, "title": "–†–µ–º–æ–Ω—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è", "status": "completed", "client_id": 3, "contractor_id": 2}
    ],
    "stats": {
        "active_contractors": 247,
        "active_clients": 156,
        "projects_completed": 573,
        "total_revenue": 12500000
    }
}

async def process_update(update_data: dict) -> bool:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram"""
    try:
        logger.debug(f"Processing update: {update_data}")
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Update
        update = types.Update(**update_data)
        update_type = "unknown"
        if update.message:
            update_type = f"message from {update.message.from_user.id}"
            if update.message.text:
                update_type += f" with text: {update.message.text}"
        elif update.callback_query:
            update_type = f"callback_query from {update.callback_query.from_user.id} with data: {update.callback_query.data}"
            
        logger.info(f"Created Update object: {update_type}")
        
        try:
            # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
            result = await dp.feed_update(bot=bot, update=update)
            if result:
                logger.info("Update processed successfully")
            else:
                logger.warning("Update not processed by any handler")
            return True
        except Exception as e:
            logger.error(f"Error processing update through dispatcher: {e}")
            logger.error(f"Traceback: {sys.exc_info()}")
            return False
            
    except Exception as e:
        logger.error(f"Error processing update: {e}")
        logger.error(f"Update data: {update_data}")
        logger.error(f"Traceback: {sys.exc_info()}")
        return False

class handler(BaseHTTPRequestHandler):
    def do_POST(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç—å –∑–∞–ø—Ä–æ—Å–∞
            logger.info(f"Received POST request to {self.path}")
            logger.debug(f"Headers: {dict(self.headers)}")
            
            # –ï—Å–ª–∏ —ç—Ç–æ webhook-–∑–∞–ø—Ä–æ—Å –æ—Ç Telegram
            if self.path == '/webhook':
                update_data = json.loads(post_data.decode('utf-8'))
                logger.debug(f"Webhook body: {update_data}")
                
                try:
                    # –°–æ–∑–¥–∞–µ–º event loop –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                    success = loop.run_until_complete(process_update(update_data))
                    
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º loop
                    loop.close()
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                    self.send_response(200)
                    self.send_header('Content-type', 'application/json')
                    self.send_header('Access-Control-Allow-Origin', '*')
                    self.end_headers()
                    
                    response = {
                        "status": "success" if success else "error",
                        "message": "Update processed" if success else "Failed to process update"
                    }
                    
                    self.wfile.write(json.dumps(response).encode('utf-8'))
                    return
                except Exception as e:
                    logger.error(f"Error processing webhook: {e}")
                    logger.error(f"Traceback: {sys.exc_info()}")
                    raise
            
            # –ï—Å–ª–∏ —ç—Ç–æ API –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            elif self.path.startswith('/api/'):
                update_data = json.loads(post_data.decode('utf-8'))
                logger.debug(f"API request body: {update_data}")
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ API –∑–∞–ø—Ä–æ—Å–æ–≤
                api_path = self.path[5:]  # –£–¥–∞–ª—è–µ–º '/api/' –∏–∑ –ø—É—Ç–∏
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
                if api_path == 'orders/create':
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                    new_order = update_data
                    new_order["id"] = len(mock_data["orders"]) + 1
                    mock_data["orders"].append(new_order)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                    self.send_response(201)
                    self.send_header('Content-type', 'application/json')
                    self.send_header('Access-Control-Allow-Origin', '*')
                    self.end_headers()
                    
                    response = {
                        "status": "success",
                        "message": "Order created successfully",
                        "order": new_order
                    }
                    
                    self.wfile.write(json.dumps(response).encode('utf-8'))
                    return
                # –î—Ä—É–≥–∏–µ API –∑–∞–ø—Ä–æ—Å—ã
                else:
                    self.send_response(404)
                    self.send_header('Content-type', 'application/json')
                    self.send_header('Access-Control-Allow-Origin', '*')
                    self.end_headers()
                    
                    response = {
                        "status": "error",
                        "message": "API endpoint not found"
                    }
                    
                    self.wfile.write(json.dumps(response).encode('utf-8'))
                    return
                
            # –î–ª—è –¥—Ä—É–≥–∏—Ö POST-–∑–∞–ø—Ä–æ—Å–æ–≤
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            
            response = {
                "status": "success",
                "received": json.loads(post_data.decode('utf-8'))
            }
            
            self.wfile.write(json.dumps(response).encode('utf-8'))
            
        except Exception as e:
            logger.error(f"Error in do_POST: {e}")
            logger.error(f"Traceback: {sys.exc_info()}")
            self.send_response(500)
            self.send_header('Content-type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            
            response = {
                "status": "error",
                "message": str(e),
                "type": type(e).__name__
            }
            
            self.wfile.write(json.dumps(response).encode('utf-8'))
    
    def do_OPTIONS(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ OPTIONS-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è CORS"""
        self.send_response(200)
        self.send_header('Content-type', 'application/json')
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()
        
        response = {
            "status": "ok",
            "message": "CORS preflight request successful"
        }
        
        self.wfile.write(json.dumps(response).encode('utf-8'))
    
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET-–∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç—å –∑–∞–ø—Ä–æ—Å–∞
            logger.info(f"Received GET request to {self.path}")
            
            # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ—Ä–Ω–µ–≤–æ–π –∑–∞–ø—Ä–æ—Å API
            if self.path == '/api':
                self.send_response(200)
                self.send_header('Content-type', 'application/json')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.end_headers()
                
                response = {
                    "status": "ok",
                    "message": "DrillFlow API is running",
                    "version": "1.0.0",
                    "bot_initialized": bool(TELEGRAM_TOKEN),
                    "environment": os.getenv("ENVIRONMENT", "unknown"),
                    "endpoints": [
                        "/api/users",
                        "/api/orders",
                        "/api/stats"
                    ]
                }
                
                self.wfile.write(json.dumps(response).encode('utf-8'))
                return
                
            # –ï—Å–ª–∏ —ç—Ç–æ API –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            elif self.path == '/api/users':
                self.send_response(200)
                self.send_header('Content-type', 'application/json')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.end_headers()
                
                response = {
                    "status": "ok",
                    "users": mock_data["users"]
                }
                
                self.wfile.write(json.dumps(response).encode('utf-8'))
                return
                
            # –ï—Å–ª–∏ —ç—Ç–æ API –∑–∞–ø—Ä–æ—Å –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
            elif self.path == '/api/orders':
                self.send_response(200)
                self.send_header('Content-type', 'application/json')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.end_headers()
                
                response = {
                    "status": "ok",
                    "orders": mock_data["orders"]
                }
                
                self.wfile.write(json.dumps(response).encode('utf-8'))
                return
                
            # –ï—Å–ª–∏ —ç—Ç–æ API –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            elif self.path == '/api/stats':
                self.send_response(200)
                self.send_header('Content-type', 'application/json')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.end_headers()
                
                response = {
                    "status": "ok",
                    "stats": mock_data["stats"]
                }
                
                self.wfile.write(json.dumps(response).encode('utf-8'))
                return
                
            # –î–ª—è –¥—Ä—É–≥–∏—Ö GET-–∑–∞–ø—Ä–æ—Å–æ–≤
            else:
                self.send_response(200)
                self.send_header('Content-type', 'application/json')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.end_headers()
                
                response = {
                    "status": "ok",
                    "message": "DrillFlow API is running",
                    "version": "1.0.0",
                    "bot_initialized": bool(TELEGRAM_TOKEN),
                    "environment": os.getenv("ENVIRONMENT", "unknown")
                }
                
                self.wfile.write(json.dumps(response).encode('utf-8'))
                return
                
        except Exception as e:
            logger.error(f"Error in do_GET: {e}")
            self.send_response(500)
            self.send_header('Content-type', 'application/json')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            
            response = {
                "status": "error",
                "message": str(e)
            }
            
            self.wfile.write(json.dumps(response).encode('utf-8')) 