import os
import json
import uuid
import logging
from typing import Dict, Any, Optional, List, Tuple
import datetime
import sys

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–∞—Ç–∞–ª–æ–≥ –≤ sys.path –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
current_dir = os.path.dirname(os.path.abspath(__file__))
if current_dir not in sys.path:
    sys.path.append(current_dir)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
from models import User, Contractor, Order, OrderRating, ContractorStatus, SpecializationType, VerificationStatus
from database import (
    create_user,
    get_user_by_telegram_id,
    update_user,
    create_contractor, 
    get_contractor_by_telegram_id, 
    update_contractor,
    create_verification_request
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
ADMIN_GROUP_ID = os.getenv("BOT_ADMIN_GROUP_ID", "-1002169340954")
SUPPORT_GROUP_ID = os.getenv("BOT_SUPPORT_GROUP_ID", "-1002169340954")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class RegistrationState:
    IDLE = "idle"
    AWAITING_FULL_NAME = "awaiting_full_name"
    AWAITING_PHONE = "awaiting_phone"
    AWAITING_EMAIL = "awaiting_email"
    AWAITING_SPECIALIZATION = "awaiting_specialization"
    AWAITING_WORK_RADIUS = "awaiting_work_radius"
    AWAITING_LOCATION = "awaiting_location"
    AWAITING_DOCUMENT = "awaiting_document"
    AWAITING_CONFIRMATION = "awaiting_confirmation"

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –Ω—É–∂–Ω–∞ –ë–î)
user_states = {}
registration_data = {}

async def start_registration(chat_id: str, user_name: str, telegram_id: str, token: str) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ
    success, result = get_contractor_by_telegram_id(telegram_id)
    
    if success:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        status_text = "–∞–∫—Ç–∏–≤–µ–Ω" if result.status == ContractorStatus.ACTIVE else "–æ–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏"
        response_text = f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø–æ–¥—Ä—è–¥—á–∏–∫.\n–°—Ç–∞—Ç—É—Å: {status_text}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /contractor_profile –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è."
        
        send_message(token, chat_id, response_text)
        return
    
    # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    response_text = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}!\n\n–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤–∞—Å –∫–∞–∫ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ DrillFlow. –ù–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–±—Ä–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—Å –∏ –≤–∞—à–µ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.\n\n–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§–ò–û)."
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states[telegram_id] = RegistrationState.AWAITING_FULL_NAME
    registration_data[telegram_id] = {
        "telegram_id": telegram_id
    }
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    send_message(token, chat_id, response_text)

async def process_registration_step(chat_id: str, telegram_id: str, text: str, token: str) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —à–∞–≥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞"""
    if telegram_id not in user_states:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∞–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        return
    
    current_state = user_states.get(telegram_id)
    
    if current_state == RegistrationState.AWAITING_FULL_NAME:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è
        registration_data[telegram_id]["full_name"] = text
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        response_text = "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:"
        user_states[telegram_id] = RegistrationState.AWAITING_PHONE
        
        send_message(token, chat_id, response_text)
    
    elif current_state == RegistrationState.AWAITING_PHONE:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
        if not (text.startswith("+7") and len(text) == 12 and text[1:].isdigit()):
            response_text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:"
            send_message(token, chat_id, response_text)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
        registration_data[telegram_id]["phone"] = text
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        response_text = "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à email –¥–ª—è —Å–≤—è–∑–∏:"
        user_states[telegram_id] = RegistrationState.AWAITING_EMAIL
        
        send_message(token, chat_id, response_text)
    
    elif current_state == RegistrationState.AWAITING_EMAIL:
        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email
        if "@" not in text or "." not in text:
            response_text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å:"
            send_message(token, chat_id, response_text)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º email
        registration_data[telegram_id]["email"] = text
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        response_text = "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é, –≤—ã–±—Ä–∞–≤ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:"
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        keyboard = {
            "inline_keyboard": [
                [
                    {"text": "üîÑ –ë—É—Ä–µ–Ω–∏–µ", "callback_data": "spec_drilling"}
                ],
                [
                    {"text": "üöø –ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è", "callback_data": "spec_sewerage"}
                ],
                [
                    {"text": "üîÑ –ë—É—Ä–µ–Ω–∏–µ –∏ –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è", "callback_data": "spec_both"}
                ]
            ]
        }
        
        user_states[telegram_id] = RegistrationState.AWAITING_SPECIALIZATION
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        send_message(token, chat_id, response_text, keyboard)
    
    elif current_state == RegistrationState.AWAITING_WORK_RADIUS:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–¥–∏—É—Å–∞ —Ä–∞–±–æ—Ç—ã
        try:
            radius = int(text)
            if radius <= 0 or radius > 100:
                raise ValueError("Radius out of range")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–¥–∏—É—Å —Ä–∞–±–æ—Ç—ã
            registration_data[telegram_id]["work_radius"] = radius
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
            response_text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ Telegram (–ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å > –ª–æ–∫–∞—Ü–∏—è) –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ latitude,longitude (–Ω–∞–ø—Ä–∏–º–µ—Ä: 55.7558,37.6173 –¥–ª—è –ú–æ—Å–∫–≤—ã):"
            
            user_states[telegram_id] = RegistrationState.AWAITING_LOCATION
            
            send_message(token, chat_id, response_text)
        
        except ValueError:
            response_text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–¥–∏—É—Å–∞ —Ä–∞–±–æ—Ç—ã (–æ—Ç 1 –¥–æ 100 –∫–º):"
            send_message(token, chat_id, response_text)
    
    elif current_state == RegistrationState.AWAITING_LOCATION:
        # –ü–∞—Ä—Å–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        try:
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ lat,lon
            lat, lon = map(float, text.split(","))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            if lat < -90 or lat > 90 or lon < -180 or lon > 180:
                raise ValueError("Invalid coordinates")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
            registration_data[telegram_id]["location"] = {
                "lat": lat,
                "lon": lon
            }
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            response_text = "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤–∞—à–µ–π —Ç–µ—Ö–Ω–∏–∫–∏ –¥–ª—è –±—É—Ä–µ–Ω–∏—è. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Å –∫–∞–∫ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞."
            
            user_states[telegram_id] = RegistrationState.AWAITING_DOCUMENT
            
            send_message(token, chat_id, response_text)
        
        except Exception:
            response_text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ latitude,longitude (–Ω–∞–ø—Ä–∏–º–µ—Ä: 55.7558,37.6173 –¥–ª—è –ú–æ—Å–∫–≤—ã):"
            send_message(token, chat_id, response_text)
    
    elif current_state == RegistrationState.AWAITING_CONFIRMATION:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if text.lower() in ["–¥–∞", "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", "–≤–µ—Ä–Ω–æ", "yes", "confirm"]:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥—Ä—è–¥—á–∏–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            try:
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–¥—Ä—è–¥—á–∏–∫–∞
                contractor = Contractor(
                    user_id=str(uuid.uuid4()),
                    full_name=registration_data[telegram_id]["full_name"],
                    phone=registration_data[telegram_id]["phone"],
                    email=registration_data[telegram_id]["email"],
                    telegram_id=telegram_id,
                    specialization=registration_data[telegram_id]["specialization"],
                    work_radius=registration_data[telegram_id]["work_radius"],
                    location=registration_data[telegram_id]["location"],
                    status=ContractorStatus.PENDING
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                success, result = create_contractor(contractor)
                
                if not success:
                    logger.error(f"Failed to create contractor: {result}")
                    response_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
                    send_message(token, chat_id, response_text)
                    return
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
                verification = VerificationRequest(
                    request_id=str(uuid.uuid4()),
                    contractor_id=contractor.user_id,
                    documents=registration_data[telegram_id].get("documents", [])
                )
                
                success, result = create_verification_request(verification)
                
                if not success:
                    logger.error(f"Failed to create verification request: {result}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                response_text = f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º –∏ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /contractor_profile –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è."
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
                admin_text = f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–¥—Ä—è–¥—á–∏–∫–∞!\n\n–ò–º—è: {contractor.full_name}\n–¢–µ–ª–µ—Ñ–æ–Ω: {contractor.phone}\nEmail: {contractor.email}\n–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {contractor.specialization.value}\nID: {contractor.user_id}"
                send_message(token, ADMIN_GROUP_ID, admin_text)
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
                user_states.pop(telegram_id, None)
                registration_data.pop(telegram_id, None)
            
            except Exception as e:
                logger.error(f"Error during contractor registration: {str(e)}")
                response_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
            
            send_message(token, chat_id, response_text)
        
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –¥–∞–Ω–Ω—ã–µ
            response_text = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /register_contractor."
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
            user_states.pop(telegram_id, None)
            registration_data.pop(telegram_id, None)
            
            send_message(token, chat_id, response_text)

async def handle_registration_callback(callback_id: str, chat_id: str, telegram_id: str, data: str, token: str) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –∑–∞–ø—Ä–æ—Å—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    if telegram_id not in user_states:
        return
    
    current_state = user_states.get(telegram_id)
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —á–∞—Å—ã –∑–∞–≥—Ä—É–∑–∫–∏
    answer_callback_query(token, callback_id)
    
    if current_state == RegistrationState.AWAITING_SPECIALIZATION and data.startswith("spec_"):
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        specialization_type = data.split("_")[1]
        
        if specialization_type == "drilling":
            registration_data[telegram_id]["specialization"] = SpecializationType.DRILLING
            spec_text = "–ë—É—Ä–µ–Ω–∏–µ"
        elif specialization_type == "sewerage":
            registration_data[telegram_id]["specialization"] = SpecializationType.SEWERAGE
            spec_text = "–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è"
        else:  # both
            registration_data[telegram_id]["specialization"] = SpecializationType.BOTH
            spec_text = "–ë—É—Ä–µ–Ω–∏–µ –∏ –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è"
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        response_text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é: {spec_text}.\n\n–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å —Ä–∞–±–æ—Ç—ã –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö (–æ—Ç 1 –¥–æ 100):"
        
        user_states[telegram_id] = RegistrationState.AWAITING_WORK_RADIUS
        
        send_message(token, chat_id, response_text)
    
    elif current_state == RegistrationState.AWAITING_CONFIRMATION:
        if data == "confirm_registration":
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –≤–∞—Ä–∏–∞–Ω—Ç—É)
            # –ö–æ–¥ –∞–Ω–∞–ª–æ–≥–∏—á–µ–Ω –≤–µ—Ç–∫–µ AWAITING_CONFIRMATION –≤ process_registration_step
            # –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è "–¥–∞"
            pass
        elif data == "cancel_registration":
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            response_text = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /register_contractor."
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
            user_states.pop(telegram_id, None)
            registration_data.pop(telegram_id, None)
            
            send_message(token, chat_id, response_text)

async def handle_document_upload(chat_id: str, telegram_id: str, file_id: str, token: str) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (—Ñ–æ—Ç–æ —Ç–µ—Ö–Ω–∏–∫–∏) –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    if telegram_id not in user_states:
        return
    
    current_state = user_states.get(telegram_id)
    
    if current_state == RegistrationState.AWAITING_DOCUMENT:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
        if "documents" not in registration_data[telegram_id]:
            registration_data[telegram_id]["documents"] = []
        
        registration_data[telegram_id]["documents"].append({
            "file_id": file_id,
            "type": "equipment_photo",
            "uploaded_at": datetime.datetime.now().isoformat()
        })
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        full_name = registration_data[telegram_id]["full_name"]
        phone = registration_data[telegram_id]["phone"]
        email = registration_data[telegram_id]["email"]
        specialization = registration_data[telegram_id]["specialization"]
        work_radius = registration_data[telegram_id]["work_radius"]
        location = registration_data[telegram_id]["location"]
        
        spec_text = "–ë—É—Ä–µ–Ω–∏–µ"
        if specialization == SpecializationType.SEWERAGE:
            spec_text = "–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è"
        elif specialization == SpecializationType.BOTH:
            spec_text = "–ë—É—Ä–µ–Ω–∏–µ –∏ –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è"
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
        response_text = f"–°–ø–∞—Å–∏–±–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
        response_text += f"–§–ò–û: {full_name}\n"
        response_text += f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        response_text += f"Email: {email}\n"
        response_text += f"–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {spec_text}\n"
        response_text += f"–†–∞–¥–∏—É—Å —Ä–∞–±–æ—Ç—ã: {work_radius} –∫–º\n"
        response_text += f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {location['lat']}, {location['lon']}\n"
        response_text += f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(registration_data[telegram_id]['documents'])}\n\n"
        response_text += f"–í—Å–µ –≤–µ—Ä–Ω–æ? –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ '–î–∞' –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = {
            "inline_keyboard": [
                [
                    {"text": "‚úÖ –î–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", "callback_data": "confirm_registration"}
                ],
                [
                    {"text": "‚ùå –û—Ç–º–µ–Ω–∞", "callback_data": "cancel_registration"}
                ]
            ]
        }
        
        user_states[telegram_id] = RegistrationState.AWAITING_CONFIRMATION
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        send_message(token, chat_id, response_text, keyboard)

async def handle_location(chat_id: str, telegram_id: str, latitude: float, longitude: float, token: str) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    if telegram_id not in user_states:
        return
    
    current_state = user_states.get(telegram_id)
    
    if current_state == RegistrationState.AWAITING_LOCATION:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
        registration_data[telegram_id]["location"] = {
            "lat": latitude,
            "lon": longitude
        }
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        response_text = "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤–∞—à–µ–π —Ç–µ—Ö–Ω–∏–∫–∏ –¥–ª—è –±—É—Ä–µ–Ω–∏—è. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Å –∫–∞–∫ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞."
        
        user_states[telegram_id] = RegistrationState.AWAITING_DOCUMENT
        
        send_message(token, chat_id, response_text)

async def show_contractor_profile(chat_id: str, telegram_id: str, token: str) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–¥—Ä—è–¥—á–∏–∫–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥—Ä—è–¥—á–∏–∫–µ
    success, contractor = get_contractor_by_telegram_id(telegram_id)
    
    if not success:
        response_text = "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø–æ–¥—Ä—è–¥—á–∏–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register_contractor –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        send_message(token, chat_id, response_text)
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
    status_text = "–ê–∫—Ç–∏–≤–µ–Ω"
    if contractor.status == ContractorStatus.PENDING:
        status_text = "–û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏"
    elif contractor.status == ContractorStatus.BLOCKED:
        status_text = "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
    
    spec_text = "–ë—É—Ä–µ–Ω–∏–µ"
    if contractor.specialization == SpecializationType.SEWERAGE:
        spec_text = "–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è"
    elif contractor.specialization == SpecializationType.BOTH:
        spec_text = "–ë—É—Ä–µ–Ω–∏–µ –∏ –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è"
    
    response_text = f"üìã –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–¥—Ä—è–¥—á–∏–∫–∞\n\n"
    response_text += f"–§–ò–û: {contractor.full_name}\n"
    response_text += f"–¢–µ–ª–µ—Ñ–æ–Ω: {contractor.phone}\n"
    response_text += f"Email: {contractor.email}\n"
    response_text += f"ID: {contractor.user_id}\n"
    response_text += f"–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {spec_text}\n"
    response_text += f"–†–∞–¥–∏—É—Å —Ä–∞–±–æ—Ç—ã: {contractor.work_radius} –∫–º\n"
    response_text += f"–°—Ç–∞—Ç—É—Å: {status_text}\n"
    response_text += f"–†–µ–π—Ç–∏–Ω–≥: {'‚≠ê' * int(contractor.rating)}\n"
    response_text += f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {contractor.completed_orders}\n"
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–º
    keyboard = {
        "inline_keyboard": [
            [
                {"text": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", "callback_data": "update_profile"}
            ],
            [
                {"text": "üìä –ú–æ–∏ –∑–∞–∫–∞–∑—ã", "callback_data": "my_orders"}
            ],
            [
                {"text": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "callback_data": "profile_settings"}
            ]
        ]
    }
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    send_message(token, chat_id, response_text, keyboard)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram

def send_message(token: str, chat_id: str, text: str, reply_markup: Dict = None) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    import urllib.request
    import json
    
    send_url = f"https://api.telegram.org/bot{token}/sendMessage"
    data = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": "HTML"
    }
    
    if reply_markup:
        data["reply_markup"] = reply_markup
    
    req = urllib.request.Request(
        send_url,
        data=json.dumps(data).encode('utf-8'),
        headers={'Content-Type': 'application/json'}
    )
    
    try:
        with urllib.request.urlopen(req) as response:
            result = json.loads(response.read().decode())
            logger.info(f"Message sent: {result}")
    except Exception as e:
        logger.error(f"Error sending message: {str(e)}")

def answer_callback_query(token: str, callback_query_id: str, text: str = None) -> None:
    """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ callback query"""
    import urllib.request
    import json
    
    answer_url = f"https://api.telegram.org/bot{token}/answerCallbackQuery"
    answer_data = {
        "callback_query_id": callback_query_id
    }
    
    if text:
        answer_data["text"] = text
    
    req = urllib.request.Request(
        answer_url,
        data=json.dumps(answer_data).encode('utf-8'),
        headers={'Content-Type': 'application/json'}
    )
    
    try:
        with urllib.request.urlopen(req) as response:
            result = json.loads(response.read().decode())
            logger.info(f"Callback answered: {result}")
    except Exception as e:
        logger.error(f"Error answering callback: {str(e)}") 