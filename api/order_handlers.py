import os
import json
import time
import uuid
import asyncio
import logging
import urllib.request
import urllib.parse
import traceback
import math
from typing import List, Dict, Any, Optional, Tuple

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
from models import Order, Contractor, OrderStatus, SpecializationType, ContractorStatus
from database import (
    get_contractor,
    get_order,
    list_contractors,
    update_order,
    assign_order_to_contractor,
    list_orders
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MAX_ORDERS_PER_DAY = 2  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞ –≤ –¥–µ–Ω—å
MAX_OFFER_TIME_SECONDS = 300  # –í—Ä–µ–º—è –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–∫–∞–∑–∞ (5 –º–∏–Ω—É—Ç)
MAX_DISTANCE_KM = 50  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞

# –ö—ç—à –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
active_offers = {}  # order_id -> {contractor_id: expiration_time}
contractor_daily_orders = {}  # contractor_id -> {date: count}

def calculate_distance(loc1: Dict[str, float], loc2: Dict[str, float]) -> float:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ (–≤ –∫–º)"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é —Ñ–æ—Ä–º—É–ª—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
    lat1, lng1 = loc1.get('lat', 0), loc1.get('lng', 0)
    lat2, lng2 = loc2.get('lat', 0), loc2.get('lng', 0)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
    if not all([lat1, lng1, lat2, lng2]):
        return float('inf')  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º "–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å", –µ—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
    
    # –§–æ—Ä–º—É–ª–∞ –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –ø–æ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ —Å—Ñ–µ—Ä—ã
    R = 6371  # –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –≥—Ä–∞–¥—É—Å–æ–≤ –≤ —Ä–∞–¥–∏–∞–Ω—ã
    lat1_rad = math.radians(lat1)
    lng1_rad = math.radians(lng1)
    lat2_rad = math.radians(lat2)
    lng2_rad = math.radians(lng2)
    
    # –†–∞–∑–Ω–∏—Ü–∞ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
    dlat = lat2_rad - lat1_rad
    dlng = lng2_rad - lng1_rad
    
    # –§–æ—Ä–º—É–ª–∞ –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–æ–≤
    a = math.sin(dlat/2)**2 + math.cos(lat1_rad) * math.cos(lat2_rad) * math.sin(dlng/2)**2
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))
    distance = R * c
    
    return distance

def get_today_date_str() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD"""
    import datetime
    return datetime.datetime.now().strftime("%Y-%m-%d")

def get_contractor_daily_order_count(contractor_id: str) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–º —Å–µ–≥–æ–¥–Ω—è"""
    today = get_today_date_str()
    
    if contractor_id not in contractor_daily_orders:
        contractor_daily_orders[contractor_id] = {}
    
    if today not in contractor_daily_orders[contractor_id]:
        contractor_daily_orders[contractor_id][today] = 0
    
    return contractor_daily_orders[contractor_id][today]

def increment_contractor_daily_order_count(contractor_id: str) -> None:
    """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    today = get_today_date_str()
    
    if contractor_id not in contractor_daily_orders:
        contractor_daily_orders[contractor_id] = {}
    
    if today not in contractor_daily_orders[contractor_id]:
        contractor_daily_orders[contractor_id][today] = 0
    
    contractor_daily_orders[contractor_id][today] += 1

def get_eligible_contractors(order: Order) -> List[Contractor]:
    """–ù–∞—Ö–æ–¥–∏—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤
    contractors = list_contractors({"status": ContractorStatus.ACTIVE})
    
    eligible_contractors = []
    for contractor in contractors:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        if order.specialization != contractor.specialization and contractor.specialization != SpecializationType.BOTH:
            continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        if get_contractor_daily_order_count(contractor.id) >= MAX_ORDERS_PER_DAY:
            continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã)
        if order.location and contractor.location:
            distance = calculate_distance(order.location, contractor.location)
            if distance > contractor.work_radius:
                continue
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ä—è–¥—á–∏–∫–∞ –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö
        eligible_contractors.append(contractor)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É (–æ—Ç –≤—ã—Å–æ–∫–æ–≥–æ –∫ –Ω–∏–∑–∫–æ–º—É)
    eligible_contractors.sort(key=lambda c: c.rating, reverse=True)
    
    return eligible_contractors

def distribute_order(order: Order, token: str) -> bool:
    """–†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∑–∞–∫–∞–∑ –º–µ–∂–¥—É –ø–æ–¥—Ö–æ–¥—è—â–∏–º–∏ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞–º–∏"""
    logger.info(f"Starting order distribution for order_id: {order.order_id}")
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤
    eligible_contractors = get_eligible_contractors(order)
    
    if not eligible_contractors:
        logger.warning(f"No eligible contractors found for order_id: {order.order_id}")
        return False
    
    logger.info(f"Found {len(eligible_contractors)} eligible contractors for order_id: {order.order_id}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞
    active_offers[order.order_id] = {}
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–∫–∞–∑ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞–º –ø–æ –æ—á–µ—Ä–µ–¥–∏ (–≤ –ø–æ—Ä—è–¥–∫–µ —Ä–µ–π—Ç–∏–Ω–≥–∞)
    for contractor in eligible_contractors:
        success = offer_order_to_contractor(order, contractor.id, token)
        if success:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            expiration_time = int(time.time()) + MAX_OFFER_TIME_SECONDS
            active_offers[order.order_id][contractor.id] = expiration_time
            
            logger.info(f"Order {order.order_id} offered to contractor {contractor.id}, expires at {expiration_time}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    # (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –±—É–¥–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∏–ª–∏ —Ç–∞–π–º–µ—Ä)
    # –í —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ –º—ã –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    
    return True

def offer_order_to_contractor(order: Order, contractor_id: str, token: str) -> bool:
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∑–∞–∫–∞–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–¥—Ä—è–¥—á–∏–∫—É"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞
    success, contractor = get_contractor(contractor_id)
    
    if not success or not contractor:
        logger.error(f"Contractor {contractor_id} not found")
        return False
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞
    message = f"üîî <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>\n\n"
    message += f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {order.title}\n"
    message += f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {order.description}\n"
    
    if order.price:
        message += f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {order.price} —Ä—É–±.\n"
    
    if order.address:
        message += f"<b>–ê–¥—Ä–µ—Å:</b> {order.address}\n"
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –∑–∞–∫–∞–∑–∞
    distance = None
    if order.location and contractor.location:
        distance = calculate_distance(order.location, contractor.location)
        message += f"<b>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:</b> {distance:.1f} –∫–º\n"
    
    message += f"\n–£ –≤–∞—Å –µ—Å—Ç—å 5 –º–∏–Ω—É—Ç, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑."
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    inline_keyboard = {
        "inline_keyboard": [
            [
                {"text": "‚úÖ –ü—Ä–∏–Ω—è—Ç—å", "callback_data": f"accept_order_{order.order_id}"},
                {"text": "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", "callback_data": f"decline_order_{order.order_id}"}
            ]
        ]
    }
    
    # –ü–æ–ª—É—á–∞–µ–º chat_id –ø–æ Telegram ID
    chat_id = contractor.user_id  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ user_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö - —ç—Ç–æ chat_id –≤ Telegram
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        send_url = f"https://api.telegram.org/bot{token}/sendMessage"
        data = {
            "chat_id": chat_id,
            "text": message,
            "parse_mode": "HTML",
            "reply_markup": inline_keyboard
        }
        
        req = urllib.request.Request(
            send_url,
            data=json.dumps(data).encode('utf-8'),
            headers={'Content-Type': 'application/json'}
        )
        
        with urllib.request.urlopen(req) as response:
            result = json.loads(response.read().decode())
            logger.info(f"Order offer sent to contractor {contractor_id}: {result}")
            return True
    
    except Exception as e:
        logger.error(f"Error sending order offer to contractor {contractor_id}: {str(e)}")
        return False

async def handle_order_response(callback_id: str, chat_id: str, user_id: str, data: str, token: str) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–¥—Ä—è–¥—á–∏–∫–∞ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    # –ü–æ–ª—É—á–∞–µ–º contractor_id –ø–æ user_id
    success, contractor = get_contractor(user_id)
    
    if not success or not contractor:
        logger.error(f"Contractor not found for user_id: {user_id}")
        await send_message(chat_id, "–û—à–∏–±–∫–∞: –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–¥—Ä—è–¥—á–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω", token)
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º order_id –∏–∑ –¥–∞–Ω–Ω—ã—Ö callback
    parts = data.split('_')
    if len(parts) < 3:
        logger.error(f"Invalid callback data: {data}")
        return
    
    action = parts[0]  # accept –∏–ª–∏ decline
    order_id = parts[2]  # ID –∑–∞–∫–∞–∑–∞
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    success, order = get_order(order_id)
    
    if not success or not order:
        logger.error(f"Order {order_id} not found")
        await send_message(chat_id, "–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", token)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–æ
    if (order_id not in active_offers or 
        contractor.id not in active_offers.get(order_id, {}) or
        active_offers[order_id][contractor.id] < int(time.time())):
        
        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–æ
        await send_message(chat_id, "–í—Ä–µ–º—è –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–∫–∞–∑–∞ –∏—Å—Ç–µ–∫–ª–æ.", token)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ callback query
        await answer_callback_query(callback_id, "–í—Ä–µ–º—è –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–∫–∞–∑–∞ –∏—Å—Ç–µ–∫–ª–æ", token)
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
    if action == "accept":
        # –ü—Ä–∏–Ω–∏–º–∞–µ–º –∑–∞–∫–∞–∑
        success = assign_order_to_contractor(order_id, contractor.id)
        
        if success:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            increment_contractor_daily_order_count(contractor.id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ä—è–¥—á–∏–∫—É
            await send_message(
                chat_id,
                f"‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–∫–∞–∑: {order.title}\n\n–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã.",
                token,
                create_order_keyboard(order_id)
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ callback query
            await answer_callback_query(callback_id, "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç", token)
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞
            if order_id in active_offers:
                del active_offers[order_id]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫—É
            # TODO: –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫—É –æ —Ç–æ–º, —á—Ç–æ –µ–≥–æ –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç
        else:
            await send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", token)
            await answer_callback_query(callback_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞", token)
    
    elif action == "decline":
        # –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞–∫–∞–∑
        await send_message(chat_id, f"–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–∫–∞–∑: {order.title}", token)
        await answer_callback_query(callback_id, "–ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω", token)
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞
        if order_id in active_offers and contractor.id in active_offers[order_id]:
            del active_offers[order_id][contractor.id]

async def show_contractor_orders(chat_id: str, user_id: str, token: str) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞"""
    # –ü–æ–ª—É—á–∞–µ–º contractor_id –ø–æ user_id
    success, contractor = get_contractor(user_id)
    
    if not success or not contractor:
        logger.error(f"Contractor not found for user_id: {user_id}")
        await send_message(chat_id, "–û—à–∏–±–∫–∞: –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–¥—Ä—è–¥—á–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω", token)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–¥—Ä—è–¥—á–∏–∫–∞
    orders = list_orders({"contractor_id": contractor.id})
    
    if not orders:
        await send_message(chat_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.", token)
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–∫–∞–∑–æ–≤
    message = "<b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:</b>\n\n"
    
    for order in orders:
        status_emoji = "üÜï"
        if order.status == OrderStatus.ASSIGNED:
            status_emoji = "üìã"
        elif order.status == OrderStatus.IN_PROGRESS:
            status_emoji = "üîÑ"
        elif order.status == OrderStatus.COMPLETED:
            status_emoji = "‚úÖ"
        elif order.status == OrderStatus.CANCELLED:
            status_emoji = "‚ùå"
        
        message += f"{status_emoji} <b>{order.title}</b> "
        message += f"(ID: {order.order_id[:8]}...)\n"
        message += f"–°—Ç–∞—Ç—É—Å: {order.status}\n"
        
        if order.price:
            message += f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {order.price} —Ä—É–±.\n"
        
        message += "\n"
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–∫–∞–∑–∞
    inline_keyboard = {"inline_keyboard": []}
    
    for order in orders:
        inline_keyboard["inline_keyboard"].append([
            {"text": f"{order.title} ({order.status})", "callback_data": f"order_details_{order.order_id}"}
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û–±–Ω–æ–≤–∏—Ç—å"
    inline_keyboard["inline_keyboard"].append([
        {"text": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", "callback_data": "my_orders"}
    ])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await send_message(chat_id, message, token, inline_keyboard)

async def show_order_details(chat_id: str, user_id: str, order_id: str, token: str) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞
    success, contractor = get_contractor(user_id)
    
    if not success or not contractor:
        logger.error(f"Contractor not found for user_id: {user_id}")
        await send_message(chat_id, "–û—à–∏–±–∫–∞: –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–¥—Ä—è–¥—á–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω", token)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    success, order = get_order(order_id)
    
    if not success or not order:
        logger.error(f"Order {order_id} not found")
        await send_message(chat_id, "–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", token)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–º—É –ø–æ–¥—Ä—è–¥—á–∏–∫—É
    if order.contractor_id != contractor.id:
        logger.warning(f"Contractor {contractor.id} tried to access order {order_id} belonging to another contractor")
        await send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É.", token)
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ
    message = f"<b>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞</b>\n\n"
    message += f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {order.title}\n"
    message += f"<b>–°—Ç–∞—Ç—É—Å:</b> {order.status}\n"
    message += f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {order.description}\n"
    
    if order.price:
        message += f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {order.price} —Ä—É–±.\n"
    
    if order.address:
        message += f"<b>–ê–¥—Ä–µ—Å:</b> {order.address}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏
    if order.created_at:
        created_at = time.strftime("%d.%m.%Y %H:%M", time.localtime(order.created_at))
        message += f"<b>–°–æ–∑–¥–∞–Ω:</b> {created_at}\n"
    
    if order.status == OrderStatus.COMPLETED and order.completed_at:
        completed_at = time.strftime("%d.%m.%Y %H:%M", time.localtime(order.completed_at))
        message += f"<b>–ó–∞–≤–µ—Ä—à–µ–Ω:</b> {completed_at}\n"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Å—Ç–∞—Ç—É—Å—É –∑–∞–∫–∞–∑–∞
    await send_message(chat_id, message, token, create_order_keyboard(order_id, order.status))

def create_order_keyboard(order_id: str, status: OrderStatus = OrderStatus.ASSIGNED):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞"""
    inline_keyboard = {"inline_keyboard": []}
    
    if status == OrderStatus.ASSIGNED:
        # –ó–∞–∫–∞–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω, –Ω–æ –µ—â–µ –Ω–µ –Ω–∞—á–∞—Ç
        inline_keyboard["inline_keyboard"].append([
            {"text": "üöÄ –ù–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", "callback_data": f"start_order_{order_id}"}
        ])
    
    elif status == OrderStatus.IN_PROGRESS:
        # –ó–∞–∫–∞–∑ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        inline_keyboard["inline_keyboard"].append([
            {"text": "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑", "callback_data": f"complete_order_{order_id}"}
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤
    inline_keyboard["inline_keyboard"].append([
        {"text": "üìã –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤", "callback_data": "my_orders"}
    ])
    
    return inline_keyboard

async def update_order_status(chat_id: str, user_id: str, order_id: str, new_status: OrderStatus, token: str) -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞
    success, contractor = get_contractor(user_id)
    
    if not success or not contractor:
        logger.error(f"Contractor not found for user_id: {user_id}")
        await send_message(chat_id, "–û—à–∏–±–∫–∞: –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–¥—Ä—è–¥—á–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω", token)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    success, order = get_order(order_id)
    
    if not success or not order:
        logger.error(f"Order {order_id} not found")
        await send_message(chat_id, "–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", token)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–º—É –ø–æ–¥—Ä—è–¥—á–∏–∫—É
    if order.contractor_id != contractor.id:
        logger.warning(f"Contractor {contractor.id} tried to update order {order_id} belonging to another contractor")
        await send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É.", token)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–∞ —Å—Ç–∞—Ç—É—Å–∞
    if (new_status == OrderStatus.IN_PROGRESS and order.status != OrderStatus.ASSIGNED) or \
       (new_status == OrderStatus.COMPLETED and order.status != OrderStatus.IN_PROGRESS):
        logger.warning(f"Invalid status transition for order {order_id}: {order.status} -> {new_status}")
        await send_message(chat_id, "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞.", token)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    order.status = new_status
    
    # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    if new_status == OrderStatus.COMPLETED:
        order.completed_at = int(time.time())
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    success = update_order(order)
    
    if not success:
        logger.error(f"Failed to update order {order_id} status to {new_status}")
        await send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞.", token)
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    if new_status == OrderStatus.IN_PROGRESS:
        await send_message(chat_id, f"‚úÖ –í—ã –Ω–∞—á–∞–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞: {order.title}", token)
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
        await show_order_details(chat_id, user_id, order_id, token)
    
    elif new_status == OrderStatus.COMPLETED:
        await send_message(chat_id, f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∑–∞–∫–∞–∑: {order.title}", token)
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
        await show_contractor_orders(chat_id, user_id, token)

async def send_message(chat_id: str, text: str, token: str, reply_markup: Dict = None) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    try:
        send_url = f"https://api.telegram.org/bot{token}/sendMessage"
        data = {
            "chat_id": chat_id,
            "text": text,
            "parse_mode": "HTML"
        }
        
        if reply_markup:
            data["reply_markup"] = reply_markup
        
        req = urllib.request.Request(
            send_url,
            data=json.dumps(data).encode('utf-8'),
            headers={'Content-Type': 'application/json'}
        )
        
        with urllib.request.urlopen(req) as response:
            result = json.loads(response.read().decode())
            logger.info(f"Message sent: {result}")
            return True
    
    except Exception as e:
        logger.error(f"Error sending message: {str(e)}")
        return False

async def answer_callback_query(callback_query_id: str, text: str, token: str) -> bool:
    """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ callback query"""
    try:
        answer_url = f"https://api.telegram.org/bot{token}/answerCallbackQuery"
        data = {
            "callback_query_id": callback_query_id,
            "text": text
        }
        
        req = urllib.request.Request(
            answer_url,
            data=json.dumps(data).encode('utf-8'),
            headers={'Content-Type': 'application/json'}
        )
        
        with urllib.request.urlopen(req) as response:
            result = json.loads(response.read().decode())
            logger.info(f"Callback answered: {result}")
            return True
    
    except Exception as e:
        logger.error(f"Error answering callback: {str(e)}")
        return False 