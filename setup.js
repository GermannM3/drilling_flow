// –°–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
const { spawn, exec } = require('child_process');
const fs = require('fs');
const path = require('path');
const readline = require('readline');
const { execSync } = require('child_process');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  dim: '\x1b[2m',
  underscore: '\x1b[4m',
  blink: '\x1b[5m',
  reverse: '\x1b[7m',
  hidden: '\x1b[8m',
  
  black: '\x1b[30m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  white: '\x1b[37m',
  
  bgBlack: '\x1b[40m',
  bgRed: '\x1b[41m',
  bgGreen: '\x1b[42m',
  bgYellow: '\x1b[43m',
  bgBlue: '\x1b[44m',
  bgMagenta: '\x1b[45m',
  bgCyan: '\x1b[46m',
  bgWhite: '\x1b[47m'
};

// –í—ã–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞
console.log(`
${colors.bright}${colors.cyan}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                    ‚ïë
‚ïë               DRILL FLOW BOT SETUP                 ‚ïë
‚ïë                                                    ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${colors.reset}
`);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ —Å –≤—ã–≤–æ–¥–æ–º –ª–æ–≥–æ–≤
function runCommand(command, args, cwd = process.cwd()) {
  return new Promise((resolve, reject) => {
    console.log(`${colors.yellow}> –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É: ${colors.bright}${command} ${args.join(' ')}${colors.reset}`);
    
    const proc = spawn(command, args, { 
      cwd, 
      stdio: 'inherit',
      shell: process.platform === 'win32'
    });
    
    proc.on('close', (code) => {
      if (code === 0) {
        console.log(`${colors.green}‚úì –ö–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞${colors.reset}`);
        resolve();
      } else {
        console.error(`${colors.red}‚úó –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã (–∫–æ–¥ ${code})${colors.reset}`);
        reject(new Error(`Command failed with code ${code}`));
      }
    });
    
    proc.on('error', (err) => {
      console.error(`${colors.red}‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É: ${err.message}${colors.reset}`);
      reject(err);
    });
  });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è .env —Ñ–∞–π–ª–∞
function checkEnvFile() {
  const envPath = path.join(process.cwd(), '.env');
  
  if (fs.existsSync(envPath)) {
    console.log(`${colors.green}‚úì –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω${colors.reset}`);
    return Promise.resolve(true);
  } else {
    console.log(`${colors.yellow}! –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞—é...${colors.reset}`);
    
    return new Promise((resolve) => {
      rl.question(`${colors.cyan}–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ Telegram –±–æ—Ç–∞ (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞): ${colors.reset}`, (token) => {
        const botToken = token.trim() || '7293247588:AAH5qQkNUmhoTzZ-_MSw0gS4BKlSTAW5qdM';
        
        const envContent = `# –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
TELEGRAM_TOKEN=${botToken}

# URL –¥–ª—è –≤–µ–±—Ö—É–∫–∞ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
WEBHOOK_URL=https://drilling-flow.vercel.app/api/webhook

# –ü–æ—Ä—Ç –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
PORT=3000

# –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –æ—à–∏–±–æ–∫
NODE_ENV=development`;
        
        fs.writeFileSync(envPath, envContent);
        console.log(`${colors.green}‚úì –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω${colors.reset}`);
        resolve(true);
      });
    });
  }
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
async function installDependencies() {
  console.log(`\n${colors.cyan}${colors.bright}[1/4] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π${colors.reset}`);
  
  try {
    await runCommand('npm', ['install']);
    return true;
  } catch (error) {
    console.error(`${colors.red}–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: ${error.message}${colors.reset}`);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
async function runTests() {
  console.log(`\n${colors.cyan}${colors.bright}[2/4] –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤${colors.reset}`);
  
  try {
    await runCommand('node', ['test_bot_commands.js', '--test-mode']);
    return true;
  } catch (error) {
    console.error(`${colors.red}–¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π: ${error.message}${colors.reset}`);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
function startServer() {
  console.log(`\n${colors.cyan}${colors.bright}[3/4] –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞${colors.reset}`);
  
  return new Promise((resolve) => {
    rl.question(`${colors.yellow}–•–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä —Å–µ–π—á–∞—Å? (y/n): ${colors.reset}`, async (answer) => {
      if (answer.toLowerCase() === 'y' || answer.toLowerCase() === 'yes' || answer === '') {
        console.log(`${colors.green}–ó–∞–ø—É—Å–∫–∞—é —Å–µ—Ä–≤–µ—Ä...${colors.reset}`);
        
        try {
          await runCommand('npm', ['start']);
        } catch (error) {
          console.error(`${colors.red}–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${error.message}${colors.reset}`);
        }
      } else {
        console.log(`${colors.yellow}–ü—Ä–æ–ø—É—Å–∫–∞—é –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞.${colors.reset}`);
      }
      
      resolve(true);
    });
  });
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
function showHelp() {
  console.log(`\n${colors.cyan}${colors.bright}[4/4] –°–ø—Ä–∞–≤–∫–∞${colors.reset}`);
  
  console.log(`
${colors.bright}–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!${colors.reset}

${colors.yellow}–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:${colors.reset}
  ${colors.green}npm start${colors.reset}              - –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
  ${colors.green}npm run dev${colors.reset}            - –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (—Å –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–æ–π)
  ${colors.green}npm run test:commands${colors.reset}  - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
  ${colors.green}npm run test:callbacks${colors.reset} - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ callback-–∑–∞–ø—Ä–æ—Å–æ–≤

${colors.yellow}–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:${colors.reset}
  –ü–æ–ª–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ —Ñ–∞–π–ª–µ README.md
  
${colors.yellow}–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:${colors.reset}
  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ñ–∞–π–ª–µ .env
  
${colors.bright}${colors.cyan}–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ DrillFlow Bot!${colors.reset}
`);

  rl.close();
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    await checkEnvFile();
    if (await installDependencies()) {
      await startServer();
      showHelp();
    }
  } catch (error) {
    console.error(`${colors.red}${colors.bright}–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: ${error.message}${colors.reset}`);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main();

async function setup() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É DrillFlow...');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
  if (!fs.existsSync('.env')) {
    console.log('üìù –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª .env...');
    const defaultEnv = `# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL=postgresql://username:password@localhost:5432/drill_flow_db

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ JWT
JWT_SECRET=your-secret-key-here
JWT_ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30
JWT_EXPIRES_IN="24h"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –±–æ—Ç–∞
TELEGRAM_BOT_TOKEN=your-bot-token-here

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
PORT=3001
NODE_ENV=development

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
DEFAULT_WORK_RADIUS=10
MAX_WORK_RADIUS=100`;

    fs.writeFileSync('.env', defaultEnv);
    console.log('‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ —Å–≤–æ–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏.');
  }

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
  console.log('üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...');
  execSync('npm install', { stdio: 'inherit' });

  // –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
  console.log('üóÑÔ∏è –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
  try {
    execSync('npx prisma migrate dev', { stdio: 'inherit' });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω –∏ –¥–∞–Ω–Ω—ã–µ –≤ .env –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.');
    process.exit(1);
  }

  console.log(`
‚ú® –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! ‚ú®

–î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:
1. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª .env –∏ —É–∫–∞–∂–∏—Ç–µ:
   - DATABASE_URL - URL –≤–∞—à–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL
   - TELEGRAM_BOT_TOKEN - —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –æ—Ç @BotFather

2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç –∫–æ–º–∞–Ω–¥–æ–π:
   npm run dev

–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ñ–∞–π–ª–µ README.md
  `);

  rl.question('–•–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ —Å–µ–π—á–∞—Å? (y/n) ', (answer) => {
    if (answer.toLowerCase() === 'y') {
      console.log('ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...');
      execSync('npm run dev', { stdio: 'inherit' });
    } else {
      console.log('üëã –î–æ –≤—Å—Ç—Ä–µ—á–∏! –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –ø–æ–∑–∂–µ –∫–æ–º–∞–Ω–¥–æ–π npm run dev');
    }
    rl.close();
  });
}

setup().catch(console.error); 