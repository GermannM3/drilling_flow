from aiogram import Bot, Dispatcher
from aiogram.types import WebAppInfo, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from ..core.config import get_settings

settings = get_settings()
bot = Bot(token=settings.TELEGRAM_TOKEN)
dp = Dispatcher(bot)

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
webapp_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(
            text="üåê –û—Ç–∫—Ä—ã—Ç—å DrillFlow",
            web_app=WebAppInfo(url="https://drilling-flow.vercel.app")
        )],
        [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton(text="üìù –ù–æ–≤—ã–π –∑–∞–∫–∞–∑")],
        [KeyboardButton(text="üë• –ü–æ–¥—Ä—è–¥—á–∏–∫–∏"), KeyboardButton(text="‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥")]
    ],
    resize_keyboard=True
)

@dp.message_handler(commands=['start'])
async def start_command(message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DrillFlow! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:",
        reply_markup=webapp_keyboard
    )

@dp.message_handler(lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def statistics(message):
    stats_text = """
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ DrillFlow*
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤: 247
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: 1,893
‚Ä¢ –û–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤: 42
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: 4.8‚≠êÔ∏è
    """
    await message.answer(stats_text, parse_mode="Markdown")

@dp.message_handler(lambda message: message.text == "üìù –ù–æ–≤—ã–π –∑–∞–∫–∞–∑")
async def new_order(message):
    order_keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑", web_app=WebAppInfo(url="https://drilling-flow.vercel.app/new-order"))
    )
    await message.answer("–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:", reply_markup=order_keyboard)

@dp.message_handler(lambda message: message.text == "üë• –ü–æ–¥—Ä—è–¥—á–∏–∫–∏")
async def contractors(message):
    await message.answer("–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤:\n\n" + 
                        "1. –û–û–û '–ë—É—Ä–°—Ç—Ä–æ–π' - ‚≠êÔ∏è4.9\n" +
                        "2. –ò–ü –ò–≤–∞–Ω–æ–≤ - ‚≠êÔ∏è4.8\n" +
                        "3. –ê–û '–ì–µ–æ–î—Ä–∏–ª–ª' - ‚≠êÔ∏è4.7")

@dp.message_handler(lambda message: message.text == "‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥")
async def rating(message):
    await message.answer("–í–∞—à —Ç–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: ‚≠êÔ∏è4.8\n\n" +
                        "–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: 12\n" +
                        "–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤: 11\n" +
                        "–°—Ç–∞—Ç—É—Å: –ù–∞–¥—ë–∂–Ω—ã–π –ø–∞—Ä—Ç–Ω—ë—Ä üèÜ")

@dp.message_handler()
async def handle_message(message):
    if message.web_app_data:
        await message.answer(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {message.web_app_data.data}")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.") 