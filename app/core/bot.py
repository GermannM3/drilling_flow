from aiogram import Bot, Dispatcher, Router
from aiogram.types import WebAppInfo, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from ..core.config import get_settings

settings = get_settings()
bot = Bot(token=settings.TELEGRAM_TOKEN)
dp = Dispatcher()
router = Router()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –±–æ—Ç–∞ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ
dp.bot = bot

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
webapp_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(
            text="üåê –û—Ç–∫—Ä—ã—Ç—å DrillFlow",
            web_app=WebAppInfo(url="https://drilling-flow.vercel.app")
        )],
        [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton(text="üìù –ù–æ–≤—ã–π –∑–∞–∫–∞–∑")],
        [KeyboardButton(text="üë• –ü–æ–¥—Ä—è–¥—á–∏–∫–∏"), KeyboardButton(text="‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥")]
    ],
    resize_keyboard=True
)

@router.message(Command("start"))
async def start_command(message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DrillFlow!\n\n" +
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
        reply_markup=webapp_keyboard
    )

@router.message(lambda m: m.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def statistics(message):
    await message.answer(
        "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü:\n\n" +
        "–ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: 156\n" +
        "–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: 142\n" +
        "–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤: 48"
    )

@router.message(lambda m: m.text == "üìù –ù–æ–≤—ã–π –∑–∞–∫–∞–∑")
async def new_order(message):
    await message.answer(
        "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton(
                "–û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                web_app=WebAppInfo(url="https://drilling-flow.vercel.app")
            )
        )
    )

@router.message(lambda m: m.text == "üë• –ü–æ–¥—Ä—è–¥—á–∏–∫–∏")
async def contractors(message):
    await message.answer(
        "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤:\n\n" + 
        "1. –û–û–û '–ë—É—Ä–°—Ç—Ä–æ–π' - ‚≠êÔ∏è4.9\n" +
        "2. –ò–ü –ò–≤–∞–Ω–æ–≤ - ‚≠êÔ∏è4.8\n" +
        "3. –ê–û '–ì–µ–æ–î—Ä–∏–ª–ª' - ‚≠êÔ∏è4.7"
    )

@router.message(lambda m: m.text == "‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥")
async def rating(message):
    await message.answer(
        "–í–∞—à —Ç–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: ‚≠êÔ∏è4.8\n\n" +
        "–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: 12\n" +
        "–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤: 11\n" +
        "–°—Ç–∞—Ç—É—Å: –ù–∞–¥—ë–∂–Ω—ã–π –ø–∞—Ä—Ç–Ω—ë—Ä üèÜ"
    )

@router.message()
async def handle_message(message):
    if message.web_app_data:
        await message.answer(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {message.web_app_data.data}")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ
dp.include_router(router) 