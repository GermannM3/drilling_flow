"""
–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
"""
from aiogram import Bot, Dispatcher, Router
from aiogram.types import (
    WebAppInfo, KeyboardButton, ReplyKeyboardMarkup, 
    InlineKeyboardMarkup, InlineKeyboardButton,
    Message, BotCommand
)
from aiogram.filters import Command
from aiogram.enums.parse_mode import ParseMode
from aiogram.client.default import DefaultBotProperties
from ..core.config import get_settings
import asyncio
import logging

settings = get_settings()
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if not settings.TESTING:
    bot = Bot(
        token=settings.TELEGRAM_TOKEN,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )
    dp = Dispatcher()
else:
    from unittest.mock import AsyncMock, MagicMock
    # –í —Ç–µ—Å—Ç–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–∏
    bot = MagicMock()
    bot.send_message = AsyncMock()
    dp = MagicMock()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –±–æ—Ç–∞ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ
dp.bot = bot

async def setup_bot_commands():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    try:
        commands = [
            BotCommand(command="start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
            BotCommand(command="help", description="–ü–æ–º–æ—â—å"),
            BotCommand(command="orders", description="–ú–æ–∏ –∑–∞–∫–∞–∑—ã"),
            BotCommand(command="profile", description="–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
        ]
        await bot.set_my_commands(commands)
        logger.info("Bot commands set up successfully")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –¥–æ–º–µ–Ω
        if settings.TELEGRAM_BOT_DOMAIN:
            webhook_url = f"https://{settings.TELEGRAM_BOT_DOMAIN}/api/webhook"
            try:
                await bot.set_webhook(webhook_url)
                logger.info(f"Webhook set to {webhook_url}")
            except Exception as e:
                logger.error(f"Error setting webhook: {e}")
    except Exception as e:
        logger.error(f"Error setting up bot commands: {e}")

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
webapp_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(
            text="üåê –û—Ç–∫—Ä—ã—Ç—å DrillFlow",
            web_app=WebAppInfo(url=f"https://{settings.TELEGRAM_BOT_DOMAIN}")
        )],
        [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton(text="üìù –ù–æ–≤—ã–π –∑–∞–∫–∞–∑")],
        [KeyboardButton(text="üë• –ü–æ–¥—Ä—è–¥—á–∏–∫–∏"), KeyboardButton(text="‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥")]
    ],
    resize_keyboard=True,
    is_persistent=True
)

@router.message(Command("start"))
async def start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DrillFlow! üöÄ\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –±—É—Ä–æ–≤—ã–º–∏ —Ä–∞–±–æ—Ç–∞–º–∏.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
            reply_markup=webapp_keyboard
        )
        logger.info(f"Start command processed for user {message.from_user.id}")
    except Exception as e:
        logger.error(f"Error processing start command: {e}")

@router.message(Command("help"))
async def help_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/register - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n"
        "/profile - –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/orders - –ú–æ–∏ –∑–∞–∫–∞–∑—ã\n"
        "/new_order - –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑\n"
        "/help - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
    )
    await message.answer(help_text, reply_markup=webapp_keyboard)

@router.message(Command("register"))
async def register_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /register"""
    register_button = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(
            text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",
            web_app=WebAppInfo(url=f"https://{settings.TELEGRAM_BOT_DOMAIN}/register")
        )
    ]])
    await message.answer(
        "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=register_button
    )

@router.message(lambda m: m.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def statistics(message):
    await message.answer(
        "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü:\n\n" +
        "–ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: 156\n" +
        "–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: 142\n" +
        "–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤: 48",
        reply_markup=webapp_keyboard
    )

@router.message(lambda m: m.text == "üìù –ù–æ–≤—ã–π –∑–∞–∫–∞–∑")
async def new_order(message):
    await message.answer(
        "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(
                text="–û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                web_app=WebAppInfo(url=f"https://{settings.TELEGRAM_BOT_DOMAIN}")
            )
        ]])
    )

@router.message(lambda m: m.text == "üë• –ü–æ–¥—Ä—è–¥—á–∏–∫–∏")
async def contractors(message):
    await message.answer(
        "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤:\n\n" + 
        "1. –û–û–û '–ë—É—Ä–°—Ç—Ä–æ–π' - ‚≠êÔ∏è4.9\n" +
        "2. –ò–ü –ò–≤–∞–Ω–æ–≤ - ‚≠êÔ∏è4.8\n" +
        "3. –ê–û '–ì–µ–æ–î—Ä–∏–ª–ª' - ‚≠êÔ∏è4.7",
        reply_markup=webapp_keyboard
    )

@router.message(lambda m: m.text == "‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥")
async def rating(message):
    await message.answer(
        "–í–∞—à —Ç–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: ‚≠êÔ∏è4.8\n\n" +
        "–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: 12\n" +
        "–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤: 11\n" +
        "–°—Ç–∞—Ç—É—Å: –ù–∞–¥—ë–∂–Ω—ã–π –ø–∞—Ä—Ç–Ω—ë—Ä üèÜ",
        reply_markup=webapp_keyboard
    )

@router.message()
async def handle_message(message):
    if message.web_app_data:
        await message.answer(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {message.web_app_data.data}")
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
            reply_markup=webapp_keyboard
        )

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ
dp.include_router(router)

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
__all__ = ["bot", "dp", "router"]

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –±—É–¥—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

async def setup_webhook():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞"""
    if settings.BOT_WEBHOOK_URL:
        await bot.set_webhook(settings.BOT_WEBHOOK_URL)
        print(f"Webhook set to {settings.BOT_WEBHOOK_URL}") 