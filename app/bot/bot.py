from telegram import InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, MessageHandler, filters
import json
import base64
from log import logger

class Bot:
    def __init__(self, token: str, webapp_url: str):
        self.application = Application.builder().token(token).build()
        self.webapp_url = webapp_url
        
        # Handlers
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, self.handle_webapp_data))

    async def start_command(self, update, context):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        keyboard = [[InlineKeyboardButton(
            "–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑",
            web_app=WebAppInfo(url=f"{self.webapp_url}/webapp")
        )]]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑:",
            reply_markup=reply_markup
        )

    async def handle_webapp_data(self, update, context):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            data = json.loads(update.message.web_app_data.data)
            
            if data['action'] == 'create_order':
                order_data = data['data']
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
                order = await self.create_order(
                    client_id=update.effective_user.id,
                    service_type=order_data['service_type'],
                    address=order_data['address'],
                    latitude=float(order_data['latitude']),
                    longitude=float(order_data['longitude']),
                    description=order_data['description']
                )
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ
                if 'photo' in order_data:
                    photo_data = base64.b64decode(order_data['photo'].split(',')[1])
                    await self.save_order_photo(order.id, photo_data)
                
                # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤
                contractors = await self.find_nearby_contractors(
                    latitude=float(order_data['latitude']),
                    longitude=float(order_data['longitude'])
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                await update.message.reply_text(
                    f"‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!\n\n"
                    f"üìç {order_data['address']}\n"
                    f"üîß {order.get_service_type_display()}\n"
                    f"üìù {order_data['description']}\n\n"
                    f"–ù–∞–π–¥–µ–Ω–æ {len(contractors)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤"
                )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤
                for contractor in contractors:
                    await self.notify_contractor(contractor, order)
                    
        except Exception as e:
            logger.error(f"Error processing webapp data: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")

    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        self.application.run_polling() 