from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup
import json
import base64
from app.core.logger import logger
from app.core.config import settings

class TelegramBot:
    def __init__(self):
        self.bot = Bot(token=settings.TELEGRAM_TOKEN)
        self.dp = Dispatcher()
        self.webapp_url = "https://t.me/Drill_Flow_bot/D_F"
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
        self.register_handlers()

    def register_handlers(self):
        self.dp.message.register(self.start_command, Command("start"))
        self.dp.message.register(self.handle_webapp_data, lambda m: m.web_app_data)

    async def start_command(self, message: types.Message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(
                text="–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑",
                web_app=WebAppInfo(url=self.webapp_url)
            )
        ]])
        
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑:",
            reply_markup=keyboard
        )

    async def handle_webapp_data(self, message: types.Message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            data = json.loads(message.web_app_data.data)
            
            if data['action'] == 'create_order':
                order_data = data['data']
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
                order = await self.create_order(
                    client_id=message.from_user.id,
                    service_type=order_data['service_type'],
                    address=order_data['address'],
                    latitude=float(order_data['latitude']),
                    longitude=float(order_data['longitude']),
                    description=order_data['description']
                )
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ
                if 'photo' in order_data:
                    photo_data = base64.b64decode(order_data['photo'].split(',')[1])
                    await self.save_order_photo(order.id, photo_data)
                
                # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤
                contractors = await self.find_nearby_contractors(
                    latitude=float(order_data['latitude']),
                    longitude=float(order_data['longitude'])
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                await message.answer(
                    f"‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!\n\n"
                    f"üìç {order_data['address']}\n"
                    f"üîß {order.get_service_type_display()}\n"
                    f"üìù {order_data['description']}\n\n"
                    f"–ù–∞–π–¥–µ–Ω–æ {len(contractors)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤"
                )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤
                for contractor in contractors:
                    await self.notify_contractor(contractor, order)
                    
        except Exception as e:
            logger.error(f"Error processing webapp data: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")

    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        try:
            logger.info("Starting bot...")
            await self.dp.start_polling(self.bot)
        except Exception as e:
            logger.error(f"Error starting bot: {e}")
            raise 