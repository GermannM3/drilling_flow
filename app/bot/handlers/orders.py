"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏
"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from app.services.orders import OrderService
from app.services.users import UserService
from app.schemas.base import OrderStatus, UserRoleEnum
from app.bot.keyboards import get_main_keyboard
from app.utils.geo import format_location

router = Router(name="orders")

@router.message(F.text == "üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def show_orders(message: Message, order_service: OrderService, user_service: UserService):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = await user_service.get_user(str(message.from_user.id))
    if not user:
        await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user.role == UserRoleEnum.CONTRACTOR:
        orders = await order_service.get_contractor_orders(str(message.from_user.id))
        title = "üìã –í–∞—à–∏ –∑–∞–∫–∞–∑—ã (–ø–æ–¥—Ä—è–¥—á–∏–∫):"
    else:
        orders = await order_service.get_client_orders(str(message.from_user.id))
        title = "üìã –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:"

    if not orders:
        await message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤",
            reply_markup=get_main_keyboard()
        )
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
    orders_text = [title]
    for order in orders:
        order_text = f"\nüîπ –ó–∞–∫–∞–∑ #{order.id}\n"
        order_text += f"–¢–∏–ø: {order.service_type.value}\n"
        order_text += f"–°—Ç–∞—Ç—É—Å: {order.status.value}\n"
        order_text += f"–ê–¥—Ä–µ—Å: {order.address}\n"
        
        if order.location_lat and order.location_lon:
            order_text += f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {format_location(order.location_lat, order.location_lon)}\n"
            
        order_text += f"–û–ø–∏—Å–∞–Ω–∏–µ: {order.description}\n"
        
        if order.price:
            order_text += f"–¶–µ–Ω–∞: {order.price} ‚ÇΩ\n"
            
        if order.status == OrderStatus.COMPLETED and hasattr(order, 'rating'):
            order_text += f"–û—Ü–µ–Ω–∫–∞: {'‚≠ê' * round(order.rating.rating)}\n"
            if order.rating.comment:
                order_text += f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order.rating.comment}\n"
                
        orders_text.append(order_text)

    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
    message_text = ""
    for text in orders_text:
        if len(message_text) + len(text) > 4000:
            await message.answer(message_text)
            message_text = text
        else:
            message_text += text
            
    if message_text:
        await message.answer(
            message_text,
            reply_markup=get_main_keyboard()
        )

@router.callback_query(lambda c: c.data.startswith("complete_order_"))
async def complete_order(callback: CallbackQuery, order_service: OrderService):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑"""
    order_id = int(callback.data.split("_")[2])
    order = await order_service.get_order(order_id)
    
    if not order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
        
    if order.status != OrderStatus.ASSIGNED:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ–ª—å–∑—è –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤ —Ç–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ")
        return
        
    try:
        await order_service.complete_order(order_id)
        await callback.message.answer(
            f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –ø–æ–¥—Ä—è–¥—á–∏–∫–∞.",
            reply_markup=get_rating_keyboard(order_id)
        )
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {str(e)}")
    
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith("rate_"))
async def process_rating(callback: CallbackQuery, order_service: OrderService):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏ –∑–∞–∫–∞–∑–∞"""
    _, order_id, rating = callback.data.split("_")
    order_id = int(order_id)
    rating = float(rating)
    
    try:
        await order_service.complete_order(order_id, rating=rating)
        await callback.message.answer(
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É! ({'‚≠ê' * round(rating)})"
        )
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏: {str(e)}")
    
    await callback.answer()

def get_rating_keyboard(order_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∑–∞–∫–∞–∑–∞"""
    builder = InlineKeyboardBuilder()
    for rating in range(1, 6):
        builder.button(
            text="‚≠ê" * rating,
            callback_data=f"rate_{order_id}_{rating}"
        )
    builder.adjust(5)
    return builder.as_markup() 