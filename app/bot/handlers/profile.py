"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from app.bot.keyboards import get_profile_keyboard, get_main_keyboard
from app.services.users import UserService
from app.schemas.base import UserRoleEnum

router = Router(name="profile")

class ProfileStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    entering_company = State()
    entering_description = State()
    entering_radius = State()
    entering_specializations = State()

@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: Message, user_service: UserService):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = await user_service.get_user(str(message.from_user.id))
    if not user:
        await message.answer("–û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
        
    profile_text = f"üë§ –ü—Ä–æ—Ñ–∏–ª—å\n\n"
    profile_text += f"–ò–º—è: {user.first_name}\n"
    profile_text += f"Username: @{user.username}\n"
    profile_text += f"–†–æ–ª—å: {'–ü–æ–¥—Ä—è–¥—á–∏–∫' if user.role == UserRoleEnum.CONTRACTOR else '–ö–ª–∏–µ–Ω—Ç'}\n"
    
    if user.role == UserRoleEnum.CONTRACTOR:
        contractor = await user_service.get_contractor_profile(user.id)
        if contractor:
            profile_text += f"\nüíº –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–¥—Ä—è–¥—á–∏–∫–∞:\n"
            profile_text += f"–ö–æ–º–ø–∞–Ω–∏—è: {contractor.company_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            profile_text += f"–û–ø–∏—Å–∞–Ω–∏–µ: {contractor.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            profile_text += f"–†–∞–¥–∏—É—Å —Ä–∞–±–æ—Ç—ã: {contractor.work_radius_km or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} –∫–º\n"
            profile_text += f"–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {', '.join(contractor.specializations) or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            profile_text += f"–°—Ç–∞—Ç—É—Å: {'–î–æ—Å—Ç—É–ø–µ–Ω' if contractor.is_available else '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}\n"
            if user.rating:
                profile_text += f"–†–µ–π—Ç–∏–Ω–≥: {'‚≠ê' * round(user.rating)}\n"
    
    await message.answer(
        profile_text,
        reply_markup=get_profile_keyboard(user.role == UserRoleEnum.CONTRACTOR)
    )

@router.callback_query(F.data == "become_contractor")
async def start_contractor_registration(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–¥—Ä—è–¥—á–∏–∫–∞"""
    await state.set_state(ProfileStates.entering_company)
    await callback.message.answer(
        "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:"
    )
    await callback.answer()

@router.message(ProfileStates.entering_company)
async def process_company_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏"""
    await state.update_data(company_name=message.text)
    await state.set_state(ProfileStates.entering_description)
    await message.answer(
        "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∫–æ–º–ø–∞–Ω–∏—é –∏ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:"
    )

@router.message(ProfileStates.entering_description)
async def process_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è"""
    await state.update_data(description=message.text)
    await state.set_state(ProfileStates.entering_radius)
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å —Ä–∞–±–æ—Ç—ã –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50):"
    )

@router.message(ProfileStates.entering_radius)
async def process_radius(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ä–∞–¥–∏—É—Å–∞ —Ä–∞–±–æ—Ç—ã"""
    try:
        radius = float(message.text)
        if radius <= 0:
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
        return
        
    await state.update_data(work_radius_km=radius)
    await state.set_state(ProfileStates.entering_specializations)
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –±—É—Ä–µ–Ω–∏–µ, —Ä–µ–º–æ–Ω—Ç, –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è):"
    )

@router.message(ProfileStates.entering_specializations)
async def process_specializations(
    message: Message,
    state: FSMContext,
    user_service: UserService
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–¥—Ä—è–¥—á–∏–∫–∞"""
    specializations = [s.strip().lower() for s in message.text.split(",")]
    data = await state.get_data()
    
    try:
        await user_service.create_contractor_profile(
            user_id=message.from_user.id,
            company_name=data["company_name"],
            description=data["description"],
            work_radius_km=data["work_radius_km"],
            specializations=specializations
        )
        
        await message.answer(
            "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–¥—Ä—è–¥—á–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã.",
            reply_markup=get_main_keyboard()
        )
    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {str(e)}",
            reply_markup=get_main_keyboard()
        )
    
    await state.clear()

@router.callback_query(F.data == "toggle_status")
async def toggle_contractor_status(callback: CallbackQuery, user_service: UserService):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞"""
    user = await user_service.get_user(str(callback.from_user.id))
    if not user or user.role != UserRoleEnum.CONTRACTOR:
        await callback.answer("–û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–¥—Ä—è–¥—á–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
        
    contractor = await user_service.get_contractor_profile(user.id)
    if not contractor:
        await callback.answer("–û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–¥—Ä—è–¥—á–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
        
    is_available = await user_service.toggle_contractor_status(contractor.id)
    await callback.answer(
        f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω: {'–î–æ—Å—Ç—É–ø–µ–Ω' if is_available else '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}"
    )
    await show_profile(callback.message, user_service) 